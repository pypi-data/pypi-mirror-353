# serializer version: 1
# name: test_query_schemas[auto_order_by]
  '''
  input ColorAggregateMinMaxStringFieldsOrderBy {
    name: OrderByEnum = null
  }
  
  input ColorAggregateNumericFieldsOrderBy {
    name: OrderByEnum = null
  }
  
  input ColorAggregateOrderBy {
    count: OrderByEnum = null
    maxString: ColorAggregateMinMaxStringFieldsOrderBy = null
    minString: ColorAggregateMinMaxStringFieldsOrderBy = null
    sum: ColorAggregateNumericFieldsOrderBy = null
  }
  
  """
  Boolean expression to compare fields. All fields are combined with logical 'AND'.
  """
  input ColorOrderBy {
    fruitsAggregate: FruitAggregateOrderBy = null
    fruits: FruitOrderBy
    name: OrderByEnum
    id: OrderByEnum
  }
  
  """GraphQL type"""
  type ColorType {
    fruitsAggregate: FruitAggregate!
  
    """Fetch objects from the FruitType collection"""
    fruits(orderBy: [FruitOrderBy!] = null): [FruitType!]!
    name: String!
    id: UUID!
  }
  
  """Aggregation fields"""
  type FruitAggregate {
    avg: FruitNumericFields!
    count: Int
    max: FruitMinMaxFields!
    min: FruitMinMaxFields!
    stddevPop: FruitNumericFields!
    stddevSamp: FruitNumericFields!
    sum: FruitSumFields!
    varPop: FruitNumericFields!
    varSamp: FruitNumericFields!
  }
  
  input FruitAggregateMinMaxStringFieldsOrderBy {
    name: OrderByEnum = null
  }
  
  input FruitAggregateNumericFieldsOrderBy {
    sweetness: OrderByEnum = null
  }
  
  input FruitAggregateOrderBy {
    avg: FruitAggregateNumericFieldsOrderBy = null
    count: OrderByEnum = null
    max: FruitAggregateNumericFieldsOrderBy = null
    maxString: FruitAggregateMinMaxStringFieldsOrderBy = null
    min: FruitAggregateNumericFieldsOrderBy = null
    minString: FruitAggregateMinMaxStringFieldsOrderBy = null
    stddevPop: FruitAggregateNumericFieldsOrderBy = null
    stddevSamp: FruitAggregateNumericFieldsOrderBy = null
    sum: FruitAggregateNumericFieldsOrderBy = null
    varPop: FruitAggregateNumericFieldsOrderBy = null
    varSamp: FruitAggregateNumericFieldsOrderBy = null
  }
  
  """GraphQL type"""
  type FruitMinMaxFields {
    name: String
    sweetness: Int
  }
  
  """GraphQL type"""
  type FruitNumericFields {
    sweetness: Float
  }
  
  """
  Boolean expression to compare fields. All fields are combined with logical 'AND'.
  """
  input FruitOrderBy {
    colorAggregate: ColorAggregateOrderBy = null
    color: ColorOrderBy
    name: OrderByEnum
    colorId: OrderByEnum
    sweetness: OrderByEnum
    id: OrderByEnum
  }
  
  """GraphQL type"""
  type FruitSumFields {
    name: String
    sweetness: Int
  }
  
  """GraphQL type"""
  type FruitType {
    color: ColorType!
    name: String!
    colorId: UUID
    sweetness: Int!
    id: UUID!
  }
  
  """Aggregation fields"""
  type GroupAggregate {
    count: Int
    max: GroupMinMaxFields!
    min: GroupMinMaxFields!
    sum: GroupSumFields!
  }
  
  input GroupAggregateMinMaxStringFieldsOrderBy {
    name: OrderByEnum = null
  }
  
  input GroupAggregateNumericFieldsOrderBy {
    name: OrderByEnum = null
  }
  
  input GroupAggregateOrderBy {
    count: OrderByEnum = null
    maxString: GroupAggregateMinMaxStringFieldsOrderBy = null
    minString: GroupAggregateMinMaxStringFieldsOrderBy = null
    sum: GroupAggregateNumericFieldsOrderBy = null
  }
  
  """GraphQL type"""
  type GroupMinMaxFields {
    name: String
  }
  
  """
  Boolean expression to compare fields. All fields are combined with logical 'AND'.
  """
  input GroupOrderBy {
    tagAggregate: TagAggregateOrderBy = null
    tag: TagOrderBy
    usersAggregate: UserAggregateOrderBy = null
    users: UserOrderBy
    colorAggregate: ColorAggregateOrderBy = null
    color: ColorOrderBy
    name: OrderByEnum
    tagId: OrderByEnum
    colorId: OrderByEnum
    id: OrderByEnum
  }
  
  """GraphQL type"""
  type GroupSumFields {
    name: String
  }
  
  """GraphQL type"""
  type GroupType {
    tag: TagType!
    usersAggregate: UserAggregate!
  
    """Fetch objects from the UserType collection"""
    users(orderBy: [UserOrderBy!] = null): [UserType!]!
    color: ColorType!
    name: String!
    tagId: UUID!
    colorId: UUID!
    id: UUID!
  }
  
  enum OrderByEnum {
    ASC
    ASC_NULLS_FIRST
    ASC_NULLS_LAST
    DESC
    DESC_NULLS_FIRST
    DESC_NULLS_LAST
  }
  
  type Query {
    """Fetch objects from the GroupType collection"""
    group: [GroupType!]!
  }
  
  input TagAggregateMinMaxStringFieldsOrderBy {
    name: OrderByEnum = null
  }
  
  input TagAggregateNumericFieldsOrderBy {
    name: OrderByEnum = null
  }
  
  input TagAggregateOrderBy {
    count: OrderByEnum = null
    maxString: TagAggregateMinMaxStringFieldsOrderBy = null
    minString: TagAggregateMinMaxStringFieldsOrderBy = null
    sum: TagAggregateNumericFieldsOrderBy = null
  }
  
  """
  Boolean expression to compare fields. All fields are combined with logical 'AND'.
  """
  input TagOrderBy {
    groupsAggregate: GroupAggregateOrderBy = null
    groups: GroupOrderBy
    name: OrderByEnum
    id: OrderByEnum
  }
  
  """GraphQL type"""
  type TagType {
    groupsAggregate: GroupAggregate!
  
    """Fetch objects from the GroupType collection"""
    groups(orderBy: [GroupOrderBy!] = null): [GroupType!]!
    name: String!
    id: UUID!
  }
  
  scalar UUID
  
  """Aggregation fields"""
  type UserAggregate {
    count: Int
    max: UserMinMaxFields!
    min: UserMinMaxFields!
    sum: UserSumFields!
  }
  
  input UserAggregateMinMaxStringFieldsOrderBy {
    name: OrderByEnum = null
  }
  
  input UserAggregateNumericFieldsOrderBy {
    name: OrderByEnum = null
  }
  
  input UserAggregateOrderBy {
    count: OrderByEnum = null
    maxString: UserAggregateMinMaxStringFieldsOrderBy = null
    minString: UserAggregateMinMaxStringFieldsOrderBy = null
    sum: UserAggregateNumericFieldsOrderBy = null
  }
  
  """GraphQL type"""
  type UserMinMaxFields {
    name: String
  }
  
  """
  Boolean expression to compare fields. All fields are combined with logical 'AND'.
  """
  input UserOrderBy {
    groupAggregate: GroupAggregateOrderBy = null
    group: GroupOrderBy
    tagAggregate: TagAggregateOrderBy = null
    tag: TagOrderBy
    name: OrderByEnum
    groupId: OrderByEnum
    tagId: OrderByEnum
    id: OrderByEnum
  }
  
  """GraphQL type"""
  type UserSumFields {
    name: String
  }
  
  """GraphQL type"""
  type UserType {
    group: GroupType!
    tag: TagType!
    name: String!
    groupId: UUID
    tagId: UUID
    id: UUID!
  }
  '''
# ---
