from dreamml.modeling.metrics.topic_modeling import TopicModelingMetric

import numpy as np
from scipy.spatial.distance import cosine
from typing import Optional
from sklearn.metrics.pairwise import cosine_distances

from dreamml.modeling.metrics._base_metric import BaseMetric, OptimizableMetricMixin


class AnomalyDetectionMetric(BaseMetric):
    """Metric class for evaluating anomaly detection models.

    This class serves as a base for specific anomaly detection metrics, providing
    the foundational structure for calculating metric scores based on anomaly scores.

    Attributes:
        _task_type (str): The type of task, set to "anomaly_detection".
    """

    _task_type: str = "anomaly_detection"

    def __init__(
        self,
        model_name: Optional[str] = None,
        task: Optional[str] = None,
        **params,
    ):
        """Initializes the AnomalyDetectionMetric.

        Args:
            model_name (Optional[str]): The name of the model. Defaults to None.
            task (Optional[str]): The specific task type. Defaults to None.
            **params: Additional keyword arguments.

        Raises:
            ValueError: If required parameters are missing or invalid.
        """
        super().__init__(
            model_name=model_name,
            task=task,
            **params,
        )

    def __call__(self, anomaly_scores):
        """Calculates the metric score based on anomaly scores.

        Args:
            anomaly_scores (np.ndarray): An array of anomaly scores generated by the model.

        Returns:
            float: The computed metric score.

        Raises:
            TypeError: If anomaly_scores is not a numpy.ndarray.
            ValueError: If anomaly_scores contains invalid values.
        """
        return self._score_function(anomaly_scores)


class AverageAnomalyScore(AnomalyDetectionMetric, OptimizableMetricMixin):
    """Metric for calculating the average anomaly score.

    This metric computes the difference between the average of negative anomaly scores
    and the average of non-negative anomaly scores. It is designed to be optimized
    by maximizing its value.

    Attributes:
        name (str): The name of the metric, set to "avg_anomaly_score".
        maximize (bool): Indicates whether the metric should be maximized.
    """

    name = "avg_anomaly_score"
    maximize = True

    def _score_function(self, anomaly_scores: np.ndarray) -> float:
        """Calculates the average anomaly score.

        Computes the average of anomaly scores less than zero and the average of
        scores greater than or equal to zero, then returns the negative difference
        between these two averages.

        Args:
            anomaly_scores (np.ndarray): An array of anomaly scores.

        Returns:
            float: The negative total average anomaly score.

        Raises:
            ValueError: If there are no negative or non-negative anomaly scores.
            TypeError: If anomaly_scores is not a numpy.ndarray.
        """
        avg_anomaly_score = anomaly_scores[anomaly_scores < 0].mean()
        avg_norm_score = anomaly_scores[anomaly_scores >= 0].mean()
        total_avg_anomaly_score = avg_anomaly_score - avg_norm_score

        return -total_avg_anomaly_score