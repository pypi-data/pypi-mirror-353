from omegaconf import OmegaConf


def as_tuple(*args):
    """
    Converts the provided arguments into a tuple.

    Args:
        *args: Variable length argument list.

    Returns:
        A tuple containing all the provided arguments.
    """
    return tuple(args)


def xgboost_enable_categorical(*, _root_):
    """
    Determines whether XGBoost should enable categorical features based on the configuration.

    Args:
        _root_: The root configuration node.

    Returns:
        True if categorical features are not defined in the data columns, False otherwise.
    """
    return _root_.data.columns.categorical_features is None


def early_stopping_rounds_from_n_estimators(*, _root_):
    """
    Calculates the number of early stopping rounds based on the number of estimators.

    Args:
        _root_: The root configuration node.

    Returns:
        The maximum of one-tenth of the number of estimators or one.
    """
    return max(_root_.models.n_estimators // 10, 1)


def xgboost_device(*, _root_):
    """
    Determines the device to be used by XGBoost based on the pipeline configuration.

    Args:
        _root_: The root configuration node.

    Returns:
        A string "gpu" if the pipeline device is set to "cuda", otherwise "cpu".
    """
    return "gpu" if _root_.pipeline.device == "cuda" else "cpu"


def lightgbm_device(*, _root_):
    """
    Determines the device to be used by LightGBM based on the pipeline configuration.

    Args:
        _root_: The root configuration node.

    Returns:
        A string "gpu" if the pipeline device is set to "cuda", otherwise "cpu".
    """
    return "gpu" if _root_.pipeline.device == "cuda" else "cpu"


def catboost_device(*, _root_):
    """
    Determines the device to be used by CatBoost based on the pipeline configuration and task type.

    Args:
        _root_: The root configuration node.

    Returns:
        A string "GPU" if the pipeline device is set to "cuda" and the task is not "multilabel",
        otherwise "CPU".
    """
    device = "GPU" if _root_.pipeline.device == "cuda" else "CPU"

    if _root_.pipeline.task == "multilabel":
        device = "CPU"

    return device


def pyboost_lr_optimization_bounds(arg1, arg2, *, _root_):
    """
    Determines the optimization bounds for PyBoost learning rate based on the task type.

    Args:
        arg1: The first bound value.
        arg2: The second bound value.
        _root_: The root configuration node.

    Returns:
        A tuple of bounds. If the task is "regression" or "timeseries", returns a tuple containing
        a tuple of (arg1, arg2). Otherwise, returns a tuple of (arg1, arg2).
    """
    if _root_.pipeline.task in ["regression", "timeseries"]:
        # TODO: why?
        return ((arg1, arg2),)
    else:
        return arg1, arg2


def range_list(*args):
    """
    Creates a list of integers from the provided range arguments.

    Args:
        *args: Arguments defining the start, stop, and step for the range.

    Returns:
        A list of integers generated by the range function with the provided arguments.
    """
    return list(range(*args))


def register_resolvers(replace=False):
    """
    Registers custom resolver functions with OmegaConf.

    Args:
        replace (bool, optional): Whether to replace existing resolvers with the same name. Defaults to False.

    Returns:
        None
    """
    OmegaConf.register_new_resolver("tuple", as_tuple, replace=replace)
    OmegaConf.register_new_resolver(
        "xgboost_enable_categorical", xgboost_enable_categorical, replace=replace
    )
    OmegaConf.register_new_resolver(
        "early_stopping_rounds_from_n_estimators",
        early_stopping_rounds_from_n_estimators,
        replace=replace,
    )
    OmegaConf.register_new_resolver("xgboost_device", xgboost_device, replace=replace)
    OmegaConf.register_new_resolver("lightgbm_device", lightgbm_device, replace=replace)
    OmegaConf.register_new_resolver("catboost_device", catboost_device, replace=replace)
    OmegaConf.register_new_resolver(
        "pyboost_lr_optimization_bounds",
        pyboost_lr_optimization_bounds,
        replace=replace,
    )
    OmegaConf.register_new_resolver("range_list", range_list, replace=replace)