[project]
name = "mesm"
version = "0.1.0"
description = "library for secure, scalable, and efficient access to Google Cloud Secret Manager across multiple environments."
readme = "README.md"
requires-python = ">=3.13,<4"
license = { text = "MIT" }
authors = [
    { name = "Mohammad Khodaparastan", email = "mohammad@khodaparastan.com" },
]
dependencies = [
    "cachetools (>=2.0.0,<6.0)",
    "prometheus-client (>=0.22.1,<0.23.0)",
    "pydantic (>=2.11.5,<3.0.0)",
    "pydantic-settings (>=2.9.1,<3.0.0)",
    "pyyaml (>=6.0.2,<7.0.0)",
    "structlog (>=25.4.0,<26.0.0)",
    "tenacity (>=9.1.2,<10.0.0)",
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.basedpyright]
include = ["src"]
exclude = [
    "exaples/*",
    "**/__pycache__",
]
# ignore = ["src/oldstuff"]
defineConstant = { DEBUG = true }
# stubPath = "src/stubs"
reportMissingImports = "error"
reportMissingTypeStubs = false
reportAny = false
pythonVersion = "3.13"
pythonPlatform = "Darwin"

[tool.black]
line-length = 88
target-version = ["py313"]
include = '\.pyi?$'

# MyPy configuration
[tool.mypy]
strict = true
explicit_package_bases = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
no_implicit_reexport = true
disallow_untyped_defs = true
disallow_untyped_decorators = false
ignore_missing_imports = true
enable_error_code = ["possibly-undefined"]
follow_imports = "normal"
plugins = ["pydantic.mypy"]
python_version = "3.13"
warn_return_any = false
warn_unused_configs = true

[tool.ruff]
preview = true
fix = true
show-fixes = true
src = ["mesm"]
target-version = "py313"
line-length = 88

[tool.ruff.analyze]
direction = "Dependencies"
preview = true

[tool.ruff.lint]
select = [
    "A", # flake8-builtins: Checks for python builtins being used as variables or parameters
    # "B", # flake8-bugbear: Finds likely bugs and design problems in programs
    "C4", # flake8-comprehensions: Helps write better list/set/dict comprehensions
    # "C90", # maccabe: Checks cyclomatic complexity
    "COM", # flake8-commas: Enforces trailing commas in multi-line sequences
    # "D",    # pydocstyle: Checks compliance with Python docstring conventions
    "DTZ", # flake8-datetimez: Ensures proper timezone handling with datetime
    "E", # pycodestyle: Checks for PEP 8 style guide errors
    "ERA", # flake8-eradicate: Finds commented out code
    "EXE", # flake8-executable: Checks executable permissions and shebangs
    # "F",  # pyflakes: Detects various errors by parsing the source file
    # "FBT",  # flake8-boolean-trap: Checks for boolean parameters that might cause confusion
    "FLY", # pyflint: Checks for various issues not covered by other linters
    "FURB", # refurb: Suggests modern Python idioms and refactorings
    # "G",  # flake8-logs-format: Validates logs format strings
    "I", # isort: Sorts imports alphabetically and by type
    "ICN", # flake8-import-conventions: Enforces import naming conventions
    "ISC", # flake8-implicit-str-concat: Checks for implicit string concatenation
    "LOG", # flake8-logs: Checks for logs issues
    # "N",  # pep8-naming: Checks PEP 8 naming conventions
    "PERF", # perflint: Checks for performance antipatterns
    "PIE", # flake8-pie: Misc. linting rules for Python
    "PL", # pylint: Comprehensive Python linter
    "PT", # flake8-pytest-style: Enforces pytest best practices
    # "PTH",  # flake8-use-pathlib: Enforces use of pathlib over os.path
    #  "Q",    # flake8-quotes: Enforces consistent use of quotes
    "RET", # flake8-return: Checks return statement consistency
    "RSE", # flake8-raise: Checks for proper raise statements
    # "RUF",  # ruff: Ruff-specific rules
    "S", # flake8-bandit: Finds common security issues
    "SIM", # flake8-simpify: Suggests code simplifications
    # "SLF",  # flake8-self: Checks for references to self in methods
    "SLOT", # flake8-slots: Checks for proper use of __slots__
    "T100", # flake8-debugger: Checks for debugger imports and calls
    "T10", # flake8-debugger
    "T20", # flake8-print
    # "TRY",  # tryceratops: Checks for antipatterns in exception handling
    "UP", # pyupgrade: Suggests modern Python syntax
    "W", # pycodestyle: Checks for style issues
    "PYI006", # flake8-pyi
    "PYI062", # flake8-pyi
    "PYI063", # flake8-pyi
    "PYI066", # flake8-py
    "YTT", # flake8-2020: Checks for misuse of sys.version or sys.version_info
]
ignore = [
    "A005", # Allow shadowing of stdlib and builtin module names
    "COM812", # Trailing comma conflicts with `ruff format`
    "E501",
    # Documentation rules we're ignoring:
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D205", # 1 blank line required between summary line and description
    "D401", # First line of docstring should be in imperative mood
    "D404", # First word of the docstring should not be "This"
    "D405", # Section name should be properly capitalized
    "S101", # Use of assert detected
    "G004", # Logging statement uses f-string
    "ERA001",
    "ISC001", # Implicit string concatenation conflicts with `ruff format`
    "ISC003", # Explicit string concatenation preferred over implicit
    "A002",
    "N802",
    "PLR09", # Too many statements/branches/etc. (we have our own complexity rules)
    "PLR2004", # Magic numbers in code
    "PLR6301", # Method could be a function (no self used)
    "TRY301",
    "G201",
    "S104",
    "PLW0603",
    "TRY400",
    "TRY401",
    "N811",
    "N801",
    "TRY003", # Long exception messages
    "TRY300", # Consider moving this statement to an `else` block
]
explicit-preview-rules = true
extend-fixable = ["ALL"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-nested-blocks = 15

# Pydocstyle configuration
[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
