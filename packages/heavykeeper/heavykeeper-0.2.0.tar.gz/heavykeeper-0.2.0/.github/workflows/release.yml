name: Build and Publish

on:
  workflow_run:
    workflows: ["Release Please"]
    types: [completed]
  release:
    types: [published]

jobs:
  # Check if this was triggered by a successful release-please run
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Check if we should build
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_run" && "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  test:
    needs: check-release
    if: needs.check-release.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install maturin and pytest (Linux)
      if: runner.os == 'Linux'
      run: pip install maturin[patchelf] pytest
    
    - name: Install maturin and pytest (non-Linux)
      if: runner.os != 'Linux'
      run: pip install maturin pytest
    
    - name: Build wheel
      run: maturin build --release
    
    - name: Install built wheel
      run: pip install --find-links target/wheels heavykeeper
    
    - name: Run tests
      run: python -m pytest test_heavykeeper.py -v

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: check-release
    if: needs.check-release.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        args: --release --out dist --interpreter 3.11 3.12
        sccache: 'true'
        manylinux: auto
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: dist

  build-wheels-cross:
    name: Build wheels (Linux ARM64)
    needs: check-release
    if: needs.check-release.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: aarch64-unknown-linux-gnu
        args: --release --out dist --interpreter 3.11 3.12
        sccache: 'true'
        manylinux: auto
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-linux-aarch64
        path: dist

  build-sdist:
    name: Build source distribution
    needs: check-release
    if: needs.check-release.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build sdist
      uses: PyO3/maturin-action@v1
      with:
        command: sdist
        args: --out dist
    
    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build-wheels, build-wheels-cross, build-sdist]
    if: needs.check-release.outputs.should_build == 'true'
    environment:
      name: pypi
      url: https://pypi.org/p/heavykeeper
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true 