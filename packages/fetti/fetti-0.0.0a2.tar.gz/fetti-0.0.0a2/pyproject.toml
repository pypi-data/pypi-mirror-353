[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fetti"
dynamic = ["version"]
description = 'Lightweight CLI to inject environment variables from TOML.'
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = [
  "cli",
  "automation",
  "command-line",
  "utility",
  "tooling",
]
authors = [
  { name = "Artem Lykhvar", email = "me@a10r.com" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "click==8.2.1",
]

[project.urls]
Documentation = "https://github.com/lykhvar/fetti#readme"
Issues = "https://github.com/lykhvar/fetti/issues"
Source = "https://github.com/lykhvar/fetti"

[project.scripts]
fetti = "fetti.main:cli"

[tool.hatch.version]
path = "src/fetti/__about__.py"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/tests",
]

[tool.hatch.build.targets.wheel]
packages = ["src/fetti"]

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/fetti tests}"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-mock",
  "pytest-cov",
  "pytest-rerunfailures",
  "pytest-xdist",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov --cov-report={env:COVERAGE_REPORT:term-missing} --cov-config=pyproject.toml"
full = "test-cov -n auto --reruns 5 --reruns-delay 3 -r aR {args:tests}"

[[tool.hatch.envs.all.matrix]]
python = ["3.11", "3.12", "3.13"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/fetti tests}"
style = [
  "ruff check {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff check --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.hatch.envs.coverage]
detached = true
dependencies = [
  "coverage[toml]>=6.2",
  "lxml",
]

[tool.hatch.envs.coverage.scripts]
combine = "coverage combine {args}"
report-xml = "coverage xml"
report-uncovered-html = "coverage html --skip-covered --skip-empty"
generate-summary = "python scripts/generate_coverage_summary.py"
write-summary-report = "python scripts/write_coverage_summary_report.py"

[tool.black]
target-version = ["py38"]
line-length = 79
skip-string-normalization = true

[tool.ruff]
target-version = "py311"
line-length = 79

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  "EM101",
  "EM102",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["fetti"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "ARG005"]

[tool.coverage.run]
source_pkgs = ["fetti", "tests"]
branch = true
parallel = true
omit = [
  "src/fetti/__about__.py",
]

[tool.coverage.paths]
fetti = ["src/fetti", "*/fetti/src/fetti"]
tests = ["tests", "*/fetti/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
