# Copyright 2021 IRT Saint ExupÃ©ry, https://www.irt-saintexupery.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 3 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

"""Initial database

Revision ID: 5ec6bc947818
Revises:
Create Date: 2025-05-09 16:45:14.401833

"""

from __future__ import annotations

from typing import TYPE_CHECKING

import sqlalchemy as sa
import sqlmodel
from alembic import op

if TYPE_CHECKING:
    from collections.abc import Sequence

# revision identifiers, used by Alembic.
revision: str = "5ec6bc947818"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("full_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("disabled", sa.Boolean(), nullable=True),
        sa.Column(
            "hashed_password", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "files",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("filename", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "unique_filename", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("sha256sum", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "jobs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "discipline_class_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("discipline_options", sa.JSON(), nullable=True),
        sa.Column(
            "job_type",
            sa.Enum("execute", "execute_and_linearize", name="jobtype"),
            nullable=True,
        ),
        sa.Column(
            "job_status",
            sa.Enum(
                "created", "pending", "running", "failed", "finished", name="jobstatus"
            ),
            nullable=True,
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("workdir", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("traceback", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "linearization_mode",
            sa.Enum(
                "DIRECT",
                "REVERSE",
                "ADJOINT",
                "AUTO",
                "COMPLEX_STEP",
                "FINITE_DIFFERENCES",
                "CENTERED_DIFFERENCES",
                name="linearizationmode",
            ),
            nullable=True,
        ),
        sa.Column("linearize_options", sa.JSON(), nullable=True),
        sa.Column("differentiated_inputs", sa.JSON(), nullable=True),
        sa.Column("differentiated_outputs", sa.JSON(), nullable=True),
        sa.Column("input_data", sa.JSON(), nullable=True),
        sa.Column("output_data", sa.JSON(), nullable=True),
        sa.Column("jacobian_data", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "jobsfiles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("job_id", sa.Integer(), nullable=False),
        sa.Column("file_id", sa.Integer(), nullable=False),
        sa.Column(
            "file_type", sa.Enum("input", "output", name="filetype"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["files.id"],
        ),
        sa.ForeignKeyConstraint(
            ["job_id"],
            ["jobs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("jobsfiles")
    op.drop_table("jobs")
    op.drop_table("files")
    op.drop_table("users")
    # ### end Alembic commands ###
