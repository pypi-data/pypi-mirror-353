# publish.yml

name: "Publish"

on:
  release:
    types: ["published"]

jobs:
  pypi:
    name: "Build and publish release"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv 
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Run UV Sync
        run: |
          uv sync

      - name: Build
        run: uv build

      - name: Publish
        run: uv publish -t ${{ secrets.THE_PYPI_TOKEN }}

  build_docker_amd:
    name: "Build and Publish for AMD"
    runs-on: ubuntu-latest
    needs: pypi

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:master

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and Publish Docker Images
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          cd ..
          # Build for AMD64
          docker buildx create --use --name single-arch-builder
          docker buildx build --platform linux/amd64 \
            -f Upsonic/Dockerfile \
            --push \
            --load \
            -t upsonic/server:$VERSION-amd64 \
            -t upsonic/server:latest-amd64 \
            .
          docker push upsonic/server:$VERSION-amd64
          docker push upsonic/server:latest-amd64

  build_docker_arm:
    name: "Build and Publish for ARM"
    runs-on: ubuntu-24.04-arm
    needs: pypi

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:master

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and Publish Docker Images for ARM
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          cd ..
          # Build for ARM64
          docker buildx create --use --name single-arch-builder
          docker buildx build --platform linux/arm64 \
            -f Upsonic/Dockerfile \
            --push \
            --load \
            -t upsonic/server:$VERSION-arm64 \
            -t upsonic/server:latest-arm64 \
            .
          docker push upsonic/server:$VERSION-arm64
          docker push upsonic/server:latest-arm64

  create_manifest:
    name: "Create Multi-Architecture Manifest"
    needs: [build_docker_amd, build_docker_arm]
    runs-on: ubuntu-latest

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create and Push Manifest
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
          DOCKER_CLI_EXPERIMENTAL: enabled
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          mkdir -p ~/.docker
          
          # Create proper config with auth
          echo "{
            \"experimental\": \"enabled\",
            \"auths\": {
              \"https://index.docker.io/v1/\": {
                \"auth\": \"$(echo -n ${DOCKER_USERNAME}:${DOCKER_PASSWORD} | base64)\"
              }
            }
          }" > ~/.docker/config.json
          
          # Ensure we're logged in via docker login command as well
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          
          # Pull the images first to ensure we have the correct manifests locally
          docker pull upsonic/server:$VERSION-amd64
          docker pull upsonic/server:$VERSION-arm64
          docker pull upsonic/server:latest-amd64
          docker pull upsonic/server:latest-arm64
          
          # Remove existing manifests if they exist
          docker manifest rm upsonic/server:$VERSION || true
          docker manifest rm upsonic/server:latest || true
          
          # Create and push the version manifest
          docker manifest create upsonic/server:$VERSION \
            upsonic/server:$VERSION-amd64 \
            upsonic/server:$VERSION-arm64

          # Create and push the latest manifest
          docker manifest create upsonic/server:latest \
            upsonic/server:latest-amd64 \
            upsonic/server:latest-arm64

          # Annotate the version manifest
          docker manifest annotate upsonic/server:$VERSION \
            upsonic/server:$VERSION-amd64 --arch amd64 --os linux
          docker manifest annotate upsonic/server:$VERSION \
            upsonic/server:$VERSION-arm64 --arch arm64 --os linux

          # Annotate the latest manifest
          docker manifest annotate upsonic/server:latest \
            upsonic/server:latest-amd64 --arch amd64 --os linux
          docker manifest annotate upsonic/server:latest \
            upsonic/server:latest-arm64 --arch arm64 --os linux

          # Inspect before pushing to verify
          docker manifest inspect upsonic/server:$VERSION
          docker manifest inspect upsonic/server:latest

          # Push the manifests with retries
          for manifest in "$VERSION" "latest"; do
            for i in 1 2 3; do
              if docker manifest push --purge upsonic/server:$manifest; then
                echo "Successfully pushed manifest for $manifest"
                break
              fi
              echo "Push attempt $i failed for $manifest, retrying..."
              # Re-login before retry
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
              sleep 5
              if [ $i -eq 3 ]; then
                echo "Failed to push manifest for $manifest after 3 attempts"
                exit 1
              fi
            done
          done
