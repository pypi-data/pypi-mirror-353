# ────────────────────────────────────────────────────────────────
#   pyproject.toml  –  ai-sdlc
# ────────────────────────────────────────────────────────────────

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# ────────────────────────────────────────────────────────────────
[project]
name = "ai-sdlc"
version = "0.6.3"
description = "Markdown-driven SDLC with AI agent chaining."
readme = { file = "README.md", content-type = "text/markdown" }
authors = [{ name = "Parker Rex", email = "me@parkerrex.com" }]
license = "MIT"
requires-python = ">=3.11.0"
keywords = [
    "ai",
    "sdlc",
    "development",
    "workflow",
    "markdown",
    "cli",
    "automation",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Utilities",
]
dependencies = ["tomli >= 1.2.0 ; python_version < '3.11'"]

[project.urls]
Homepage = "https://github.com/ParkerRex/ai-sdlc"
Repository = "https://github.com/ParkerRex/ai-sdlc"
Documentation = "https://github.com/ParkerRex/ai-sdlc#readme"
Changelog = "https://github.com/ParkerRex/ai-sdlc/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/ParkerRex/ai-sdlc/issues"

[project.scripts]
aisdlc = "ai_sdlc.cli:main"

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0",
    "pytest-mock>=3.0",
    "pytest-cov>=4.0",
    "pytest-asyncio>=0.21.0",

    # Code quality
    "ruff>=0.0.292",
    "mypy>=1.0",
    "pyright>=1.1.350",

    # Security
    "bandit>=1.7.0",
    "safety>=2.0.0",

    # Build tools
    "build>=0.10.0",
    "twine>=4.0.0",
]

# ────────────────────────────────────────────────────────────────
#  Packaging tweaks
# ────────────────────────────────────────────────────────────────
[tool.hatch.build.targets.wheel]
packages = ["ai_sdlc"]

[tool.hatch.build.targets.wheel.shared-data]
"ai_sdlc/scaffold_template" = "ai_sdlc/scaffold_template"

# ────────────────────────────────────────────────────────────────
#  Tool Configuration
# ────────────────────────────────────────────────────────────────

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["--strict-markers", "--strict-config", "--verbose"]
markers = [
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]         # Skip assert_used test

# ────────────────────────────────────────────────────────────────
#  uv configuration
# ────────────────────────────────────────────────────────────────
# [tool.uv]
# virtualenvs.in-project = true   # create .venv in repo root
# sync.subprocesses      = true   # allow post-install hooks
