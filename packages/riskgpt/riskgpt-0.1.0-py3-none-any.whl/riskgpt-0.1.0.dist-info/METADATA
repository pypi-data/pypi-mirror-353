Metadata-Version: 2.3
Name: riskgpt
Version: 0.1.0
Summary: Analyze project risks and opportunities using AI
License: MIT
Author: Thomas Wolter
Author-email: thwolter@gmail.com
Requires-Python: >=3.12,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: jinja2 (>=3.1.6,<4.0.0)
Requires-Dist: langchain (>=0.3.25,<0.4.0)
Requires-Dist: langchain-community (>=0.3.24,<0.4.0)
Requires-Dist: langchain-core (>=0.3.64,<0.4.0)
Requires-Dist: langchain-openai (>=0.3.21,<0.4.0)
Requires-Dist: langgraph (>=0.4.8,<0.5.0)
Requires-Dist: mkdocs (>=1.6.1,<2.0.0)
Requires-Dist: mkdocs-material (>=9.6.14,<10.0.0)
Requires-Dist: notebook (>=7.4.3,<8.0.0)
Requires-Dist: openai (>=1.84.0,<2.0.0)
Requires-Dist: pydantic (>=2.11.5,<3.0.0)
Requires-Dist: pydantic-settings (>=2.9.1,<3.0.0)
Description-Content-Type: text/markdown

# RiskGPT

RiskGPT provides utilities for analysing project risks and opportunities using LLM based chains. The package is available on PyPI.

```python
from riskgpt import configure_logging
configure_logging()
```

See the `docs/` directory for detailed documentation. An example Jupyter notebook is available in `notebooks/playground.ipynb` for an interactive playground.

Validation helpers such as `validate_risk_request()` are available in `riskgpt.processors.input_validator` to convert dictionaries into request objects.

## Installation

Install the latest release from PyPI:

```bash
pip install riskgpt
```

For development this project uses [Poetry](https://python-poetry.org/) for dependency management. Install all dependencies including the development tools with:

```bash
poetry install --with dev
```

## Development

Install the pre-commit hooks once:

```bash
pre-commit install
```

The hooks run black, ruff and mypy on each commit. Tests are executed with `pytest` and coverage is measured via `pytest-cov`.

Run the full test suite locally with:

```bash
pytest --cov=riskgpt
```

## Environment Variables

RiskGPT loads configuration from environment variables using a `.env` file at the project root or the regular environment. The following variables are available:

| Variable | Default | Description |
|----------|---------|-------------|
| `OPENAI_API_KEY` | – | API key for the OpenAI service. Required to use the real model; otherwise a dummy model is used. |
| `OPENAI_MODEL_NAME` | `gpt-4.1-mini` | Name of the OpenAI chat model. |
| `MEMORY_TYPE` | `buffer` | Conversation memory backend. Choose `none`, `buffer` or `redis`. |
| `REDIS_URL` | – | Redis connection string. Needed when `MEMORY_TYPE` is set to `redis`. |
| `DEFAULT_PROMPT_VERSION` | `v1` | Version identifier for prompts under `riskgpt/prompts`. |

## License

RiskGPT is distributed under the terms of the MIT license. See the [LICENSE](LICENSE) file for details.

