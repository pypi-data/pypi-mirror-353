[project]
name = "pymetagen"
version = "0.4.0"
description = "Metadata generator using polars as backend."
authors = [
    { name = "Victor Diaz @vadrienzo" },
    { name = "William Arnott @w-arnott" },
]
readme = "README.md"
license = "MIT"
license-files = ["LICEN[CS]E*"]
requires-python = ">=3.9,<4.0"
dependencies = [
    "pyarrow>=15.0.0",
    "pandas>=1.3.5",
    "polars>=1.0.0,<1.28.0",
    "openpyxl>=3.1.4",
    "click>=8.1.7",
    "xlsxwriter>=3.2.0",
]
[dependency-groups]
dev = [
    "pre-commit>=4.0.1",
    "pytest>=8.2.2",
    "tox>=4.15.1",
    "tox-uv>=1.25.0",
    "typing-extensions>=4.12.2",
    "mypy>=1.11.1",
    "coverage>=7.6.0",
    "pytest-cov>=6.0.0",
    "pandas-stubs>=2.2.2.240603",
]

[project.urls]
Homepage = "https://github.com/pypa/pymetagen"
Issues = "https://github.com/pypa/pymetagen/issues"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"


[tool.uv]
package = true
default-groups = ["dev"]

[project.optional-dependencies]
xlsx = ["xlsxwriter"]

[project.scripts]
metagen = 'pymetagen.app:cli'

[tool.black]
line-length = 79
preview = true
skip-string-normalization = false
include = '\.pyi?$'

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
profile = "black"
line_length = 79

[tool.ruff]
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "UP", # pyupgrade
]
target-version = "py39"
line-length = 79
ignore = [
    "E501",
] # Ignore line length errors, since we're using Black/docformatter

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402"]

[tool.docformatter]
black = true
style = "sphinx"

[tool.pytest.ini_options]
addopts = '--strict-markers'
junit_family = 'xunit1'

[tool.mypy]
files = "src/pymetagen"
python_version = "3.11"
check_untyped_defs = true

[[tool.mypy.overrides]]
module = ["pyarrow", "pyarrow.parquet", "pyarrow.compute"]
ignore_missing_imports = true


[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "if .*.debug:",
]

[tool.coverage.run]
branch = true

[tool.tox]
env_list = ["3.9", "3.10", "3.11", "3.12", "type"]

[tool.tox.env_run_base]
description = "Run test under {base_python}"
deps = ["pytest", "pytest-cov"]
package = "wheel"
extras = ["xlsx"]
commands = [
    [
        "pytest",
        "{tty:--color=yes}",
        "{posargs}",
        "--cov",
        "--cov-append",
        "--cov-report=term-missing",
        "--junitxml=test-reports/pytest_{base_python}.xml",
    ],
]

[tool.tox.env.type]
description = "Run type check under {base_python}"
runner = "uv-venv-lock-runner"
allowlist_externals = ["bash"]
commands = [["bash", "./run_mypy.sh"]]
