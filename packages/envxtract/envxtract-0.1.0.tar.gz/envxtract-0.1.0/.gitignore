# Personal files - exclude any files starting with "personel_"
personel_*

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to exclude entire .idea directory.
.idea/

# VS Code
.vscode/settings.json
.vscode/launch.json
.vscode/extensions.json
.vscode/tasks.json
# Keep .vscode/settings.json if it contains project-specific settings
# .vscode/

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# Docker
.dockerignore
docker-compose.override.yml
.docker/

# Data Science and Analysis files
*.csv
*.tsv
*.xlsx
*.xls
*.parquet
*.feather
*.h5
*.hdf5
*.hdf
*.nc
*.nc4
*.tif
*.tiff
*.geotiff
*.shp
*.shx
*.dbf
*.prj
*.cpg
*.qpj
*.gpkg
*.kml
*.kmz
*.json.gz
*.pkl
*.pickle
*.joblib

# Large data directories
data/
datasets/
raw_data/
processed_data/
output/
results/
figures/
plots/
exports/

# Temporary files
tmp/
temp/
.tmp/
.temp/

# Log files
*.log
logs/
.logs/

# Cache directories
.cache/
__pycache__/
.pytest_cache/
.mypy_cache/
.ruff_cache/
.uv-cache/

# Environment and configuration files with sensitive data
.env.local
.env.*.local
config.ini
secrets.json
credentials.json
*.key
*.pem
*.crt
*.p12
*.pfx

# IDE and editor files
*.swp
*.swo
*~
.vim/
.netrwhist

# Backup files
*.bak
*.backup
*.old
*.orig

# Archive files (unless specifically needed)
*.zip
*.tar
*.tar.gz
*.tar.bz2
*.tar.xz
*.rar
*.7z

# System files
.Spotlight-V100
.Trashes
.fseventsd
.DS_Store
.directory

# Node.js (if using any JS tools)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# R (if using R in analysis)
.Rhistory
.RData
.Rproj.user

# MATLAB
*.asv
*.mex*

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# Virtual environment activation scripts
activate
activate.bat
activate.ps1
deactivate

# uv specific files
uv.lock

# Build artifacts
*.whl
*.egg-info/
build/
dist/

# Documentation build
docs/_build/
docs/build/

# Profiling data
*.prof
*.profile

# Memory dumps
*.dump
*.dmp

# Core dumps
core
core.*

# Lock files (uncomment if you want to ignore them)
# Pipfile.lock
# poetry.lock
# package-lock.json
# yarn.lock