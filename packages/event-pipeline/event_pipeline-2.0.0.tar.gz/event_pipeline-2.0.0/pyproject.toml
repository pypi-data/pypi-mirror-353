[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"
[project]
name = "event_pipeline"
version = "2.0.0"
requires-python = ">=3.8"
authors = [
    {name = "nshaibu", email = "nafiushaibu1@gmail.com"},
]
description="Simple tool for writing events and pipelines in python"
keywords=["pipeline","events","concurrency","data","pointy", "pointy lang", "event-pipeline", "redis"]
readme = "README.md"
license = { file = "LICENSE" }
dependencies = [
    "ply==3.11",
    "six==1.17.0",
    "treelib==1.7.0",
    "graphviz==0.20.3",
    "more-itertools<=10.6.0",
    "pydantic_mini==1.0.4",
    "apscheduler<=3.11.0",
    "typing-extensions==4.12.2"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
[project.urls]
"Issue Tracker"="https://github.com/nshaibu/event_pipeline/issues"
CI="https://github.com/nshaibu/event_pipeline/actions"
[project.optional-dependencies]
dev = [
    "coverage>=7.4.1",
    "iniconfig==2.0.0",
    "packaging==24.2",
    "pluggy==1.5.0",
    "pytest==8.3.4",
    "pyflakes==3.2.0",
    "mccabe==0.7.0",
    "flake8==7.1.1",
    "pycodestyle==2.12.1",
    "flake8-black==0.3.6",
    "black>=22.1.0",
    "click==8.1.8",
    "mypy-extensions==1.0.0",
    "pathspec==0.12.1",
    "platformdirs==4.3.6",
    "redis==5.2.1"
]
metrics = [
    "elasticsearch>=8.0.0",
    "prometheus-client>=0.20.0",
    "requests>=2.31.0"
]
[tool.setuptools]
packages = [
    "event_pipeline",
    "event_pipeline.translator",
    "event_pipeline.protos",
    "event_pipeline.parser",
    "event_pipeline.executors",
    "event_pipeline.manager",
    "event_pipeline.mixins",
    "event_pipeline.mixins.utils",
    "event_pipeline.signal",
    "event_pipeline.backends",
    "event_pipeline.backends.stores",
    "event_pipeline.backends.connectors",
    "event_pipeline.telemetry"
]

[tool.coverage.run]
branch = true
concurrency=["multiprocessing"]
source=["event_pipeline"]
omit = [
    "event_pipeline/parser/*",
    "tests/*",
    "event_pipeline/scripts/*",
    "event_piipeline/protos/*"
]
data_file=".coverage"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]
ignore_errors = true
skip_empty = true
skip_covered = true

[tool.coverage.html]
directory = "coverage_html_report"

[tool.black]
exclude = "protos"