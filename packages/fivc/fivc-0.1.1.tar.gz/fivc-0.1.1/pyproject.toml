[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fivc"
dynamic = ["version"]
description = "FIVC - Five Component Framework: 轻量级Python组件管理框架"
readme = "README.md"
requires-python = ">=3.8.1"
license = { text = "MIT" }
keywords = ["component", "framework", "dependency-injection", "ioc", "configuration"]
authors = [
  { name = "Charlie ZHANG", email = "sunnypig2002@gmail.com" },
]
maintainers = [
  { name = "Charlie ZHANG", email = "sunnypig2002@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
  "PyYAML>=6.0.1",
]

[project.optional-dependencies]
# 开发依赖
dev = [
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
  "mypy>=1.0.0",
  "black>=23.0.0",
  "isort>=5.12.0",
  "ruff>=0.0.243",
  "pre-commit>=3.0.0",
]
# 测试依赖
test = [
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
  "pytest-asyncio>=0.21.0",
]
# 文档依赖
docs = [
  "mkdocs>=1.5.0",
  "mkdocs-material>=9.0.0",
  "mkdocstrings[python]>=0.22.0",
]
# 扩展功能依赖
extra = [
  "fastapi>=0.100.0",
  "SQLAlchemy>=2.0.0",
  "sqlmodel>=0.0.21",
  "redis>=4.5.0",
]
# 完整依赖（包含所有可选依赖）
all = [
  "fivc[dev,test,docs,extra]",
]

[project.urls]
Homepage = "https://github.com/5C-Plus/fivc"
Documentation = "https://github.com/5C-Plus/fivc#readme"
Repository = "https://github.com/5C-Plus/fivc.git"
Issues = "https://github.com/5C-Plus/fivc/issues"
Changelog = "https://github.com/5C-Plus/fivc/blob/main/CHANGELOG.md"

[project.scripts]
fivc = "fivc.cli:main"

# Hatch版本配置
[tool.hatch.version]
path = "src/fivc/__about__.py"

[tool.hatch.build.targets.sdist]
include = [
  "/src",
  "/tests",
  "/fixtures",
  "/scripts",
  "README.md",
  "LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/fivc"]

# 环境配置
[tool.hatch.envs.default]
dependencies = [
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=fivc --cov-report=term-missing --cov-report=html {args:tests}"
cov-report = "coverage report"
cov-html = "coverage html"

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.0.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
  "isort>=5.12.0",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/fivc tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
  "isort --check-only --diff {args:.}",
]
fmt = [
  "isort {args:.}",
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

# 测试配置
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
  "--cov=fivc",
  "--cov-report=term-missing",
  "--cov-fail-under=75",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]

# 覆盖率配置
[tool.coverage.run]
source_pkgs = ["fivc", "tests"]
branch = true
parallel = true
omit = [
  "src/fivc/__about__.py",
  "src/fivc/cli.py",
]

[tool.coverage.paths]
fivc = ["src/fivc", "*/fivc/src/fivc"]
tests = ["tests", "*/fivc/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if False:",
]

# MyPy配置
[tool.mypy]
python_version = "3.8"
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Black配置
[tool.black]
target-version = ["py38"]
line-length = 88
skip-string-normalization = true
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort配置
[tool.isort]
profile = "black"
known_first_party = ["fivc"]
force_sort_within_sections = true
combine_as_imports = true

# Ruff配置
[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["fivc"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

# UV工具配置
[tool.uv]
dev-dependencies = [
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
  "mypy>=1.0.0",
  "black>=23.0.0",
  "isort>=5.12.0",
  "ruff>=0.0.243",
  "pre-commit>=3.0.0",
]
index-url = "https://pypi.org/simple"
extra-index-url = []

[tool.uv.sources]
# 如果需要从特定源安装包，可以在这里配置
