[tool.poetry]
name = "span-panel-api"
version = "0.1.0"
description = "A client library for SPAN Panel API"
authors = ["SpanPanel"]
readme = "README.md"
packages = [
    {include = "span_panel_api", from = "src"},
]

[tool.poetry.urls]
Homepage = "https://github.com/SpanPanel/span-panel-api"
Issues = "https://github.com/SpanPanel/span-panel-api/issues"

[tool.poetry.dependencies]
python = "^3.9"
httpx = ">=0.20.0,<0.29.0"
attrs = ">=22.2.0"
python-dateutil = "^2.8.0"
click = "^8.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^6.0.0"
bandit = "^1.8.0"
twine = "^5.0.0"
pre-commit = "^4.0.0"
ruff = "^0.11.0"
mypy = "^1.15.0"

[tool.poetry.group.generate.dependencies]
openapi-python-client = "^0.24.0"
pyyaml = "^6.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
exclude = [
    "src/span_panel_api/generated_client/",
    ".*_cache/",
    "dist/",
    "venv/",
    ".venv/",
]

[tool.ruff.lint]
select = ["F", "I", "UP"]

[tool.mypy]
exclude = [
    "src/span_panel_api/generated_client/",
    "tests/",
    "docs/",
    ".*_cache/",
    "dist/",
    "venv/",
    ".venv/",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "span_panel_api.generated_client.*"
follow_imports = "skip"
ignore_errors = true

[tool.coverage.run]
source = ["src/span_panel_api"]
omit = [
    "src/span_panel_api/generated_client/*",
    "tests/*",
    "*/tests/*",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
# Exclude defensive/error handling code from coverage that's not core functionality:
# - Import error handling (hard to test, defensive)
# - Generic exception wrappers (defensive code)
# - HTTP status error branches for edge cases (500/502/503/504 errors)
# - Network timeout/retry logic (defensive)
# - Pass statements in exception cleanup
exclude_lines = [
    # Standard exclusions
    "pragma: no cover",
    "# pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    # Import error handling - defensive code
    "except ImportError as e:",
    "raise ImportError\\(",
    # Defensive exception handling for edge cases
    "except Exception:",  # Generic exception handlers
    "except Exception as e:",
    "# Ignore errors during cleanup",
    "pass",  # Exception cleanup pass statements
    # HTTP status error branches that are hard to test
    "elif e\\.status_code in SERVER_ERROR_CODES:",
    "elif e\\.response\\.status_code in SERVER_ERROR_CODES:",
    "elif e\\.status_code in RETRIABLE_ERROR_CODES:",
    "elif e\\.response\\.status_code in RETRIABLE_ERROR_CODES:",
    # Note: HTTPStatusError, TimeoutException, ConnectError are tested as they represent real scenarios
    # Generic API error wrapping
    "raise SpanPanelAPIError\\(f\"Unexpected error:",
    "raise SpanPanelAPIError\\(f\"API error:",
    # Retry logic error handling
    "# Last attempt - re-raise",
    "# Not retriable or last attempt - re-raise",
    "raise$",  # Bare raise statements (re-raising exceptions)
    "continue$",  # Continue statements in retry loops
    # Additional timeout/connection patterns
    "await asyncio\\.sleep\\(delay\\)",
    # Keep HTTPStatusError, ConnectError, TimeoutException testing - these are real scenarios
    # More specific patterns for defensive code
    "if attempt < max_attempts - 1:",
    "# Network/timeout errors are always retriable",
]

[tool.bandit]
# Security linter configuration
exclude_dirs = ["tests", "src/span_panel_api/generated_client"]
