import { List } from '../extensions';
import { BaseProblem, Level, Method, Module, Name, Node } from '../model';
import { TypeVariable } from './typeVariables';
export declare const ANY = "Any";
export declare const VOID = "Void";
export declare const ELEMENT = "Element";
export declare const RETURN = "RETURN";
export declare const PARAM = "PARAM";
export declare const INSTANCE = "INSTANCE";
export declare class TypeSystemProblem implements BaseProblem {
    code: Name;
    values: List<string>;
    constructor(code: Name, values?: List<string>);
    get level(): Level;
    get sourceMap(): undefined;
}
export type WollokType = WollokAtomicType | WollokModuleType | WollokUnionType | WollokParameterType;
export type AtomicType = typeof ANY | typeof VOID;
export declare class WollokAtomicType {
    id: AtomicType;
    constructor(id: AtomicType);
    lookupMethod(_name: Name, _arity: number, _options?: {
        lookupStartFQN?: Name;
        allowAbstractMethods?: boolean;
    }): Method;
    atParam(_name: string): TypeVariable;
    instanceFor(_instance: TypeVariable, _send?: TypeVariable, _name?: string): TypeVariable | null;
    contains(type: WollokType): boolean;
    asList(): WollokType[];
    isSubtypeOf(_type: WollokType): boolean;
    get name(): string;
    get kind(): string;
    get isComplete(): boolean;
}
export declare class WollokModuleType {
    module: Module;
    constructor(module: Module);
    lookupMethod(name: Name, arity: number, options?: {
        lookupStartFQN?: Name;
        allowAbstractMethods?: boolean;
    }): Method | undefined;
    contains(type: WollokType): boolean;
    atParam(_name: string): TypeVariable;
    instanceFor(_instance: TypeVariable, _send?: TypeVariable): TypeVariable | null;
    asList(): WollokType[];
    isSubtypeOf(type: WollokType): boolean;
    get name(): string;
    get kind(): string;
    get isComplete(): boolean;
    toString(): string;
}
export declare class WollokParametricType extends WollokModuleType {
    params: Map<string, TypeVariable>;
    constructor(base: Module, params?: Record<string, TypeVariable>);
    contains(type: WollokType): boolean;
    atParam(name: string): TypeVariable;
    instanceFor(instance: TypeVariable, send?: TypeVariable, name?: string): TypeVariable | null;
    addMinType(minType: WollokParametricType): void;
    addMaxType(minType: WollokParametricType): void;
    get name(): string;
    get kind(): string;
    get isComplete(): boolean;
    sameParams(type: WollokParametricType): boolean;
}
export declare class WollokMethodType extends WollokParametricType {
    constructor(returnVar: TypeVariable, params: TypeVariable[], extra?: Record<string, TypeVariable>, base?: Module);
    get name(): string;
}
export declare class WollokClosureType extends WollokMethodType {
    constructor(returnVar: TypeVariable, params: TypeVariable[], closure: Module);
    get name(): string;
}
export declare class WollokParameterType {
    id: Name;
    constructor(id: Name);
    instanceFor(instance: TypeVariable, send?: TypeVariable): TypeVariable | null;
    lookupMethod(_name: Name, _arity: number, _options?: {
        lookupStartFQN?: Name;
        allowAbstractMethods?: boolean;
    }): Method;
    atParam(_name: string): TypeVariable;
    contains(type: WollokType): boolean;
    asList(): WollokType[];
    isSubtypeOf(_type: WollokType): boolean;
    get name(): string;
    get kind(): string;
    get isComplete(): boolean;
}
export declare class WollokUnionType {
    types: WollokType[];
    constructor(types: WollokType[]);
    lookupMethod(_name: Name, _arity: number, _options?: {
        lookupStartFQN?: Name;
        allowAbstractMethods?: boolean;
    }): Method;
    atParam(_name: string): TypeVariable;
    instanceFor(_instance: TypeVariable): TypeVariable | null;
    contains(type: WollokType): boolean;
    asList(): WollokType[];
    isSubtypeOf(type: WollokType): boolean;
    get simplifiedTypes(): WollokType[];
    get name(): string;
    get kind(): string;
    printBy(property: (type: WollokType) => string): string;
    get isComplete(): boolean;
}
export declare class TypeRegistry {
    private tVars;
    constructor(tVars: Map<Node, TypeVariable>);
    getType(node: Node): WollokType;
}
