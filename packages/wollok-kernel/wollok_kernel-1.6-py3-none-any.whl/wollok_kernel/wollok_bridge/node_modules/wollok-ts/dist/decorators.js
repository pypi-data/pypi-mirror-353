"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPotentiallyUninitializedLazy = exports.lazy = exports.UninitializedLazyFieldError = exports.cached = exports.getCache = void 0;
const extensions_1 = require("./extensions");
const { defineProperty } = Object;
const CACHE = Symbol('cache');
function getCache(target) {
    if (!target[CACHE])
        defineProperty(target, CACHE, { value: new Map() });
    return target[CACHE];
}
exports.getCache = getCache;
function cached(_target, propertyKey, descriptor) {
    const handler = typeof descriptor.value === 'function' ? { get() { return descriptor.value; }, set(value) { descriptor.value = value; } } :
        typeof descriptor.get === 'function' ? { get() { return descriptor.get; }, set(value) { descriptor.get = value; } } :
            (0, extensions_1.raise)(new TypeError(`Can't cache ${propertyKey}: Only methods and properties can be cached`));
    const originalDefinition = handler.get();
    handler.set(function (...args) {
        const cache = getCache(this);
        const key = `${propertyKey}(${args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : arg)})`;
        if (cache.has(key))
            return cache.get(key);
        const result = originalDefinition.apply(this, args);
        cache.set(key, result);
        return result;
    });
}
exports.cached = cached;
class UninitializedLazyFieldError extends Error {
    constructor(key) {
        super(`Tried to access uninitialized lazy property ${key}`);
        this.key = key;
    }
}
exports.UninitializedLazyFieldError = UninitializedLazyFieldError;
function lazy(target, key) {
    defineProperty(target, key, {
        configurable: true,
        set(value) { return defineProperty(this, key, { value, configurable: false }); },
        get() { throw new UninitializedLazyFieldError(key); },
    });
}
exports.lazy = lazy;
function getPotentiallyUninitializedLazy(target, lazyField) {
    try {
        return target[lazyField];
    }
    catch (error) {
        if (error instanceof UninitializedLazyFieldError)
            return undefined;
        else
            throw error;
    }
}
exports.getPotentiallyUninitializedLazy = getPotentiallyUninitializedLazy;
//# sourceMappingURL=decorators.js.map