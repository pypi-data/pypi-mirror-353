# Generated by Django 3.2.14 on 2024-02-26 14:37

from django.db import migrations

exts_3d = ".pcd"
exts_audio = ".wav,.aiff,.mp3,.au,.flac,.m4a,.ogg,.m4b"
exts_image = ".jpg,.png,.gif,.bmp,.svg,.webp"
exts_video = ".mp4,.h264,.webm,.webm*"
exts_pdf = ".pdf"

extensions = {
    # 3D model
    "3D Semantic Segmentation": exts_3d + ",.json,.tsv,.csv,.txt",
    # Audio/Speech Processing
    "Automatic Speech Recognition": exts_audio + ",.json,.tsv,.csv,.txt",
    "Automatic Speech Recognition using Segments": exts_audio + ",.json,.tsv,.csv,.txt",
    "Automatic Speech Recognition using Segments MMS": exts_audio + ",.json,.tsv,.csv,.txt",
    "Intent Classification": exts_audio + ",.json,.tsv,.csv,.txt",
    "Seamless M4T": exts_image + ",.json,.tsv,.csv,.txt",
    "Signal Quality Detection": exts_audio + ",.json,.tsv,.csv,.txt",
    "Sound Event Detection": exts_audio + ",.json,.tsv,.csv,.txt",
    "Speaker Segmentation": exts_audio + ",.json,.tsv,.csv,.txt",
    "Text speech": exts_image + ",.json,.tsv,.csv,.txt",
    # Computer vision
    "Dino V2": exts_image + ",.json,.tsv,.csv,.txt",
    "Image Captioning": exts_image + ",.json,.tsv,.csv,.txt",
    "Image Classification": exts_image + ",.json,.tsv,.csv,.txt",
    "Inventory Tracking": exts_image + ",.json,.tsv,.csv,.txt",
    "Keypoint Segmentation": exts_image + ",.json,.tsv,.csv,.txt",
    "Multi-page document annotation": exts_image + ",.json,.tsv,.csv,.txt",
    "Object Detection with Bounding Boxes": exts_image + ",.json,.tsv,.csv,.txt",
    "Optical Character Recognition": exts_image + ",.json,.tsv,.csv,.txt",
    "Semantic Segmentation with Masks": exts_image + ",.json,.tsv,.csv,.txt",
    "Semantic Segmentation with Polygons": exts_image + ",.json,.tsv,.csv,.txt",
    "Visual Genome": exts_image + ",.json,.tsv,.csv,.txt",
    "Visual Question Answering": exts_image + ",.json,.tsv,.csv,.txt",
    # Conversational AI
    "Coreference Resolution & Entity Linking": ".json,.tsv,.csv,.txt",
    "Intent Classification and Slot Filling": ".json,.tsv,.csv,.txt",
    "Response Generation": ".json,.tsv,.csv,.txt",
    "Response Selection": ".json,.tsv,.csv,.txt",
    # Generative AI
    "Chatbot Model Assessment": ".json,.tsv,.csv,.txt",
    "Human Preference collection for RLHF": ".json,.tsv,.csv,.txt",
    "LLM Ranker": ".json,.tsv,.csv,.txt",
    "Supervised Language Model Fine-tuning": ".json,.tsv,.csv,.txt",
    "Visual Ranker": ".json,.tsv,.csv,.txt",
    # Huggingface Computer Vision
    "Huggingface Image Classification": exts_image + ",.json,.tsv,.csv,.txt",
    "Huggingface Object Detection": exts_image + ",.json,.tsv,.csv,.txt",
    # Huggingface NLP
    "Huggingface Question Answering": ".json,.tsv,.csv,.txt",
    "Huggingface Text Classification": ".json,.tsv,.csv,.txt",
    "Huggingface Text Summarization": ".json,.tsv,.csv,.txt",
    "Huggingface Translation": ".json,.tsv,.csv,.txt",
    # Large language model
    "Falcon 7B": exts_image + ",.json,.tsv,.csv,.txt",
    "Flan T5": exts_image + ",.json,.tsv,.csv,.txt",
    "Llama Meta 2": exts_image + ",.json,.tsv,.csv,.txt",
    # Natural language processing
    "Machine Translation": ".json,.tsv,.csv,.txt",
    "Named Entity Recognition": ".json,.tsv,.csv,.txt",
    "Question Answering": ".json,.tsv,.csv,.txt",
    "Relation Extraction": ".json,.tsv,.csv,.txt",
    "Taxonomy": ".json,.tsv,.csv,.txt",
    "Text Classification": ".json,.tsv,.csv,.txt",
    "Text Summarization": ".json,.tsv,.csv,.txt",
    # Ranking & Scoring
    "ASR Hypotheses Selection": exts_audio + ",.json,.tsv,.csv,.txt",
    "Content-based Image Retrieval": exts_image + ",.json,.tsv,.csv,.txt",
    "Document Retrieval": ".json,.tsv,.csv,.txt",
    "Pairwise classification": ".json,.tsv,.csv,.txt",
    "Pairwise regression": exts_image + ",.json,.tsv,.csv,.txt",
    "Search Page Ranking": ".json,.tsv,.csv,.txt",
    "Text-to-Image Generation": ".json,.tsv,.csv,.txt",
    # Structured data parsing
    "Freeform Metadata": ".json,.tsv,.csv,.txt",
    "HTML Entity Recognition": ".json,.tsv,.csv,.txt",
    "PDF Classification": exts_pdf + ",.json,.tsv,.csv,.txt",
    "Tabular Data": ".json,.tsv,.csv,.txt",
    # Time series analysis
    "Activity Recognition": ".json,.tsv,.csv,.txt",
    "Change Point Detection": ".json,.tsv,.csv,.txt",
    "Outliers & Anomaly Detection": ".json,.tsv,.csv,.txt",
    "Signal Quality": ".json,.tsv,.csv,.txt",
    "Time Series Forecasting": ".json,.tsv,.csv,.txt",
    # Video
    "Video Classification": exts_video + ",.json,.tsv,.csv,.txt",
    "Video Object Tracking": exts_video + ",.json,.tsv,.csv,.txt",
    "Video Timeline Segmentation": exts_video + ",.json,.tsv,.csv,.txt",
    "Automatic License Plate Recognition": exts_image + ",.json,.tsv,.csv,.txt",
}


def update_templates_extensions(apps, schema_editor):
    AnnotationTemplate = apps.get_model("annotation_template", "AnnotationTemplate")
    db_alias = schema_editor.connection.alias
    templates = AnnotationTemplate.objects.using(db_alias).all()

    for template in templates:
        if template.name in extensions:
            template.extensions = extensions[template.name]
        else:
            template.extensions = ".json,.tsv,.csv,.txt"

        template.save()


class Migration(migrations.Migration):
    dependencies = [
        ('annotation_template', '0006_auto_20240416_9122'),
    ]

    operations = [
        migrations.RunPython(update_templates_extensions),
    ]
