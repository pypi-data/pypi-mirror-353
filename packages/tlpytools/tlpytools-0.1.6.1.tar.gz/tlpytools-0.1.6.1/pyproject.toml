[build-system]
requires = [
    "setuptools>=61,<76.1.0",
    "wheel"
]
build-backend = "setuptools.build_meta"

[project]
name = "tlpytools"
version = "0.1.6.1"
description = "A set of tools for building models at the TransLink Forecasting Team"
readme = "README.md"
requires-python = ">=3.6"
# license = { file = "LICENSE.txt" }
authors = [
  { name = "Forecasting TransLink", email = "forecasting@translink.ca" }
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    # You might want to add more specific Python versions supported, e.g.:
    # "Programming Language :: Python :: 3.6",
    # "Programming Language :: Python :: 3.7",
    # "Programming Language :: Python :: 3.8",
    # "Programming Language :: Python :: 3.9",
    # "Programming Language :: Python :: 3.10",
    # "Programming Language :: Python :: 3.11",
]

# Runtime dependencies: these are installed when a user `pip install tlpytools`
# and also when a developer runs `pip install -e .`
dependencies = [
    "pandas>=1.1",
    "numpy>=1.18",
    "sqlalchemy>=1.4",
    "pyodbc>=4.0",
    "pyyaml>=5.4",
    "openmatrix>=0.3",
    "azure-core>=1.34",
    "azure-identity>=1.23",
    "azure-storage-blob>=12.24",
    "azure-storage-file-datalake>=12.18",
    "cryptography>=3.4.7",
    "cryptpandas>=0.1.1"
]

[project.urls]
"Homepage" = "https://github.com/TransLinkForecasting/tlpytools"
"Bug Tracker" = "https://github.com/TransLinkForecasting/tlpytools/issues"
# You could also add "Repository" = "https://github.com/TransLinkForecasting/tlpytools"

# Optional dependencies
[project.optional-dependencies]
dev = [
    # Add development-specific tools here, e.g.:
    # "pytest>=7.0",
    # "black",
    # "ruff",
    # "mypy",
    # "twine", # for publishing
    # "build", # for building
]
# You can add other groups like 'test' or 'docs' if needed
# test = [
#     "pytest>=7.0",
# ]

# --- Setuptools specific configuration ---
# This section configures setuptools for aspects not covered by PEP 621 [project] table.
# It replaces the [options] and [options.packages.find] sections from setup.cfg.
[tool.setuptools.packages.find]
where = ["src"]  # Tells setuptools to look for packages in the 'src' directory.
                 # This assumes your package 'tlpytools' is located at 'src/tlpytools'.
namespaces = false # Set to true if you are using PEP 420 namespace packages.
                   # For regular packages (with __init__.py), false is appropriate.

# If you had [options.entry_points] in setup.cfg, they would go here:
# [project.scripts]
# command-name = "your_package.module:function"

# [project.gui-scripts]
# gui-command-name = "your_package.module:function"

# [project.entry-points."your.entrypoint.group"]
# name = "your_package.module:object"
