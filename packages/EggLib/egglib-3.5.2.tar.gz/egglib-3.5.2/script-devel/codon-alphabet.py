"""
Generates the file Alphabet.epp
"""

import egglib, datetime, re

expl, miss = egglib.alphabets.DNA.alleles()

print '// code generated by {0} on {1}'.format(__file__, datetime.datetime.today().strftime('%Y-%m-%d'))

print """
/*
    Copyright 2018 Stephane De Mita, Mathieu Siol

    This file is part of the EggLib library.

    EggLib is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EggLib is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EggLib.  If not, see <http://www.gnu.org/licenses/>.
*/
"""

# list of exploitable alleles
c = 0
for b1 in expl:
    for b2 in expl:
        for b3 in expl:
            codon = b1+b2+b3
            print 'strcpy(_exploitable[{0:>2}], "{1}");'.format(c, codon)
            c += 1

# list of missing alleles
c = 0
for b1 in expl+miss:
    for b2 in expl+miss:
        for b3 in expl+miss:
            if b1 in expl and b2 in expl and b3 in expl: continue
            codon = b1+b2+b3
            if codon[:2] == '??' and codon[2] != '?':
                codon = '?\?' + codon[2]
            print 'strcpy(_missing[{0:>4}], "{1}");'.format(c, codon)
            c += 1

# table of codon codes
cnt1 = 0
cnt2 = -1
for b1 in expl+miss:
    c1 = egglib.alphabets.DNA.get_code(b1)
    for b2 in expl+miss:
        c2 = egglib.alphabets.DNA.get_code(b2)
        for b3 in expl+miss:
            c3 = egglib.alphabets.DNA.get_code(b3)
            missing = c1<0 or c2<0 or c3<0
            i = 3-c1 if c1<0 else c1
            j = 3-c2 if c2<0 else c2
            k = 3-c3 if c3<0 else c3
            if missing:
                code = cnt2
                cnt2 -= 1
            else:
                code = cnt1
                cnt1 += 1
            print '_codon_table[{0:>2}][{1:>2}][{2:>2}] = {3:>5};'.format(i, j, k, code)
