# coding: utf-8

"""
    MCPCat API

    API for MCPCat application

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PublishEventRequest(BaseModel):
    """
    PublishEventRequest
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID of the event, typically auto-generated by the MCPCat Agent")
    project_id: Optional[StrictStr] = Field(default=None, description="ID of the project this event belongs to")
    session_id: StrictStr = Field(description="ID of the session this event belongs to")
    actor_id: Optional[StrictStr] = Field(default=None, description="Optional actor ID")
    event_id: Optional[StrictStr] = Field(default=None, description="Optional custom event ID (must be unique)")
    event_type: Optional[StrictStr] = Field(default=None, description="Type of event (e.g., mcp:tools/call, mcpcat:identify)")
    is_error: Optional[StrictBool] = Field(default=None, description="Whether this event represents an error")
    error: Optional[Dict[str, Any]] = Field(default=None, description="Error details if is_error is true")
    resource_name: Optional[StrictStr] = Field(default=None, description="Name of the resource accessed (for resource events)")
    duration: Optional[StrictInt] = Field(default=None, description="Duration of the operation in milliseconds")
    timestamp: Optional[datetime] = Field(default=None, description="Agent-provided timestamp of when the event occurred")
    user_intent: Optional[StrictStr] = Field(default=None, description="Captured explanation of why the actor made this request")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="Parameters sent with the request")
    response: Optional[Dict[str, Any]] = Field(default=None, description="Response data from the operation")
    identify_actor_given_id: Optional[StrictStr] = Field(default=None, description="Actor ID for mcpcat:identify events")
    identify_actor_name: Optional[StrictStr] = Field(default=None, description="Actor name for mcpcat:identify events")
    identify_data: Optional[Dict[str, Any]] = Field(default=None, description="Additional data for mcpcat:identify events")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP address of the client")
    sdk_language: Optional[StrictStr] = Field(default=None, description="Programming language of the SDK used")
    mcpcat_version: Optional[StrictStr] = Field(default=None, description="Version of MCPCat being used")
    server_name: Optional[StrictStr] = Field(default=None, description="Name of the MCP server")
    server_version: Optional[StrictStr] = Field(default=None, description="Version of the MCP server")
    client_name: Optional[StrictStr] = Field(default=None, description="Name of the MCP client")
    client_version: Optional[StrictStr] = Field(default=None, description="Version of the MCP client")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "project_id", "session_id", "actor_id", "event_id", "event_type", "is_error", "error", "resource_name", "duration", "timestamp", "user_intent", "parameters", "response", "identify_actor_given_id", "identify_actor_name", "identify_data", "ip_address", "sdk_language", "mcpcat_version", "server_name", "server_version", "client_name", "client_version"]

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['mcp:ping', 'mcp:initialize', 'mcp:completion/complete', 'mcp:logging/setLevel', 'mcp:prompts/get', 'mcp:prompts/list', 'mcp:resources/list', 'mcp:resources/templates/list', 'mcp:resources/read', 'mcp:resources/subscribe', 'mcp:resources/unsubscribe', 'mcp:tools/call', 'mcp:tools/list', 'mcpcat:identify']):
            raise ValueError("must be one of enum values ('mcp:ping', 'mcp:initialize', 'mcp:completion/complete', 'mcp:logging/setLevel', 'mcp:prompts/get', 'mcp:prompts/list', 'mcp:resources/list', 'mcp:resources/templates/list', 'mcp:resources/read', 'mcp:resources/subscribe', 'mcp:resources/unsubscribe', 'mcp:tools/call', 'mcp:tools/list', 'mcpcat:identify')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublishEventRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublishEventRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "project_id": obj.get("project_id"),
            "session_id": obj.get("session_id"),
            "actor_id": obj.get("actor_id"),
            "event_id": obj.get("event_id"),
            "event_type": obj.get("event_type"),
            "is_error": obj.get("is_error"),
            "error": obj.get("error"),
            "resource_name": obj.get("resource_name"),
            "duration": obj.get("duration"),
            "timestamp": obj.get("timestamp"),
            "user_intent": obj.get("user_intent"),
            "parameters": obj.get("parameters"),
            "response": obj.get("response"),
            "identify_actor_given_id": obj.get("identify_actor_given_id"),
            "identify_actor_name": obj.get("identify_actor_name"),
            "identify_data": obj.get("identify_data"),
            "ip_address": obj.get("ip_address"),
            "sdk_language": obj.get("sdk_language"),
            "mcpcat_version": obj.get("mcpcat_version"),
            "server_name": obj.get("server_name"),
            "server_version": obj.get("server_version"),
            "client_name": obj.get("client_name"),
            "client_version": obj.get("client_version")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


