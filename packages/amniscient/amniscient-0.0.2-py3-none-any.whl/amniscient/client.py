# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
from . import core
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.request_options import RequestOptions
from .environment import AmniscientApiEnvironment
from .raw_client import AsyncRawAmniscientApi, RawAmniscientApi
from .types.detect_response import DetectResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AmniscientApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : AmniscientApiEnvironment
        The environment to use for requests from the client. from .environment import AmniscientApiEnvironment



        Defaults to AmniscientApiEnvironment.DEFAULT



    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from amniscient import AmniscientApi

    client = AmniscientApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: AmniscientApiEnvironment = AmniscientApiEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = RawAmniscientApi(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> RawAmniscientApi:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAmniscientApi
        """
        return self._raw_client

    def load_model(
        self, model_id: str, *, organization_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[str]:
        """
        Initializes a model for inference. This endpoint must be called before running any detections.

        Parameters
        ----------
        model_id : str
            The model ID of an active and trained AI model within your organization

        organization_id : str
            Your organization identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]
            200 - Your model was successfully loaded

        Examples
        --------
        from amniscient import AmniscientApi

        client = AmniscientApi(
            api_key="YOUR_API_KEY",
        )
        client.load_model(
            model_id="model_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.load_model(
            model_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def detect(
        self, *, organization_id: str, file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> DetectResponse:
        """
        Detects an object within an uploaded image file. Make sure to load the model you're using for detection first!

        Parameters
        ----------
        organization_id : str
            Your organization identifier

        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DetectResponse
            200 - Detection successful

        Examples
        --------
        from amniscient import AmniscientApi

        client = AmniscientApi(
            api_key="YOUR_API_KEY",
        )
        client.detect(
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.detect(organization_id=organization_id, file=file, request_options=request_options)
        return _response.data


class AsyncAmniscientApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : AmniscientApiEnvironment
        The environment to use for requests from the client. from .environment import AmniscientApiEnvironment



        Defaults to AmniscientApiEnvironment.DEFAULT



    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from amniscient import AsyncAmniscientApi

    client = AsyncAmniscientApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: AmniscientApiEnvironment = AmniscientApiEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = AsyncRawAmniscientApi(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAmniscientApi:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAmniscientApi
        """
        return self._raw_client

    async def load_model(
        self, model_id: str, *, organization_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[str]:
        """
        Initializes a model for inference. This endpoint must be called before running any detections.

        Parameters
        ----------
        model_id : str
            The model ID of an active and trained AI model within your organization

        organization_id : str
            Your organization identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]
            200 - Your model was successfully loaded

        Examples
        --------
        import asyncio

        from amniscient import AsyncAmniscientApi

        client = AsyncAmniscientApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.load_model(
                model_id="model_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.load_model(
            model_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def detect(
        self, *, organization_id: str, file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> DetectResponse:
        """
        Detects an object within an uploaded image file. Make sure to load the model you're using for detection first!

        Parameters
        ----------
        organization_id : str
            Your organization identifier

        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DetectResponse
            200 - Detection successful

        Examples
        --------
        import asyncio

        from amniscient import AsyncAmniscientApi

        client = AsyncAmniscientApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.detect(
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.detect(
            organization_id=organization_id, file=file, request_options=request_options
        )
        return _response.data


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: AmniscientApiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
