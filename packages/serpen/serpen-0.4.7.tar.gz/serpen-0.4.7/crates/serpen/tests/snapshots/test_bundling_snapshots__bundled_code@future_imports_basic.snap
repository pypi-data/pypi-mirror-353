---
source: crates/serpen/tests/test_bundling_snapshots.rs
---
#!/usr/bin/env python3
# Generated by Serpen - Python Source Bundler
# https://github.com/tinovyatkin/serpen

from __future__ import annotations

# ─ Module: mypackage.submodule.utils ─
from typing import Dict, Any, Union
def validate_input(data: InputData) -> bool:
    """Validate input data structure.\n\n    Uses forward reference that requires future import.\n    """
    if not isinstance(data, dict):
        return False
    return "key" in data and isinstance(data.get("numbers"), list)
def format_output(data: Any) -> FormattedOutput:
    """Format data for output."""
    return f"Formatted: {data}"
InputData = Dict[str, Any]
FormattedOutput = Union[str, Dict[str, Any]]

# ─ Module: mypackage.core ─
from typing import Dict, List, Any
def process_data(data: Dict[str, Any]) -> Dict[str, Any]:
    """Process input data and return results.\n\n    This function uses forward references in type hints.\n    """
    result: ProcessingResult = {"input": data, "processed": True, "output": _transform_data(data)}
    return result
def _transform_data(data: Dict[str, Any]) -> List[str]:
    """Transform data into list format."""
    return [f"{k}={v}" for k, v in data.items()]
ProcessingResult = Dict[str, Any]

# ─ Entry Module: main ─
def main() -> None:
    """Main function with type annotations that require future import."""
    data = {"key": "value", "numbers": [1, 2, 3]}
    if validate_input(data):
        result = process_data(data)
        print(f"Processing result: {result}")
    else:
        print("Invalid input data")
if __name__ == "__main__":
    main()
