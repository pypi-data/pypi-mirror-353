# `config_version` is used internally to indicate and check 
# whether a config is compatible with the (current) code.
# (Currently hardset in `workflow.py`.)
config_version: 'v0.1'
used_model_key: model_1
description: |
  Erste Version einer Konfiguration f√ºr die EvidenceSeeker Boilerplate.
pipeline:
  system_prompt: &default_sp |
    You are a helpful assistant with outstanding expertise in critical thinking and logico-semantic analysis. You have a background in philosophy, and have practical experience in fact checking and debate analysis.
    You read instructions carefully and follow them precisely. You give concise and clear answers.
  preprocessing:
    timeout: 60
    verbose: False
    workflow_events:
      ascriptive_analysis_event:
        name: 'Ascriptive analysis'
        description: |
          Instruct the assistant to carry out free-text analysis of ascriptions.
        prompt_template: |
          The following claim has been submitted for fact-checking.
          <claim>{claim}</claim>
          Before we proceed with retrieving evidence items, we carefully analyse the claim. Your task is to contribute to this preparatory analysis, as detailed below.
          In particular, you should thoroughly discuss whether the claim makes any explicit ascriptions, that is, whether it explicitly ascribes a statement to a person or an organisation (e.g., as something the person has said, believes, acts on etc.) rather than plainly asserting that statement straightaway.
          If so, clarify which statements are ascribed to whom exactly and in which ways.
          In doing so, watch out for ambiguity and vagueness in the claim. Make alternative interpretations explicit.
          End your analysis with a short list including all identified ascriptions. Formulate each ascription as a concise statement, such that it is transparent to whom it is attributed.
        system_prompt: *default_sp
      list_ascriptive_claims_event_based_on_ascriptive_analysis:
        name: 'Ascriptive-statements list'
        description: 'List all ascriptive statements based on free-text analysis of ascriptive content.'
        prompt_template: |
          The following claim has been submitted for ascriptive content analysis.
          <claim>{claim}</claim>
          The analysis yielded the following results:
          <results>
          {ascriptive_analysis_event}
          </results>
          Based on this analysis:
          - List all identified ascriptions. Clearly state each ascription as a concise statement, such that it is transparent to whom it is attributed. Only include ascriptions that are explicitly attributed to a specific person or organisation.
          Format your (possibly empty) list of statements as a JSON object.
          Do not include any other text than the JSON object.
        system_prompt: *default_sp
      descriptive_analysis_event:
        name: 'Descriptive analysis'
        description: |
          Instruct the assistant to carry out free-text analysis of factual content.
        prompt_template: |
          The following claim has been submitted for fact-checking.
          <claim>{claim}</claim>
          Before we proceed with retrieving evidence items, we carefully analyse the claim. Your task is to contribute to this preparatory analysis, as detailed below.
          In particular, you should thoroughly discuss whether the claim contains or implies factual or descriptive statements, which can be verified or falsified by empirical observation or through scientific analysis, and which may include, for example, descriptive reports, historical facts, or scientific claims.
          If so, try to identify them and render them in your own words.
          In doing so, watch out for ambiguity and vagueness in the claim. Make alternative interpretations explicit.
          End your analysis with a short list of all identified factual or descriptive statements. Formulate each statement in a concise manner and such that its factual nature stands out clearly.
        system_prompt: *default_sp
      list_descriptive_claims_event_based_on_descriptive_analysis:
        name: 'Descriptive-statements list'
        description: 'List all descriptive statements based on free-text analysis of descriptive content.'
        prompt_template: |
          The following claim has been submitted for analysing its descriptive content.
          <claim>{claim}</claim>
          The analysis yielded the following results:
          <results>
          {descriptive_analysis_event}
          </results>
          Building on this analysis: 
          - I want you to list all identified factual or descriptive statements. Only include clear cases, i.e. statements that are unambiguously factual or descriptive.   
          Format your (possibly empty) list of statements as a JSON object.
          Do not include any other text than the JSON object.
        system_prompt: *default_sp
      list_claims_event:
        name: 'Statements list'
        description: 'List all factual and ascriptive statements based on all free-text analyses.'
        prompt_template: |
          The following claim has been submitted for analysing its descriptive, normative and ascriptive content.
          <claim>{claim}</claim>
          The analysis yielded the following results:
          <results of descripitve analysis>
          {descriptive_analysis_event}
          </results of descriptive analysis>
          <results of ascripitve analysis>
          {ascriptive_analysis_event}
          </results of ascriptive analysis>
          <results of normative analysis>
          {normative_analysis_event}
          </results of normative analysis>
          Building on this analysis, I want you to to identify the factual, and the ascriptive content of the claim. In particular, you should  
          1. List all factual or descriptive statements, which can be verified or falsified by empirical observation or scientific analysis, contained in the claim;
          2. List all ascriptions, that is, statements ascribed to a person or organisation, contained in the claim.
          Format your output as a JSON object according to the following schema:
          <json-schema>
          {json_schema}
          </json-schema>
          Do not include any other text than the JSON object.
          Omit any markdown formatting. Do not include any preamble or explanation.
        system_prompt: *default_sp
      normative_analysis_event:
        name: 'Normative Analysis'
        description: |
          Instruct the assistant to carry out free-text analysis of normative content.
        prompt_template: |
          The following claim has been submitted for fact-checking.
          <claim>{claim}</claim>
          Before we proceed with retrieving evidence items, we carefully analyse the claim. Your task is to contribute to this preparatory analysis, as detailed below.
          In particular, you should thoroughly discuss whether the claim contains or implies normative statements, such as value judgements, recommendations, or evaluations. However, avoid reading normative content into the claim without textual evidence.
          If so, try to identify them and render them in your own words.
          In doing so, watch out for ambiguity and vagueness in the claim. Make alternative interpretations explicit.
          End your analysis with a short list of all identified normative statements. Formulate each statement in a concise manner and such that its normative nature stands out clearly.
        system_prompt: *default_sp
      list_normative_claims_event_based_on_normative_analysis:
        name: 'Normative-statements list'
        description: 'List all normative statements based on free-text analysis of normative content.'
        prompt_template: |
          The following claim has been submitted for normative content analysis.
          <claim>{claim}</claim>
          The analysis yielded the following results:
          <results>
          {normative_analysis_event}
          </results>
          Based on this analysis:
          - List all identified normative statements (e.g., value judgements, recommendations, or evaluations).
          Format your (possibly empty) list of statements as a JSON object.
          Do not include any other text than the JSON object.
        system_prompt: *default_sp
      negate_claim_event:
        name: 'Negate statement'
        description: 'Instruct assistant to negate a claim.'
        system_prompt: *default_sp
        prompt_template: |
          Your task is to express the opposite of the following statement in plain and unequivocal language. 
          Please generate a single sentence that clearly states the negation.
          <statement>
          {statement}
          </statement>
          Provide only the negated statement without any additional comments. 
  confirmation_analysis:
    timeout: 60
    verbose: False
    workflow_events:
      freetext_confirmation_analysis_event:
        name: 'Freetext confirmation analysis'
        description: |
          Instruct the assistant to carry out free-text analysis of whether a document (text snippet)
          contains evidence for the claim in question.
        prompt_template: |
          The following claim has been submitted for fact-checking.
          <claim>{statement}</claim>
          You task is to analyse whether the following text confirms or disconfirms the claim.
          <text>
          {evidence_item}
          </text>
          In particular, you should analyse
          1. whether the text entails the claim or is inconsistent with the claim;
          2. whether the text describes empirical evidence in favour or against the claim;
          3. whether the text cites trustworthy parties (such as experts) that speak in favour for the claim.
          Explain the results of your analysis.
        system_prompt: *default_sp
      multiple_choice_confirmation_analysis_event:
        name: 'Multiple choise confirmation analysis'
        description: |
          Instruct the assistant to decide whether the text confirms or disconfirms the claim.
        prompt_template: |
          The following claim and its negation has been submitted for analysing whether 
          the following text confirms or disconfirm the claim.
          
          <claim>
          {statement}
          </claim>
          
          <negation of claim>
          {statement_negation}
          </negation of claim>
          
          <text>
          {evidence_item}
          </text>
          
          With regard to the claim, the analysis yielded the following result:
          
          <result w.r.t. the claim>
          {freetext_confirmation_analysis_event}
          </result w.r.t. the claim>
          
          With regard to the negation of the claim, the analysis yielded the following result:
          
          <result w.r.t. the negation of the claim>
          {freetext_confirmation_analysis_event_negation}
          </result w.r.t. the negation of the claim>
          
          Based on these results, please decide between the following two options:
          
          (A) The text confirms the claim.
          (B) The text disconfirms the claim.
        options: [A, B]
        claim_option: A
        system_prompt: *default_sp
models:
  model_1:
    name: "Llama-3.1-70B-Instruct"
    description: "NVIDEA NIM API (kostenpflichtig √ºber DebateLab Account)"
    base_url: "https://huggingface.co/api/integrations/dgx/v1"
    model: "meta-llama/Llama-3.1-70B-Instruct"
    api_key_name: "kideku_toxicity_app_nim"
    backend_type: nim
    # TODO: pass values 
    max_tokens: 2048 # 2048
    temperature: 0.2
  model_2:
    name: "Mistral-7B-Instruct-v0.2"
    description: "HF inference API"
    base_url: "https://api-inference.huggingface.co/v1/"
    model: "mistralai/Mistral-7B-Instruct-v0.2"
    api_key_name: "HF_TOKEN_KIDEKU_INFERENCE"
    backend_type: openai
    # TODO: pass values 
    max_tokens: 1024
    temperature: 0.2
  model_3:
    name: "Llama-3.2-3B-Instruct"
    description: "HF dedicated endpoint (debatelab)"
    base_url: "https://dchi8b9swca6gxbe.eu-west-1.aws.endpoints.huggingface.cloud/v1/"
    model: "meta-llama/Llama-3.2-3B-Instruct"
    api_key_name: "token_debatelab_hf_endpoints"
    backend_type: tgi
    # TODO: pass values 
    max_tokens: 2048
    temperature: 0.2
  model_4:
    name: "Sp√§tzle 8B"
    description: "Kriton@DebateLab"
    #base_url: "http://kriton.philosophie.kit.edu:8080/v1/chat/completions"
    base_url: "http://kriton.philosophie.kit.edu:8080/v1/"
    model: "tgi"
    api_key: "no-key-required"
    backend_type: tgi
    # TODO: pass values 
    max_tokens: 2048
    temperature: 0.2

