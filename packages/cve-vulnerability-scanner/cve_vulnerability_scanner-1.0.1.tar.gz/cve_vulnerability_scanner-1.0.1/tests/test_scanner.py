import pytest
import json
import os
from unittest.mock import patch, Mock
from cve_vulnerability_scanner.main import CVEScanner, Vulnerability, ScanResult
import requests

class TestCVEScanner:
    @pytest.fixture
    def scanner(self, tmp_path):
        # 使用臨時目錄作為快取目錄
        return CVEScanner("dummy-api-key", cache_dir=str(tmp_path))

    @pytest.fixture
    def mock_nvd_data(self):
        current_dir = os.path.dirname(os.path.abspath(__file__))
        with open(os.path.join(current_dir, 'data/mock_nvd_response.json'), 'r') as f:
            return json.load(f)

    def test_scanner_initialization(self, scanner):
        assert scanner.api_key == "dummy-api-key"
        assert scanner.base_url == "https://services.nvd.nist.gov/rest/json/cves/2.0"
        assert os.path.exists(scanner.cache_dir)

    @patch('requests.get')
    def test_fetch_vulnerabilities(self, mock_get, scanner, mock_nvd_data):
        # 模擬 API 回應
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = mock_nvd_data
        mock_get.return_value = mock_response

        vulnerabilities = scanner.fetch_vulnerabilities("test-package", "1.0.0")
        
        # 驗證 API 呼叫
        mock_get.assert_called_once()
        assert mock_get.call_args[1]['headers']['apiKey'] == "dummy-api-key"
        assert mock_get.call_args[1]['params']['keywordSearch'] == "test-package"

        # 驗證結果
        assert isinstance(vulnerabilities, list)
        if vulnerabilities:
            assert isinstance(vulnerabilities[0], Vulnerability)

    def test_cache_mechanism(self, scanner):
        # 測試寫入快取
        test_data = {"test": "data"}
        scanner._save_to_cache("test-package", test_data)
        
        # 驗證快取檔案存在
        cache_file = os.path.join(scanner.cache_dir, "debug_test-package.json")
        assert os.path.exists(cache_file)
        
        # 測試讀取快取
        cached_data = scanner._get_cached_data("test-package")
        assert cached_data == test_data

    @patch('requests.get')
    def test_scan_packages_from_csv(self, mock_get, scanner, tmp_path, mock_nvd_data):
        # 創建測試用的 CSV 檔案
        csv_path = tmp_path / "test_packages.csv"
        with open(csv_path, 'w') as f:
            f.write("library_name,version\n")
            f.write("test-package,1.0.0\n")

        # 模擬 API 回應
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = mock_nvd_data
        mock_get.return_value = mock_response

        results = scanner.scan_packages(str(csv_path))

        # 驗證結果
        assert len(results) == 1
        assert isinstance(results[0], ScanResult)
        assert results[0].package == "test-package"
        assert results[0].version == "1.0.0"
        
    def test_invalid_csv_format(self, scanner, tmp_path):
        # 測試無效的 CSV 格式
        csv_path = tmp_path / "invalid.csv"
        with open(csv_path, 'w') as f:
            f.write("invalid format\n")
            
        results = scanner.scan_packages(str(csv_path))
        assert len(results) == 0

    @patch('requests.get')
    def test_api_error_handling(self, mock_get, scanner):
        # 測試 API 錯誤處理
        mock_response = Mock()
        mock_response.status_code = 403
        mock_response.text = "API Key Invalid"
        mock_response.json.side_effect = ValueError("Invalid response")  # 模擬 JSON 解析錯誤
        mock_get.return_value = mock_response

        vulnerabilities = scanner.fetch_vulnerabilities("test-package", "1.0.0")
        assert len(vulnerabilities) == 0

    @patch('requests.get')
    def test_api_timeout(self, mock_get, scanner):
        # 測試 API 超時
        mock_get.side_effect = requests.exceptions.Timeout()
        vulnerabilities = scanner.fetch_vulnerabilities("test-package", "1.0.0")
        assert len(vulnerabilities) == 0

    def test_invalid_cache_data(self, scanner, tmp_path):
        # 測試損壞的快取檔案
        cache_file = tmp_path / "debug_test-package.json"
        with open(cache_file, 'w') as f:
            f.write("invalid json data")
        
        cached_data = scanner._get_cached_data("test-package")
        assert cached_data is None

    @patch('requests.get')
    def test_empty_response(self, mock_get, scanner):
        # 測試空回應
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "vulnerabilities": []
        }
        mock_get.return_value = mock_response

        vulnerabilities = scanner.fetch_vulnerabilities("test-package", "1.0.0")
        assert len(vulnerabilities) == 0
