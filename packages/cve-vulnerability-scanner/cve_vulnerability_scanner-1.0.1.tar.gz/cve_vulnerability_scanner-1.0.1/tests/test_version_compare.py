import pytest
from cve_vulnerability_scanner.main import CVEScanner

class TestVersionComparison:
    @pytest.fixture
    def scanner(self):
        return CVEScanner("dummy-api-key")

    @pytest.mark.parametrize("v1, v2, expected", [
        # 標準版本號比較
        ("1.0.0", "1.0.0", 0),  # 相等
        ("1.0.0", "1.0.1", -1), # 小於
        ("2.0.0", "1.0.0", 1),  # 大於
        
        # OpenSSL 風格版本號
        ("1.0.2a", "1.0.2b", -1),
        ("1.0.2b", "1.0.2a", 1),
        ("1.0.2", "1.0.2a", -1),
        
        # 特殊格式版本號
        ("1.0-alpha", "1.0-beta", -1),
        ("2.0-rc1", "2.0", -1),
        ("2.0.0", "2.0.0-rc1", 1),
        
        # 不同長度版本號
        ("1.0", "1.0.0", 0),
        ("1.0.0.0", "1.0.0", 0),
        ("1.0.1", "1.0", 1),
        
        # 特殊情況
        ("*", "1.0.0", 0),
        ("1.0.0", "-", 0),
        ("-", "*", 0),
    ])
    def test_version_comparison(self, scanner, v1, v2, expected):
        assert scanner._compare_versions(v1, v2) == expected

    @pytest.mark.parametrize("version, start, end, expected", [
        ("1.0.0", "1.0.0", "2.0.0", True),   # 在範圍內
        ("0.9.0", "1.0.0", "2.0.0", False),  # 小於範圍
        ("2.1.0", "1.0.0", "2.0.0", False),  # 大於範圍
        ("1.5.0", "*", "2.0.0", True),       # 無下限
        ("1.5.0", "1.0.0", "*", True),       # 無上限
        ("1.5.0", "*", "*", True),           # 無限制
    ])
    def test_version_affected_range(self, scanner, version, start, end, expected):
        assert scanner._is_version_affected(version, start, end) == expected


    def test_special_version_formats(self, scanner):
        # 測試特殊版本格式
        test_cases = [
            ("1.0.0-patch1", "1.0.0-patch2", -1),
            ("2.0.0+build123", "2.0.0+build124", 0),  # build metadata 應該被忽略
            ("1.0.0-alpha.1", "1.0.0-alpha.2", -1),
            ("1.0.0-alpha", "1.0.0-beta", -1),
            ("1.0.0-beta", "1.0.0-rc", -1),
            ("1.0.0-rc", "1.0.0", -1),
        ]
        
        for v1, v2, expected in test_cases:
            result = scanner._compare_versions(v1, v2)
            assert result == expected, f"Failed comparing {v1} with {v2}"

    def test_malformed_versions(self, scanner):
        # 測試格式錯誤的版本號
        test_cases = [
            ("", "1.0.0"),
            ("invalid", "1.0.0"),
            ("1.0.0", "invalid"),
            ("v1.0.0", "1.0.0"),  # 帶有前綴的版本號
        ]
        
        for v1, v2 in test_cases:
            result = scanner._compare_versions(v1, v2)
            assert result == 0, f"Failed handling malformed version: {v1} vs {v2}"
