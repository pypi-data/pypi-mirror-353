"""
RettX Pipeline

Defines the standard RettXPipeline that orchestrates:
1Ô∏è‚É£ OCR
2Ô∏è‚É£ Document validation
3Ô∏è‚É£ Mutation extraction
4Ô∏è‚É£ Mutation validation
5Ô∏è‚É£ Report summarization
6Ô∏è‚É£ Summary correction
"""

import logging
from typing import List, Tuple
from rettxmutation.config import RettxConfig
from rettxmutation.services.services_factory import RettxServices
from rettxmutation.models.document import Document
from rettxmutation.models.gene_models import GeneMutation

logger = logging.getLogger(__name__)

class RettxPipeline:
    """Standard RettX processing pipeline."""

    def __init__(self, config: RettxConfig):
        """
        Initialize pipeline with configuration.
        
        Args:
            config: RettxConfig instance containing all necessary configuration
        """
        self.config = config
        self.services = RettxServices(config)
        
        logger.debug(f"{self.__class__.__name__} initialized with config")

    async def run_pipeline(self, file_stream) -> Tuple[Document, List[GeneMutation]]:
        """
        Full pipeline:
        - OCR ‚Üí Validate ‚Üí Extract Mutations ‚Üí Validate Mutations ‚Üí Return Results

        Args:
            file_stream: File-like object containing the document

        Returns:
            Tuple[Document, List[GeneMutation]]: Processed document and validated mutations
        """
        logger.info("üöÄ Starting RettX pipeline")

        # 1Ô∏è‚É£ OCR
        logger.info("üìù Running OCR processing")
        document = self.services.ocr_service.extract_and_process_text(file_stream)

        # 2Ô∏è‚É£ Validation
        logger.info("üîç Running document validation")
        is_valid, validation_conf = await self.services.validation_agent.validate_document(
            document.cleaned_text, document.language
        )

        if not is_valid:
            raise Exception(f"Document failed validation (confidence={validation_conf:.2f})")

        # 3Ô∏è‚É£ Text analytics for Healthcare entities (optional)
        try:
            logger.info("üîç Running text analytics")
            document.text_analytics_result = self.services.text_analytics_service.identify_genetic_variants(
                document.cleaned_text
            )
            logger.info(f"Text analytics result: {document.text_analytics_result}")
        except Exception as e:
            logger.warning(f"Text analytics not available or failed: {e}")
            document.text_analytics_result = None

        # 4Ô∏è‚É£ Mutation extraction
        logger.info("üß¨ Running mutation extraction")
        raw_mutations = await self.services.extraction_agent.extract_mutations(
            document.cleaned_text,
            document.dump_keywords(),
            document.dump_text_analytics_keywords()
        )

        # 5Ô∏è‚É£ Mutation validation
        validated_mutations = []
        if raw_mutations:
            logger.info(f"üî¨ Validating {len(raw_mutations)} extracted mutations")
            try:
                validated_mutations = await self.services.mutation_validator.validate_mutations(
                    raw_mutations=raw_mutations
                )
                logger.info(f"‚úÖ Successfully validated {len(validated_mutations)} mutations")
            except Exception as e:
                logger.error(f"‚ùå Error during mutation validation: {e}")
                # Continue with empty list or raise depending on requirements
                validated_mutations = []
        else:
            logger.warning("‚ö†Ô∏è No mutations detected in the document")

        logger.info("‚úÖ RettX pipeline completed successfully")
        
        # Return the Document and the list of validated GeneMutation objects
        return document, validated_mutations

    def close(self):
        """Clean up resources."""
        # Clean up services via the factory
        if hasattr(self, 'services'):
            self.services.close()

    def _build_text_analytics_summary(self, mutations):
        """Summarize mutations for correction step."""
        if not mutations:
            return "No mutations detected."
        else:
            lines = [
                f"{m.mutation} (confidence={m.confidence:.2f})"
                for m in mutations
            ]
            return "High confidence mutations detected: " + "; ".join(lines)
