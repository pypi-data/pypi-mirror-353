# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import task_manager_pb2 as task__manager__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in task_manager_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TaskManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterTask = channel.unary_unary(
                '/cornserve.task_manager.TaskManager/RegisterTask',
                request_serializer=task__manager__pb2.RegisterTaskRequest.SerializeToString,
                response_deserializer=task__manager__pb2.RegisterTaskResponse.FromString,
                _registered_method=True)
        self.UpdateResources = channel.unary_unary(
                '/cornserve.task_manager.TaskManager/UpdateResources',
                request_serializer=task__manager__pb2.UpdateResourcesRequest.SerializeToString,
                response_deserializer=task__manager__pb2.UpdateResourcesResponse.FromString,
                _registered_method=True)
        self.Shutdown = channel.unary_unary(
                '/cornserve.task_manager.TaskManager/Shutdown',
                request_serializer=task__manager__pb2.ShutdownRequest.SerializeToString,
                response_deserializer=task__manager__pb2.ShutdownResponse.FromString,
                _registered_method=True)
        self.GetTaskProfile = channel.unary_unary(
                '/cornserve.task_manager.TaskManager/GetTaskProfile',
                request_serializer=task__manager__pb2.GetTaskProfileRequest.SerializeToString,
                response_deserializer=task__manager__pb2.GetTaskProfileResponse.FromString,
                _registered_method=True)
        self.ReconcileTargetLoad = channel.unary_unary(
                '/cornserve.task_manager.TaskManager/ReconcileTargetLoad',
                request_serializer=task__manager__pb2.ReconcileTargetLoadRequest.SerializeToString,
                response_deserializer=task__manager__pb2.ReconcileTargetLoadResponse.FromString,
                _registered_method=True)
        self.GetRoute = channel.unary_unary(
                '/cornserve.task_manager.TaskManager/GetRoute',
                request_serializer=task__manager__pb2.GetRouteRequest.SerializeToString,
                response_deserializer=task__manager__pb2.GetRouteResponse.FromString,
                _registered_method=True)
        self.Healthcheck = channel.unary_unary(
                '/cornserve.task_manager.TaskManager/Healthcheck',
                request_serializer=task__manager__pb2.HealthcheckRequest.SerializeToString,
                response_deserializer=task__manager__pb2.HealthcheckResponse.FromString,
                _registered_method=True)


class TaskManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterTask(self, request, context):
        """Configure the task manager to handle a task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateResources(self, request, context):
        """Add or remove resources from a task manager
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Shutdown(self, request, context):
        """Shutdown the task manager
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskProfile(self, request, context):
        """Load management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReconcileTargetLoad(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoute(self, request, context):
        """Request routing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Healthcheck(self, request, context):
        """Health checking
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterTask': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterTask,
                    request_deserializer=task__manager__pb2.RegisterTaskRequest.FromString,
                    response_serializer=task__manager__pb2.RegisterTaskResponse.SerializeToString,
            ),
            'UpdateResources': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateResources,
                    request_deserializer=task__manager__pb2.UpdateResourcesRequest.FromString,
                    response_serializer=task__manager__pb2.UpdateResourcesResponse.SerializeToString,
            ),
            'Shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.Shutdown,
                    request_deserializer=task__manager__pb2.ShutdownRequest.FromString,
                    response_serializer=task__manager__pb2.ShutdownResponse.SerializeToString,
            ),
            'GetTaskProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskProfile,
                    request_deserializer=task__manager__pb2.GetTaskProfileRequest.FromString,
                    response_serializer=task__manager__pb2.GetTaskProfileResponse.SerializeToString,
            ),
            'ReconcileTargetLoad': grpc.unary_unary_rpc_method_handler(
                    servicer.ReconcileTargetLoad,
                    request_deserializer=task__manager__pb2.ReconcileTargetLoadRequest.FromString,
                    response_serializer=task__manager__pb2.ReconcileTargetLoadResponse.SerializeToString,
            ),
            'GetRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoute,
                    request_deserializer=task__manager__pb2.GetRouteRequest.FromString,
                    response_serializer=task__manager__pb2.GetRouteResponse.SerializeToString,
            ),
            'Healthcheck': grpc.unary_unary_rpc_method_handler(
                    servicer.Healthcheck,
                    request_deserializer=task__manager__pb2.HealthcheckRequest.FromString,
                    response_serializer=task__manager__pb2.HealthcheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cornserve.task_manager.TaskManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cornserve.task_manager.TaskManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaskManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornserve.task_manager.TaskManager/RegisterTask',
            task__manager__pb2.RegisterTaskRequest.SerializeToString,
            task__manager__pb2.RegisterTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornserve.task_manager.TaskManager/UpdateResources',
            task__manager__pb2.UpdateResourcesRequest.SerializeToString,
            task__manager__pb2.UpdateResourcesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornserve.task_manager.TaskManager/Shutdown',
            task__manager__pb2.ShutdownRequest.SerializeToString,
            task__manager__pb2.ShutdownResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornserve.task_manager.TaskManager/GetTaskProfile',
            task__manager__pb2.GetTaskProfileRequest.SerializeToString,
            task__manager__pb2.GetTaskProfileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReconcileTargetLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornserve.task_manager.TaskManager/ReconcileTargetLoad',
            task__manager__pb2.ReconcileTargetLoadRequest.SerializeToString,
            task__manager__pb2.ReconcileTargetLoadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornserve.task_manager.TaskManager/GetRoute',
            task__manager__pb2.GetRouteRequest.SerializeToString,
            task__manager__pb2.GetRouteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Healthcheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornserve.task_manager.TaskManager/Healthcheck',
            task__manager__pb2.HealthcheckRequest.SerializeToString,
            task__manager__pb2.HealthcheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
