[tool.poetry]
name = "ucam_observe"
version = "0.2.1"
description = "Python library to aid consistent configuration of logging, metrics (future) and tracing (further in future). Packaging and wiring existing open tooling to work effortlessly on UIS DevOps managed cloud infrastructure."
license = "MIT"
readme = "README.md"
authors = []
packages = [{include = "ucam_observe"}]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks.install-all-extras]
help = "Install all optional packages"
cmd = "poetry install --all-extras"

[tool.poe.tasks.fix]
help = "Run pre-commit checks to fix formatting errors"
cmd = "pre-commit run --all-files"

[tool.poe.tasks.down]
help = "Stop any running containers"
cmd = "docker compose down"
env = { COMPOSE_PROFILES = "example,tox" }

[tool.poe.tasks.up]
help = "Build or rebuild all dev container images"
cmd = "docker compose up"
env = { COMPOSE_PROFILES = "example,tox" }

[tool.poe.tasks.build]
help = "Build or rebuild all dev container images"
cmd = "docker compose build"
env = { COMPOSE_PROFILES = "example,tox" }

[tool.poe.tasks.tox]
help = "Run the Python test suite via tox"
cmd = "docker compose run --build --rm tox"

[tool.poe.tasks.lock]
help = "Regenerate poetry lock"
cmd = "poetry lock --no-update"

[tool.poe.tasks."tox:local"]
help = "Run the Python test suite via tox using the locally installed Python version"
cmd = "tox"

[tool.poetry.dependencies]
python = "^3.9.1"
structlog = "^24.1.0"
django-structlog = {version = "^8.0.0", optional = true}

[tool.poetry.group.dev.dependencies]
pytest-cov = "^5.0.0"
pre-commit = "^3.7.0"
tox = "^4.14.2"
pytest = {version = "^8.1.1", optional = true}
poethepoet = "^0.25.1"

[tool.poetry.extras]
django = ["django-structlog"]

[tool.mypy]
ignore_missing_imports = true

[tool.black]
line-length = 99

[tool.isort]
profile = "black"

[tool.coverage.run]
omit= [
  ".tox/*",
  "setup.py",
  "*/test/*",
  "*/tests/*",
]
