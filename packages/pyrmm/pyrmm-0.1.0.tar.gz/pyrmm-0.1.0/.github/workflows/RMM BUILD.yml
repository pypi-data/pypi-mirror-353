name: RMM BUILD

on:
    workflow_dispatch:
        inputs:
            tag:
                description: '使用v1.0.0格式:版本标签:后缀自动生成'
                required: true

            mid:
                description: '模块ID，必须与RMM_MODULES.toml中的id一致:MyModule(默认-保留命名，仓库内单模块时使用:如果有多个模块，请使用module1, module2等)'
                required: true
                default: "MyModule"
                type: string

            hooks:
                description: '使用prebuild.${hooks} / postbuild.${hooks}钩子 来自定义构建流程 '
                required: true
                type: choice
                options:
                    - 'py'
                    - 'go'
                    - "exe"
                    - "ps1"
                    - "cmd"
                    - "bat"
                    - "elf"
                    - "sh"
                    - "rs"
                default: 'py'

            dev:
                description: '是否为开发版本'
                required: true
                type: choice
                options:
                    - 'true'
                    - 'false'
                default: 'false'

            prerelease:
                description: '是否为预发布版本'
                required: true
                type: choice
                options:
                    - 'true'
                    - 'false'
                default: 'false'

            upload:
                description: '是否上传至rmm模块仓库？（提交PR)'
                required: true
                type: choice
                options:
                    - 'true'
                    - 'false'
                default: 'true'

            push:
                description: "如果手机与电脑建立adb连接，是否推送模块到手机？"
                required: true
                type: choice
                options:
                    - 'true'
                    - 'false'
                default: 'false'

            path:
                description: "如果手机与电脑建立adb连接，推送模块到手机的基础路径？"
                required: true
                default: "/sdcard/downloads/rmm/"

              
            # 模块测试自动化 高级配置。需配置SECRETS.API_KEY && SECRETS.BASE_URL && SECRETS.MODEL
            ai:
                description: "是否启用AI模块审查？"
                required: true
                type: choice
                options:
                    - 'true'
                    - 'false'
                default: 'false'

            macos:
                description: "是否启用macOS构建？"
                required: true
                type: choice
                options:
                    - 'true'
                    - 'false'
                default: 'false'


jobs:
    RMM_BUILD_ubuntu:
        runs-on: ubuntu-latest
        if: ${{ github.event.inputs.hooks != 'exe' && github.event.inputs.hooks != 'ps1' && github.event.inputs.hooks != 'cmd' && github.event.inputs.hooks != 'bat' }}
        permissions:
            contents: write
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            MODDIR: ${{ github.workspace }}/MyModule
            BUILDDIR: ${{ github.workspace }}/build
            RMMBUILDDIR: ${{ github.workspace }}/RMM_BUILD
            BUILDTOML: ${{ github.workspace }}/RMM_BUILD/RMM_BUILD.toml
            tag: ${{ github.event.inputs.tag }}
            hooks: ${{ github.event.inputs.hooks }}
            dev: ${{ github.event.inputs.dev }}
            prerelease: ${{ github.event.inputs.prerelease }}
            upload: ${{ github.event.inputs.upload }}
            push: ${{ github.event.inputs.push }}
            path: ${{ github.event.inputs.path }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4.2.2
              with:
                lfs: true
                
            # 缓存Python环境和工具
            - name: Cache UV and Python environment
              uses: actions/cache@v4.2.1
              with:
                path: |
                  ~/.cache/uv
                  ~/.local/share/uv
                key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', 'uv.lock') }}
                restore-keys: |
                  ${{ runner.os }}-uv-
                
            - name: Install uv
              uses: astral-sh/setup-uv@v6.1.0
              with:
                python-version: 3.13

            - name: Install RMM
              run: |
                ls -l
                uv tool install pyrmm || echo "RMM installation completed"

            # 缓存Rust环境
            - name: Cache Rust
              if: ${{ github.event.inputs.hooks == 'rs' }}
              uses: actions/cache@v4.2.1
              with:
                path: |
                  ~/.cargo/registry
                  ~/.cargo/git
                  target
                key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
                restore-keys: |
                  ${{ runner.os }}-cargo-

            - name: Install rust
              if: ${{ github.event.inputs.hooks == 'rs' }}
              uses: actions-rs/toolchain@v1.0.7
              with:
                toolchain: stable
                profile: minimal

            - name: cargo && pre-build
              if: ${{ github.event.inputs.hooks == 'rs' }}
              uses: actions-rs/cargo@v1.0.3
              with:
                command: run
                args: --manifest-path=./RMM_BUILD/prebuild/rs/Cargo.toml

            # 缓存Go环境
            - name: Cache Go modules
              if: ${{ github.event.inputs.hooks == 'go' }}
              uses: actions/cache@v4.2.1
              with:
                path: |
                  ~/.cache/go-build
                  ~/go/pkg/mod
                key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                restore-keys: |
                  ${{ runner.os }}-go-
           
            - name: Go && pre-build
              if: ${{ github.event.inputs.hooks == 'go' }}
              uses: actions/setup-go@v5.5.0
              with:
                go-version: '1.24.3'
                check-latest: true
              
            - name: Go run pre-build
              if: ${{ github.event.inputs.hooks == 'go' }}
              run: |
                cd ./RMM_BUILD/prebuild/go
                go run .
            
            - name: elf && pre-build
              if: ${{ github.event.inputs.hooks == 'elf' }}
              run: |
                if [ -f "./RMM_BUILD/bin/prebuild" ]; then
                  chmod +x ./RMM_BUILD/bin/prebuild
                  file ./RMM_BUILD/bin/prebuild
                  ./RMM_BUILD/bin/prebuild
                else
                  echo "Warning: ./RMM_BUILD/bin/prebuild not found"
                fi

            - name: sh && pre-build
              if: ${{ github.event.inputs.hooks == 'sh' }}
              run: |
                if [ -f "./RMM_BUILD/prebuild.sh" ]; then
                  chmod +x ./RMM_BUILD/prebuild.sh
                  ./RMM_BUILD/prebuild.sh
                else
                  echo "Warning: ./RMM_BUILD/prebuild.sh not found"
                fi

            - name: py && pre-build
              if: ${{ github.event.inputs.hooks == 'py' }}
              run: |
                if [ -f "./RMM_BUILD/prebuild.py" ]; then
                  python ./RMM_BUILD/prebuild.py
                else
                  echo "Warning: ./RMM_BUILD/prebuild.py not found"
                fi
        
            - name: RMM_BUILD
              run: |
                rmm version
                rmm build -s $MODDIR -c $RMMBUILDDIR -v $tag -d $dev -p $prerelease -u $upload -t $GITHUB_TOKEN 

            - name: Upload build artifacts as workflow artifacts
              uses: actions/upload-artifact@v4.6.2
              with:
                name: ubuntu-prebuild-${{ github.event.inputs.tag }}
                path: ${{ github.workspace }}/build/*.prebuild
                if-no-files-found: error
                retention-days: 90
                
    RMM_BUILD_windows:
        runs-on: windows-latest
        if: ${{ github.event.inputs.hooks == 'exe' || github.event.inputs.hooks == 'ps1' || github.event.inputs.hooks == 'cmd' || github.event.inputs.hooks == 'bat' }}
        permissions:
            contents: write
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            MODDIR: ${{ github.workspace }}/MyModule
            BUILDDIR: ${{ github.workspace }}/build
            RMMBUILDDIR: ${{ github.workspace }}/RMM_BUILD
            BUILDTOML: ${{ github.workspace }}/RMM_BUILD/RMM_BUILD.toml
            tag: ${{ github.event.inputs.tag }}
            hooks: ${{ github.event.inputs.hooks }}
            dev: ${{ github.event.inputs.dev }}
            prerelease: ${{ github.event.inputs.prerelease }}
            upload: ${{ github.event.inputs.upload }}
            push: ${{ github.event.inputs.push }}
            path: ${{ github.event.inputs.path }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4.2.2 # 最新版
              with:
                lfs: true

            - name: Install uv
              uses: astral-sh/setup-uv@v6.1.0
              with:
                python-version: 3.13

            # Cache UV tools and Python packages for Ubuntu
            - name: Cache UV tools
              uses: actions/cache@v4.2.0
              with:
                path: |
                  ~/.cache/uv
                  ~/.local/share/uv
                key: ubuntu-uv-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
                restore-keys: |
                  ubuntu-uv-

            - name: exe && pre-build
              if: ${{ github.event.inputs.hooks == 'exe' }}
              run: |
                if (Test-Path "./RMM_BUILD/prebuild.exe") {
                    ./RMM_BUILD/prebuild.exe
                }

            - name: ps1 && pre-build
              if: ${{ github.event.inputs.hooks == 'ps1' }}
              run: |
                if (Test-Path "./RMM_BUILD/prebuild.ps1") {
                    powershell -ExecutionPolicy Bypass -File ./RMM_BUILD/prebuild.ps1
                }

            - name: cmd && pre-build
              if: ${{ github.event.inputs.hooks == 'cmd' }}
              run: |
                if (Test-Path "./RMM_BUILD/prebuild.cmd") {
                    cmd /c ./RMM_BUILD/prebuild.cmd
                }

            - name: bat && pre-build
              if: ${{ github.event.inputs.hooks == 'bat' }}
              run: |
                if (Test-Path "./RMM_BUILD/prebuild.bat") {
                    cmd /c ./RMM_BUILD/prebuild.bat
                }
            
            - name: Install RMM
              run: |
                uv tool install pyrmm || ls -l

            - name: RMM_BUILD
              run: |
                rmm version
                rmm build -s $MODDIR -c $RMMBUILDDIR -v $tag -d $dev -p $prerelease -u $upload -t $GITHUB_TOKEN

            - name: Upload build artifacts as workflow artifacts
              uses: actions/upload-artifact@v4.6.2
              with:
                name: windows-prebuild-${{ github.event.inputs.tag }}
                path: ${{ github.workspace }}/build/*.prebuild
                if-no-files-found: error
                retention-days: 90
    # 模块 功能测试 && 安全测试
    RMM_MODULES_TEST_AND_POST_BUILD:
        runs-on: ubuntu-latest
        needs: [RMM_BUILD_ubuntu, RMM_BUILD_windows]
        permissions:
            contents: write
        env:
            TEST: ${{ github.workspace }}/TEST
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            tag: ${{ github.event.inputs.tag }}
            hooks: ${{ github.event.inputs.hooks }}
            dev: ${{ github.event.inputs.dev }}
            prerelease: ${{ github.event.inputs.prerelease }}
            upload: ${{ github.event.inputs.upload }}
            push: ${{ github.event.inputs.push }}
            path: ${{ github.event.inputs.path }}
            ai: ${{ github.event.inputs.ai }}
    
        steps:
            - name: Checkout code
              uses: actions/checkout@v4.2.2 # 最新版
              with:
                lfs: true

            - name: Download *.prebuild
              uses: actions/download-artifact@v4.3.0
              with:
                pattern: '*-prebuild-${{ github.event.inputs.tag }}'
                path: ${{ github.workspace }}/downloads
                merge-multiple: true

            - name: Prepare prebuild files
              run: |
                echo "=== 准备构建产物 ==="
                ls -la ${{ github.workspace }}/downloads/ || echo "下载目录不存在"
                
                # 创建测试目录
                mkdir -p ${{ github.workspace }}/prebuild
                
                # 直接复制 .prebuild 文件到统一目录
                cp ${{ github.workspace }}/downloads/*.prebuild ${{ github.workspace }}/prebuild/
                echo "构建产物已准备完成:"
                ls -la ${{ github.workspace }}/prebuild/
              
            - name: Install uv
              uses: astral-sh/setup-uv@v6.1.0
              with:
                python-version: 3.13

            - name: Install RMM
              run: |
                uv tool install pyrmm || ls -l
                rmm version            
                
            - name: Run tests whit AI
              if: ${{ github.event.inputs.ai == 'true' }}
              run: |
                echo "=== 运行模块测试 ==="
                PREBUILD_FILE=$(ls ${{ github.workspace }}/prebuild/*.prebuild | head -1)
                echo "使用构建产物: $PREBUILD_FILE"
                rmm test "$PREBUILD_FILE" -o "$TEST" --ai-enabled ${{ github.event.inputs.ai }} --api-key ${{ secrets.API_KEY }} --base-url ${{ secrets.BASE_URL }} --model ${{ secrets.MODULE }} -t $GITHUB_TOKEN
            - name: Run tests without AI
              if: ${{ github.event.inputs.ai == 'false' }}
              run: |
                echo "=== 运行模块测试 ==="
                PREBUILD_FILE=$(ls ${{ github.workspace }}/prebuild/*.prebuild | head -1)
                echo "使用构建产物: $PREBUILD_FILE"
                rmm test "$PREBUILD_FILE" -o "$TEST" --ai-enabled ${{ github.event.inputs.ai }} -t $GITHUB_TOKEN              
            - name: Upload test results
              uses: actions/upload-artifact@v4.6.2
              with:
                name: rmm.report
                path: ${{ github.workspace }}/TEST/
                if-no-files-found: warn
                retention-days: 30

          # 模块构建后处理
            - name: Install rust for post-build
              if: ${{ github.event.inputs.hooks == 'rs' }}
              uses: actions-rs/toolchain@v1.0.7
              with:
                toolchain: stable
                profile: minimal

            - name: cargo && post-build
              if: ${{ github.event.inputs.hooks == 'rs' }}
              uses: actions-rs/cargo@v1.0.3
              with:
                command: run
                args: --manifest-path=./RMM_BUILD/postbuild/rs/Cargo.toml
           
            - name: Go && post-build
              if: ${{ github.event.inputs.hooks == 'go' }}
              uses: actions/setup-go@v5.5.0
              with:
                go-version: '1.24.3'
                check-latest: true
                
            - name: Go run post-build
              if: ${{ github.event.inputs.hooks == 'go' }}
              run: |
                cd ./RMM_BUILD/postbuild/go
                go run .
              
            - name: elf && post-build
              if: ${{ github.event.inputs.hooks == 'elf' }}
              run: |
                if [ -f "./RMM_BUILD/bin/postbuild" ]; then
                  chmod +x ./RMM_BUILD/bin/postbuild
                  ./RMM_BUILD/bin/postbuild
                fi

            - name: sh && post-build
              if: ${{ github.event.inputs.hooks == 'sh' }}
              run: |
                if [ -f "./RMM_BUILD/postbuild.sh" ]; then
                  chmod +x ./RMM_BUILD/postbuild.sh
                  ./RMM_BUILD/postbuild.sh
                fi

            - name: py && post-build
              if: ${{ github.event.inputs.hooks == 'py' }}
              run: |
                if [ -f "./RMM_BUILD/postbuild.py" ]; then
                  python ./RMM_BUILD/postbuild.py
                fi
    RMM_POST_BUILD_WINDOWS:
        runs-on: windows-latest
        needs: [RMM_MODULES_TEST_AND_POST_BUILD]
        if: ${{ github.event.inputs.hooks == 'exe' || github.event.inputs.hooks == 'ps1' || github.event.inputs.hooks == 'cmd' || github.event.inputs.hooks == 'bat' }}
        permissions:
            contents: write
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            tag: ${{ github.event.inputs.tag }}
            hooks: ${{ github.event.inputs.hooks }}
            dev: ${{ github.event.inputs.dev }}
            prerelease: ${{ github.event.inputs.prerelease }}
            upload: ${{ github.event.inputs.upload }}
            push: ${{ github.event.inputs.push }}
            path: ${{ github.event.inputs.path }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4.2.2
              with:
                lfs: true

            - name: exe && post-build
              if: ${{ github.event.inputs.hooks == 'exe' }}
              run: |
                if (Test-Path "./RMM_BUILD/postbuild.exe") {
                    ./RMM_BUILD/postbuild.exe
                }

            - name: ps1 && post-build
              if: ${{ github.event.inputs.hooks == 'ps1' }}
              run: |
                if (Test-Path "./RMM_BUILD/postbuild.ps1") {
                    powershell -ExecutionPolicy Bypass -File ./RMM_BUILD/postbuild.ps1
                }

            - name: cmd && post-build
              if: ${{ github.event.inputs.hooks == 'cmd' }}
              run: |
                if (Test-Path "./RMM_BUILD/postbuild.cmd") {
                    cmd /c ./RMM_BUILD/postbuild.cmd
                }

            - name: bat && post-build
              if: ${{ github.event.inputs.hooks == 'bat' }}
              run: |
                if (Test-Path "./RMM_BUILD/postbuild.bat") {
                    cmd /c ./RMM_BUILD/postbuild.bat
                }
    RMM_RELEASE:
        runs-on: ubuntu-latest
        needs: [RMM_MODULES_TEST_AND_POST_BUILD, RMM_POST_BUILD_WINDOWS]
        if: ${{ github.event.inputs.upload == 'true' }}
        permissions:
            contents: write
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            tag: ${{ github.event.inputs.tag }}
            hooks: ${{ github.event.inputs.hooks }}
            dev: ${{ github.event.inputs.dev }}
            prerelease: ${{ github.event.inputs.prerelease }}
            upload: ${{ github.event.inputs.upload }}
            push: ${{ github.event.inputs.push }}

        steps:
          - name: Checkout code
            uses: actions/checkout@v4.2.2 # 最新版
            with:
              lfs: true


          - name: Download *.prebuild
            uses: actions/download-artifact@v4.3.0
            with:
              pattern: '*-prebuild-${{ github.event.inputs.tag }}'
              path: ${{ github.workspace }}/artifacts

        
          - name: Download Report
            uses: actions/download-artifact@v4.3.0
            with:
              name: rmm.report
              path: ${{ github.workspace }}/reports

          - name: Install uv
            uses: astral-sh/setup-uv@v6.1.0
            with:
              python-version: 3.13

          - name: Install RMM
            run: |
              uv tool install pyrmm || ls -l
              rmm version

          - name: Create release && upload && publish && More powerful action
            run: |
              rmm release -v $tag -d $dev -p $prerelease -u $upload -t $GITHUB_TOKEN --prebuild ${{ github.workspace }}/artifacts/*.prebuild --report ${{ github.workspace }}/reports/rmm.report --push ${{ github.event.inputs.push }} --path ${{ github.event.inputs.path }}
    # 不支持 build hook功能！！！ 在这里写一些编译之类的脚本就行了
    RMM_MAC:
      runs-on: macos-latest
      if: ${{ github.event.inputs.macos == 'true' }}
      permissions:
          contents: write

      steps:
        - name: Checkout code
          uses: actions/checkout@v4.2.2 # 最新版
          with:
            lfs: true

        - name: Execute macOS specific commands
          run: |
            echo "Please add a specific macOS script here.: /RMM_BUILD/mac/"
            chmod +x ${{ github.workspace }}/RMM_BUILD/mac/rmm
            ${{ github.workspace }}/RMM_BUILD/mac/rmm || echo "No macOS specific prebuild script found."