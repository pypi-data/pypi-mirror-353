#!/bin/bash

# KernelSU Module Creator
# 创建新的KernelSU模块项目的工具

set -euo pipefail

# 默认配置
TEMPLATE_DIR="$(dirname "$0")/../share/templates"
DEFAULT_VERSION="v1.0.0"
DEFAULT_VERSION_CODE="1"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# 显示帮助信息
show_help() {
    cat << EOF
KernelSU Module Creator - 创建新的KernelSU模块项目

用法: ksm-create [选项] <模块ID>

选项:
    -n, --name <name>           模块显示名称
    -v, --version <version>     模块版本 (默认: $DEFAULT_VERSION)
    -c, --code <code>          版本代码 (默认: $DEFAULT_VERSION_CODE)
    -a, --author <author>       作者名称
    -d, --description <desc>    模块描述
    -o, --output <dir>          输出目录 (默认: 当前目录)
    -t, --template <type>       模块模板类型
        basic                   基础模块 (默认)
        service                 服务模块
        webui                   WebUI模块
        magisk-compat           Magisk兼容模块
    --enable-webui              启用WebUI支持
    --enable-service            启用服务脚本
    --enable-uninstall          启用卸载脚本
    -h, --help                  显示此帮助信息

示例:
    ksm-create my_module
    ksm-create -n "我的模块" -a "作者" my_module
    ksm-create --template webui --enable-webui my_webui_module

模板类型:
    basic       - 基础模块结构
    service     - 包含服务脚本的模块
    webui       - 包含WebUI界面的模块
    magisk-compat - Magisk兼容模块
EOF
}

# 错误处理
error() {
    echo -e "${RED}错误: $1${NC}" >&2
    exit 1
}

info() {
    echo -e "${BLUE}信息: $1${NC}"
}

success() {
    echo -e "${GREEN}成功: $1${NC}"
}

# 验证模块ID
validate_module_id() {
    local id="$1"
    if [[ ! "$id" =~ ^[a-zA-Z][a-zA-Z0-9._-]+$ ]]; then
        error "模块ID格式无效。必须以字母开头，只能包含字母、数字、点号、下划线和连字符。"
    fi
}

# 创建模块目录结构
create_module_structure() {
    local output_dir="$1"
    local module_id="$2"
    local template_type="$3"
    
    local module_dir="$output_dir/$module_id"
    
    if [ -d "$module_dir" ]; then
        error "目录 '$module_dir' 已存在"
    fi
    
    info "创建模块目录: $module_dir"
    mkdir -p "$module_dir"
    
    # 基础目录结构
    mkdir -p "$module_dir/system"
    mkdir -p "$module_dir/META-INF/com/google/android"
    
    # 根据模板类型创建特定结构
    case "$template_type" in
        webui)
            mkdir -p "$module_dir/webroot"
            ;;
        service)
            # 服务模块不需要额外目录
            ;;
    esac
}

# 渲染模板文件
render_template() {
    local template_file="$1"
    local output_file="$2"
    local module_id="$3"
    local module_name="$4"
    local module_version="$5"
    local module_version_code="$6"
    local module_author="$7"
    local module_description="$8"
    
    if [ ! -f "$template_file" ]; then
        error "模板文件不存在: $template_file"
    fi
    
    # 使用sed进行模板替换
    sed -e "s/\${module_id}/$module_id/g" \
        -e "s/\${module_name}/$module_name/g" \
        -e "s/\${module_version}/$module_version/g" \
        -e "s/\${module_version_code}/$module_version_code/g" \
        -e "s/\${module_author}/$module_author/g" \
        -e "s/\${module_description}/$module_description/g" \
        "$template_file" > "$output_file"
    
    # 为脚本文件设置执行权限
    if [[ "$output_file" == *.sh ]]; then
        chmod +x "$output_file"
    fi
}

# 创建模块文件
create_module_files() {
    local module_dir="$1"
    local template_type="$2"
    local enable_webui="$3"
    local enable_service="$4"
    local enable_uninstall="$5"
    local module_id="$6"
    local module_name="$7"
    local module_version="$8"
    local module_version_code="$9"
    local module_author="${10}"
    local module_description="${11}"
    
    # 创建 module.prop
    render_template "$TEMPLATE_DIR/module.prop" "$module_dir/module.prop" \
        "$module_id" "$module_name" "$module_version" "$module_version_code" \
        "$module_author" "$module_description"
    
    # 创建 customize.sh
    if [ -f "$TEMPLATE_DIR/customize.sh.template" ]; then
        render_template "$TEMPLATE_DIR/customize.sh.template" "$module_dir/customize.sh" \
            "$module_id" "$module_name" "$module_version" "$module_version_code" \
            "$module_author" "$module_description"
        chmod +x "$module_dir/customize.sh"
    fi
    
    # 根据选项创建脚本文件
    if [ "$enable_service" = "true" ] || [ "$template_type" = "service" ]; then
        if [ -f "$TEMPLATE_DIR/service.sh.template" ]; then
            render_template "$TEMPLATE_DIR/service.sh.template" "$module_dir/service.sh" \
                "$module_id" "$module_name" "$module_version" "$module_version_code" \
                "$module_author" "$module_description"
            chmod +x "$module_dir/service.sh"
        fi
    fi
    
    if [ "$enable_uninstall" = "true" ]; then
        if [ -f "$TEMPLATE_DIR/uninstall.sh.template" ]; then
            render_template "$TEMPLATE_DIR/uninstall.sh.template" "$module_dir/uninstall.sh" \
                "$module_id" "$module_name" "$module_version" "$module_version_code" \
                "$module_author" "$module_description"
            chmod +x "$module_dir/uninstall.sh"
        fi
    fi
    
    # WebUI支持
    if [ "$enable_webui" = "true" ] || [ "$template_type" = "webui" ]; then
        if [ -f "$TEMPLATE_DIR/webroot/index.html" ]; then
            render_template "$TEMPLATE_DIR/webroot/index.html" "$module_dir/webroot/index.html" \
                "$module_id" "$module_name" "$module_version" "$module_version_code" \
                "$module_author" "$module_description"
        fi
    fi
    
    # 创建更新脚本模板
    cat > "$module_dir/META-INF/com/google/android/update-binary" << 'EOF'
#!/sbin/sh

OUTFD=$2
ZIPFILE=$3

ui_print() {
  echo "ui_print $1" > /proc/self/fd/$OUTFD
  echo "ui_print" > /proc/self/fd/$OUTFD
}

# Extract and run customize.sh
TMPDIR=/dev/tmp
INSTALLER=$TMPDIR/install
mkdir -p $INSTALLER

unzip -o "$ZIPFILE" -d $INSTALLER

if [ -f "$INSTALLER/customize.sh" ]; then
    . $INSTALLER/customize.sh
fi
EOF
    chmod +x "$module_dir/META-INF/com/google/android/update-binary"
    
    # 创建updater-script（虽然不使用，但保持兼容性）
    echo "#MAGISK" > "$module_dir/META-INF/com/google/android/updater-script"
}

# 创建示例文件
create_examples() {
    local module_dir="$1"
    local template_type="$2"
    
    # 创建README
    cat > "$module_dir/README.md" << EOF
# $module_name

$module_description

## 安装

1. 下载模块zip包
2. 在KernelSU Manager中安装
3. 重启设备

## 功能

- 功能1：描述
- 功能2：描述

## 配置

模块配置文件位于 \`/data/misc/$module_id/\`

## 版本历史

### v$module_version
- 初始版本

## 许可证

[在此添加许可证信息]
EOF

    # 根据模板类型创建示例
    case "$template_type" in
        webui)
            info "创建WebUI模块示例文件"
            ;;
        service)
            info "创建服务模块示例文件"
            ;;
    esac
}

# 主函数
main() {
    # 默认值
    local module_id=""
    local module_name=""
    local module_version="$DEFAULT_VERSION"
    local module_version_code="$DEFAULT_VERSION_CODE"
    local module_author="Unknown"
    local module_description=""
    local output_dir="."
    local template_type="basic"
    local enable_webui="false"
    local enable_service="false"
    local enable_uninstall="false"
    
    # 解析命令行参数
    while [[ $# -gt 0 ]]; do
        case $1 in
            -n|--name)
                module_name="$2"
                shift 2
                ;;
            -v|--version)
                module_version="$2"
                shift 2
                ;;
            -c|--code)
                module_version_code="$2"
                shift 2
                ;;
            -a|--author)
                module_author="$2"
                shift 2
                ;;
            -d|--description)
                module_description="$2"
                shift 2
                ;;
            -o|--output)
                output_dir="$2"
                shift 2
                ;;
            -t|--template)
                template_type="$2"
                shift 2
                ;;
            --enable-webui)
                enable_webui="true"
                shift
                ;;
            --enable-service)
                enable_service="true"
                shift
                ;;
            --enable-uninstall)
                enable_uninstall="true"
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            -*)
                error "未知选项: $1"
                ;;
            *)
                if [ -z "$module_id" ]; then
                    module_id="$1"
                else
                    error "多余的参数: $1"
                fi
                shift
                ;;
        esac
    done
    
    # 验证必需参数
    if [ -z "$module_id" ]; then
        error "请提供模块ID"
    fi
    
    validate_module_id "$module_id"
    
    # 设置默认值
    if [ -z "$module_name" ]; then
        module_name="$module_id"
    fi
    
    if [ -z "$module_description" ]; then
        module_description="$module_name - Created with KSM Create"
    fi
    
    # 创建模块
    info "创建模块: $module_id"
    info "模板类型: $template_type"
    
    create_module_structure "$output_dir" "$module_id" "$template_type"
    
    local module_dir="$output_dir/$module_id"
    create_module_files "$module_dir" "$template_type" "$enable_webui" "$enable_service" \
        "$enable_uninstall" "$module_id" "$module_name" "$module_version" \
        "$module_version_code" "$module_author" "$module_description"
    
    create_examples "$module_dir" "$template_type"
    
    success "模块创建完成: $module_dir"
    info "下一步："
    info "1. 编辑模块文件以实现您的功能"
    info "2. 使用 ksm-build 构建模块"
    info "3. 使用 ksm-test 测试模块"
}

# 检查依赖
if ! command -v sed &> /dev/null; then
    error "缺少依赖: sed"
fi

# 运行主函数
main "$@"
