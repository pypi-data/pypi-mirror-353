import datetime
from collections.abc import Mapping
from typing import Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field
from dateutil.parser import isoparse

from ..models.cloud_integration_response_status import CloudIntegrationResponseStatus
from ..types import UNSET, Unset

T = TypeVar("T", bound="CloudIntegrationResponse")


@_attrs_define
class CloudIntegrationResponse:
    """
    Attributes:
        external_id (str): External ID to use when creating IAM role (generated by system)
        integration_id (str):
        name (str):
        provider (str):
        region (str):
        status (CloudIntegrationResponseStatus):
        bucket (Union[Unset, str]): Name of the created bucket (if initialized); only present after PATCH/update
        bucket_arn (Union[Unset, str]): ARN of the created bucket (if initialized); only present after PATCH/update
        created_at (Union[Unset, datetime.datetime]):
        role_arn (Union[Unset, str]): IAM Role ARN to assume (for AWS); only present after PATCH/update
        updated_at (Union[Unset, datetime.datetime]):
    """

    external_id: str
    integration_id: str
    name: str
    provider: str
    region: str
    status: CloudIntegrationResponseStatus
    bucket: Union[Unset, str] = UNSET
    bucket_arn: Union[Unset, str] = UNSET
    created_at: Union[Unset, datetime.datetime] = UNSET
    role_arn: Union[Unset, str] = UNSET
    updated_at: Union[Unset, datetime.datetime] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        external_id = self.external_id

        integration_id = self.integration_id

        name = self.name

        provider = self.provider

        region = self.region

        status = self.status.value

        bucket = self.bucket

        bucket_arn = self.bucket_arn

        created_at: Union[Unset, str] = UNSET
        if not isinstance(self.created_at, Unset):
            created_at = self.created_at.isoformat()

        role_arn = self.role_arn

        updated_at: Union[Unset, str] = UNSET
        if not isinstance(self.updated_at, Unset):
            updated_at = self.updated_at.isoformat()

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "external_id": external_id,
                "integration_id": integration_id,
                "name": name,
                "provider": provider,
                "region": region,
                "status": status,
            }
        )
        if bucket is not UNSET:
            field_dict["bucket"] = bucket
        if bucket_arn is not UNSET:
            field_dict["bucket_arn"] = bucket_arn
        if created_at is not UNSET:
            field_dict["created_at"] = created_at
        if role_arn is not UNSET:
            field_dict["role_arn"] = role_arn
        if updated_at is not UNSET:
            field_dict["updated_at"] = updated_at

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        d = dict(src_dict)
        external_id = d.pop("external_id")

        integration_id = d.pop("integration_id")

        name = d.pop("name")

        provider = d.pop("provider")

        region = d.pop("region")

        status = CloudIntegrationResponseStatus(d.pop("status"))

        bucket = d.pop("bucket", UNSET)

        bucket_arn = d.pop("bucket_arn", UNSET)

        _created_at = d.pop("created_at", UNSET)
        created_at: Union[Unset, datetime.datetime]
        if isinstance(_created_at, Unset):
            created_at = UNSET
        else:
            created_at = isoparse(_created_at)

        role_arn = d.pop("role_arn", UNSET)

        _updated_at = d.pop("updated_at", UNSET)
        updated_at: Union[Unset, datetime.datetime]
        if isinstance(_updated_at, Unset):
            updated_at = UNSET
        else:
            updated_at = isoparse(_updated_at)

        cloud_integration_response = cls(
            external_id=external_id,
            integration_id=integration_id,
            name=name,
            provider=provider,
            region=region,
            status=status,
            bucket=bucket,
            bucket_arn=bucket_arn,
            created_at=created_at,
            role_arn=role_arn,
            updated_at=updated_at,
        )

        cloud_integration_response.additional_properties = d
        return cloud_integration_response

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
