[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools_scm[toml]>=8",
  "setuptools>=64",
]

[project]
name = "apsbss"
dynamic = ["version"]
description = "Get information from APS Beamline Scheduling System."
authors = [
  { name = "Pete Jemian", email = "prjemian+apsbss@gmail.com" }
]
maintainers = [
  { name = "Pete Jemian", email = "prjemian+apsbss@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.9"
keywords = ["APS", "BSS", "ESAF", "Proposal", "EPICS"]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/?highlight=license
license = { file = "LICENSE.txt" }
# https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Science/Research",
  "License :: Freely Distributable",
  "License :: Public Domain",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  # "Programming Language :: Python :: 3.9",
  # "Programming Language :: Python :: 3.10",
  # "Programming Language :: Python :: 3.11",
  # https://anaconda.org/aps-anl-tag/aps-dm-api/files
  # "Programming Language :: Python :: 3.12", # dm does not support yet.
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Astronomy",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
  "Topic :: Scientific/Engineering :: Chemistry",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Software Development :: Embedded Systems",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Scientific/Engineering :: Visualization",
  "Topic :: Software Development",
  "Topic :: Utilities",
]

# qt ==5
# pyqt ==5
dependencies = [
  "bluesky",
  "databroker",
  "ophyd",
  "pyRestTable",
  "pyyaml",
  "requests",
  "spec2nexus",
  "whoosh",
]

[project.optional-dependencies]
dev = [
  "build",
  "caproto <1.2.0",  # per https://github.com/bluesky/bluesky-adaptive/pull/50/files
  "coverage",
  "ipython",
  "isort",
  "mypy",
  "pre-commit",
  "pyepics",
  "pytest",
  "ruff",
]

doc = [
  "ipykernel",
  "jinja2",
  "pydata-sphinx-theme",
  "pygments-ipython-console",
  "pygments",
  "sphinx-design",
  "sphinx-tabs",
  "sphinx",
]

all = ["apsbss[dev,doc]"]

[project.scripts]
apsbss = "apsbss.apsbss:main"
apsbss_makedb = "apsbss.apsbss_makedb:main"
# TODO apsbss_ioc.sh

[project.urls]
"Bug Tracker" = "https://github.com/BCDA-APS/apsbss/issues"
"Homepage" = "https://BCDA-APS.github.io/apsbss"
"Release Notes" = "https://github.com/BCDA-APS/apsbss/blob/main/CHANGES.rst"
"Source Code" = "https://github.com/BCDA-APS/apsbss"

[tool.black]
line-length = 115
target-version = ['py311']
include = '\.pyi?$'

[tool.copyright]
copyright = "2017-2025, UChicago Argonne, LLC"

[tool.flake8]
max-line-length = 115
extend-ignore = [
  "E226",
  "E402", # module level import not at top of file (for cansas.py)
  "E501",
  "E741",
  "F401",  # imported but unused
  "F403",
  "W503",
  "W504",
]

[tool.isort]
force_single_line  = "True"
include_trailing_comma = true
multi_line_output = "NOQA"
profile = "black"
src_paths = ["apsbss"]

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib", "-x"]
include_trailing_comma = true
junit_family = "xunit2"

[tool.ruff]
# https://docs.astral.sh/ruff/configuration/

# Exclude a variety of commonly ignored directories.
exclude = [
  ".eggs",
  ".git",
  ".git-rewrite",
  ".mypy_cache",
  ".pytype",
  ".ruff_cache",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "build",
  "dist",
  "venv",
  ".venv",
  "docs",
]

# Same as Black.
line-length = 115
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = [
  # pycodestyle
  "E",
  # Pyflakes
  "F",
  # pyupgrade
  # "UP",
  # flake8-bugbear
  "B",
  # flake8-simplify
  # "SIM",
  # isort
  "I",
  # Warning
  "W",
  # pydocstyle
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  # ruff
  # "RUF"
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = [
  "F405", # symbol may be undefined, or defined from star imports
]
"*.py" = [
  "D107", # Missing docstring in `__init__`
]
"__init__.py" = [
  "D104", # Missing docstring in public package
]
"test_*.py" = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
]

[tool.ruff.lint.isort]
force-single-line = true # Enforces single-line imports

[tool.setuptools]
# leave this empty

[tool.setuptools.package-data]
"*" = ["*.yml"]

[tool.setuptools_scm]
write_to = "apsbss/_version.py"
