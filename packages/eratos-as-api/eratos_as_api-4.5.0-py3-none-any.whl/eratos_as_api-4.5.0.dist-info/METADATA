Metadata-Version: 2.4
Name: eratos-as-api
Version: 4.5.0
Summary: Analysis Services model integration library.
Project-URL: Homepage, https://bitbucket.csiro.au/projects/SC/repos/as-models-api/browse
Author-email: Mac Coombe <mac.coombe@csiro.au>
Maintainer-email: Eratos <support@eratos.com>
License: MIT License
License-File: LICENSE
Keywords: models
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Requires-Python: >=3.7
Requires-Dist: flask==2.2.3
Requires-Dist: werkzeug<3.0.0,>=2.2.2
Provides-Extra: r
Requires-Dist: rpy2==3.3.3; extra == 'r'
Provides-Extra: test
Requires-Dist: httpretty==1.1.4; extra == 'test'
Requires-Dist: rpy2==3.3.3; extra == 'test'
Requires-Dist: webob==1.8.7; extra == 'test'
Requires-Dist: xarray==0.18.0; extra == 'test'
Description-Content-Type: text/markdown


# Unit testing:

Unit tests may be run with the following command:

    python -m unittest discover

## Unit testing with Docker

With this method, you can test using the same environment that as-models-api natively runs in.

By default, we provide a `docker-compose.yml` file that will run the unittests on both Python 2.7 and Python 3.5

To run the tests on the working copy of your source:

    docker-compose up

The first run will take a while to pull down and build the images. Subsequent runs should be very fast.

# Coverage Reporting:

Coverage reporting is handled by the Python [coverage](https://coverage.readthedocs.io)
library. If necessary, it can be installed as follows:

    sudo pip install coverage

An HTML coverage report can then be generated with these commands:

    coverage run -m unittest discover
    coverage html

The results will be placed in the '/htmlcov' directory.
