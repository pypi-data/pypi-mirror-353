[project]
name = "textual-timepiece"
version = "0.5.0"
authors = [{ name = "David Kasakaitis", email = "davidkasakaitis@proton.me" }]
description = "Various time related widgets & functionality for Textual."
readme = "README.md"
requires-python = ">=3.10"
dependencies = ["textual>=2.1.0", "whenever>=0.8.0,<0.9.0"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Typing :: Typed",
    "Topic :: Terminals",
]
keywords = [
    "textual",
    "tui",
    "time",
    "date",
    "whenever",
    "heatmap",
    "activity",
    "widget",
    "timeline",
]
license = "MIT"
license-files = ["LICENSE.md"]

[project.urls]
Repository = "https://github.com/ddkasa/textual-timepiece"
Issues = "https://github.com/ddkasa/textual-timepiece/issues"
Changelog = "https://github.com/ddkasa/textual-timepiece/tree/main/docs/CHANGELOG.md"
Coverage = "https://app.codecov.io/gh/ddkasa/textual-timepiece"
Documentation = "https://ddkasa.github.io/textual-timepiece/"

[dependency-groups]
dev = ["nox>=2024.10.9", "textual-dev>=1.7.0"]
type = ["mypy>=1.15.0"]
test = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.2",
    "pytest-cov>=6.0.0",
    "pytest-textual-snapshot>=1.0.0",
    "pytest-xdist>=3.6.1",
]
lint = ["ruff>=0.9.5"]
docs = [
    "mkdocs-autorefs>=1.4.0",
    "mkdocs-include-dir-to-nav>=1.2.0",
    "mkdocs-macros-plugin>=1.3.7",
    "mkdocs-material>=9.6.5",
    "mkdocstrings[python]>=0.28.2",
    "ruff>=0.9.7",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
textual-timepiece = "textual_timepiece._demo:main"

[tool.ruff]
target-version = "py310"
output-format = "full"
line-length = 79
fix = true
extend-exclude = ["docs/*"]

[tool.ruff.lint]
select = [
    "E",
    "F",
    "W",   # flake8
    "C",   # mccabe
    "I",   # isort
    "N",   # pep8-naming
    "D",   # flake8-docstrings
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "G",   # flake8-logging-format
    "TC",  # flake8-type-checking 
    "RET", # flake8-return
    "ERA", # eradicate
    "ISC", # flake8-implicit-str-concat
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
]
ignore = ["ANN401", "D107", "A002", "A001"]
unfixable = [
    "ERA", # Don't remove commented-out code
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ANN", "E501", "D"]
"noxfile.py" = ["S101", "ANN", "E501", "D"]

[tool.ruff.lint.isort]
known-first-party = ["textual_timepiece"]
force-single-line = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.mypy]
python_version = "3.10"
exclude = ['noxfile.py']
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
check_untyped_defs = true
disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_reexport = true
warn_return_any = true
strict = true

[[tool.mypy.overrides]]
module = ["tests/*", 'noxfile.py']
strict = false
ignore_errors = true
check_untyped_defs = false
disallow_untyped_defs = false
disallow_untyped_calls = false

[tool.pytest.ini_options]
markers = [
    "unit: basic unit tests with no special properties.",
    "snapshot: tests that take visual snapshots.",
    "slow: tests that are slow to run or have delays included.",
]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = "--strict-markers"
asyncio_default_fixture_loop_scope = "function"


[tool.coverage.run]
source = ["src/textual_timepiece", "tests/"]
omit = ["__main__.py", "docs/*"]

[tool.coverage.report]
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "if settings.DEBUG:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == __main__:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


[tool.git-cliff.changelog]
# template for the changelog header
header = """
---
title: Changelog
---

# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    
    {%- for commit in commits %}
        - \
        {% if commit.breaking %}**Breaking**{% if not commit.scope %}: {% else %} {% endif %}{% endif %}\
        {% if commit.scope %}`{{ commit.scope | trim }}`: {% endif %}\

        {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
            {% if commit.remote.username %} by @{{ commit.remote.username }}{%- endif -%}
            {% if commit.remote.pr_number %} in \
            [#{{ commit.remote.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }}) \
            {%- endif -%}
    {% endfor %}
{% endfor %}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors
{%- endif -%}

{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor %}\n
""" # template for the changelog body
# https://keats.github.io/tera/docs/#introduction
# template for the changelog footer
footer = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                {{ self::remote_url() }}/compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: {{ self::remote_url() }}/compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # remove issue numbers from commits
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^ci*", skip = true },
    { message = "^chore*", skip = true },
    { message = "^docs*", skip = true },
    { message = "^[a|A]dd", group = "Added" },
    { message = "^[s|S]upport", group = "Added" },
    { message = "^[r|R]emove", group = "Removed" },
    { message = "^.*: add", group = "Added" },
    { message = "^.*: support", group = "Added" },
    { message = "^.*: remove", group = "Removed" },
    { message = "^.*: delete", group = "Removed" },
    { message = "^test", group = "Fixed" },
    { message = "^fix", group = "Fixed" },
    { message = "^.*: fix", group = "Fixed" },
    { message = "^.*", group = "Changed" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"


[tool.git-cliff.remote.github]
owner = "ddkasa"
repo = "textual-timepiece"
token = "***"
