[project]
name = "beir"
version = "2.2.0"
description = "A Heterogeneous Benchmark for Information Retrieval"
license = { text = "Apache License 2.0" }
readme = "README.md"
authors = [
    { name = "Nandan Thakur", email = "nandant@gmail.com" }
]
maintainers = [
    { name = "Nandan Thakur", email = "nandant@gmail.com" }
]
requires-python = ">=3.9"
keywords = [
    "Benchmarking",
    "BEIR",
    "Evaluation Framework",
    "Information Retrieval", 
    "Transformer Networks",
    "Large Language Models", 
    "PyTorch", 
    "RAG",
    "IR", 
    "NLP", 
    "Deep Learning"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "sentence-transformers",
    "pytrec-eval-terrier",
    "datasets"
]

[project.optional-dependencies]
tf = ["tensorflow>=2.2.0", "tensorflow-text", "tensorflow-hub"]
elasticsearch = ["elasticsearch==7.9.1"]
peft = ["peft"]
llm2vec = ["llm2vec"]
dev = ["pytest", "pytest-cov", "pre-commit"]
faiss = ["faiss-cpu"]

[project.urls]
Homepage = "https://github.com/beir-cellar/beir"
Repository = "https://github.com/beir-cellar/beir"
Download = "https://github.com/beir-cellar/beir/archive/v2.2.0.zip"

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["beir*"]
namespaces = false

[tool.ruff]
line-length = 119
fix = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "UP"]
# Skip `E731` (do not assign a lambda expression, use a def)
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731"
]

[tool.ruff.lint.per-file-ignores]
"examples/**" = [
    # Ignore `E402` (import violations) in all examples
    "E402", 
    # Ignore missing required imports
    "I002"
    ]

[tool.ruff.lint.isort]
known-third-party = ["datasets"]
required-imports = ["from __future__ import annotations"]