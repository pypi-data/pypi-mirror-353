from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any

class SubtaskList(BaseModel):
    subtasks: List[str] = Field(
        ..., description="List of subtasks generated by the planner LLM, each as a single actionable instruction."
    )

class AgentReactOutput(BaseModel):
    thought: str = Field(
        ..., description="The agent's reasoning or thought process for the current step."
    )
    action: Optional[str] = Field(
        None, description="The name of the tool/action the agent wants to invoke, if any."
    )
    action_input: Optional[Dict[str, Any]] = Field(
        None, description="Arguments for the tool/action, as a dictionary."
    )
    final_answer: Optional[str] = Field(
        None, description="The agent's final answer for the current subtask, if the task is complete."
    ) 
    replan_requested: bool = Field(
        False, description="If true, signals the agent to trigger replanning."
    )