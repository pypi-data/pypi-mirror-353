# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetReservationInHouseResponseDataInner(BaseModel):
    """
    GetReservationInHouseResponseDataInner
    """ # noqa: E501
    guest_id: Optional[StrictStr] = Field(default=None, description="Guest identifier", alias="guestID")
    guest_name: Optional[StrictStr] = Field(default=None, description="Guest Name", alias="guestName")
    main_guest_id: Optional[StrictStr] = Field(default=None, description="Guest identifier who made reservation", alias="mainGuestID")
    main_guest_name: Optional[StrictStr] = Field(default=None, description="Guest Name who made reservation", alias="mainGuestName")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Balance owed at the time")
    reservation_id: Optional[StrictStr] = Field(default=None, description="Reservation identifier, used for all query operations", alias="reservationID")
    room_check_out: Optional[date] = Field(default=None, description="Check-out date for the room", alias="roomCheckOut")
    reservation_custom_fields: Optional[List[Dict[str, Any]]] = Field(default=None, description="Reservation Custom Fields, if existent", alias="reservationCustomFields")
    room_id: Optional[StrictStr] = Field(default=None, description="ยน Room identifier", alias="roomID")
    room_name: Optional[StrictStr] = Field(default=None, description="ยน Room name", alias="roomName")
    guest_first_name: Optional[StrictStr] = Field(default=None, description="Guest's First Name", alias="guestFirstName")
    guest_last_name: Optional[StrictStr] = Field(default=None, description="Guest's Last Name", alias="guestLastName")
    guest_phone: Optional[StrictStr] = Field(default=None, description="Guest's Phone", alias="guestPhone")
    guest_address1: Optional[StrictStr] = Field(default=None, description="Guest's Address (line 1)", alias="guestAddress1")
    guest_address2: Optional[StrictStr] = Field(default=None, description="Guest's Address (line 2)", alias="guestAddress2")
    guest_city: Optional[StrictStr] = Field(default=None, description="Guest's Address City", alias="guestCity")
    guest_state: Optional[StrictStr] = Field(default=None, description="Guest's Address State", alias="guestState")
    guest_country: Optional[StrictStr] = Field(default=None, description="Guest's Address Country", alias="guestCountry")
    guest_zip: Optional[StrictStr] = Field(default=None, description="Guest's Address Zip code", alias="guestZip")
    guest_birth_date: Optional[date] = Field(default=None, description="Guest's BirthDate", alias="guestBirthDate")
    guest_document_type: Optional[StrictStr] = Field(default=None, description="Guest's Document Type", alias="guestDocumentType")
    guest_document_number: Optional[StrictStr] = Field(default=None, description="Guest's Document Number", alias="guestDocumentNumber")
    guest_document_issue_date: Optional[date] = Field(default=None, description="Guest's Document Issue Date", alias="guestDocumentIssueDate")
    guest_document_issuing_country: Optional[StrictStr] = Field(default=None, description="Guest's Document Issuing Country", alias="guestDocumentIssuingCountry")
    guest_document_expiration_date: Optional[date] = Field(default=None, description="Guest's Document Expiration Date", alias="guestDocumentExpirationDate")
    guest_custom_fields: Optional[List[Dict[str, Any]]] = Field(default=None, description="Guest's Custom Fields, if any", alias="guestCustomFields")
    __properties: ClassVar[List[str]] = ["guestID", "guestName", "mainGuestID", "mainGuestName", "balance", "reservationID", "roomCheckOut", "reservationCustomFields", "roomID", "roomName", "guestFirstName", "guestLastName", "guestPhone", "guestAddress1", "guestAddress2", "guestCity", "guestState", "guestCountry", "guestZip", "guestBirthDate", "guestDocumentType", "guestDocumentNumber", "guestDocumentIssueDate", "guestDocumentIssuingCountry", "guestDocumentExpirationDate", "guestCustomFields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetReservationInHouseResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if room_id (nullable) is None
        # and model_fields_set contains the field
        if self.room_id is None and "room_id" in self.model_fields_set:
            _dict['roomID'] = None

        # set to None if room_name (nullable) is None
        # and model_fields_set contains the field
        if self.room_name is None and "room_name" in self.model_fields_set:
            _dict['roomName'] = None

        # set to None if guest_first_name (nullable) is None
        # and model_fields_set contains the field
        if self.guest_first_name is None and "guest_first_name" in self.model_fields_set:
            _dict['guestFirstName'] = None

        # set to None if guest_last_name (nullable) is None
        # and model_fields_set contains the field
        if self.guest_last_name is None and "guest_last_name" in self.model_fields_set:
            _dict['guestLastName'] = None

        # set to None if guest_phone (nullable) is None
        # and model_fields_set contains the field
        if self.guest_phone is None and "guest_phone" in self.model_fields_set:
            _dict['guestPhone'] = None

        # set to None if guest_address1 (nullable) is None
        # and model_fields_set contains the field
        if self.guest_address1 is None and "guest_address1" in self.model_fields_set:
            _dict['guestAddress1'] = None

        # set to None if guest_address2 (nullable) is None
        # and model_fields_set contains the field
        if self.guest_address2 is None and "guest_address2" in self.model_fields_set:
            _dict['guestAddress2'] = None

        # set to None if guest_city (nullable) is None
        # and model_fields_set contains the field
        if self.guest_city is None and "guest_city" in self.model_fields_set:
            _dict['guestCity'] = None

        # set to None if guest_state (nullable) is None
        # and model_fields_set contains the field
        if self.guest_state is None and "guest_state" in self.model_fields_set:
            _dict['guestState'] = None

        # set to None if guest_country (nullable) is None
        # and model_fields_set contains the field
        if self.guest_country is None and "guest_country" in self.model_fields_set:
            _dict['guestCountry'] = None

        # set to None if guest_zip (nullable) is None
        # and model_fields_set contains the field
        if self.guest_zip is None and "guest_zip" in self.model_fields_set:
            _dict['guestZip'] = None

        # set to None if guest_birth_date (nullable) is None
        # and model_fields_set contains the field
        if self.guest_birth_date is None and "guest_birth_date" in self.model_fields_set:
            _dict['guestBirthDate'] = None

        # set to None if guest_document_type (nullable) is None
        # and model_fields_set contains the field
        if self.guest_document_type is None and "guest_document_type" in self.model_fields_set:
            _dict['guestDocumentType'] = None

        # set to None if guest_document_number (nullable) is None
        # and model_fields_set contains the field
        if self.guest_document_number is None and "guest_document_number" in self.model_fields_set:
            _dict['guestDocumentNumber'] = None

        # set to None if guest_document_issue_date (nullable) is None
        # and model_fields_set contains the field
        if self.guest_document_issue_date is None and "guest_document_issue_date" in self.model_fields_set:
            _dict['guestDocumentIssueDate'] = None

        # set to None if guest_document_issuing_country (nullable) is None
        # and model_fields_set contains the field
        if self.guest_document_issuing_country is None and "guest_document_issuing_country" in self.model_fields_set:
            _dict['guestDocumentIssuingCountry'] = None

        # set to None if guest_document_expiration_date (nullable) is None
        # and model_fields_set contains the field
        if self.guest_document_expiration_date is None and "guest_document_expiration_date" in self.model_fields_set:
            _dict['guestDocumentExpirationDate'] = None

        # set to None if guest_custom_fields (nullable) is None
        # and model_fields_set contains the field
        if self.guest_custom_fields is None and "guest_custom_fields" in self.model_fields_set:
            _dict['guestCustomFields'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetReservationInHouseResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "guestID": obj.get("guestID"),
            "guestName": obj.get("guestName"),
            "mainGuestID": obj.get("mainGuestID"),
            "mainGuestName": obj.get("mainGuestName"),
            "balance": obj.get("balance"),
            "reservationID": obj.get("reservationID"),
            "roomCheckOut": obj.get("roomCheckOut"),
            "reservationCustomFields": obj.get("reservationCustomFields"),
            "roomID": obj.get("roomID"),
            "roomName": obj.get("roomName"),
            "guestFirstName": obj.get("guestFirstName"),
            "guestLastName": obj.get("guestLastName"),
            "guestPhone": obj.get("guestPhone"),
            "guestAddress1": obj.get("guestAddress1"),
            "guestAddress2": obj.get("guestAddress2"),
            "guestCity": obj.get("guestCity"),
            "guestState": obj.get("guestState"),
            "guestCountry": obj.get("guestCountry"),
            "guestZip": obj.get("guestZip"),
            "guestBirthDate": obj.get("guestBirthDate"),
            "guestDocumentType": obj.get("guestDocumentType"),
            "guestDocumentNumber": obj.get("guestDocumentNumber"),
            "guestDocumentIssueDate": obj.get("guestDocumentIssueDate"),
            "guestDocumentIssuingCountry": obj.get("guestDocumentIssuingCountry"),
            "guestDocumentExpirationDate": obj.get("guestDocumentExpirationDate"),
            "guestCustomFields": obj.get("guestCustomFields")
        })
        return _obj


