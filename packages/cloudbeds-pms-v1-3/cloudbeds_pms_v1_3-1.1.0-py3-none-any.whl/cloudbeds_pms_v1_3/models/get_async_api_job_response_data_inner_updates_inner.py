# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from cloudbeds_pms_v1_3.models.get_async_api_job_response_data_inner_updates_inner_allotment_intervals_inner import GetAsyncApiJobResponseDataInnerUpdatesInnerAllotmentIntervalsInner
from cloudbeds_pms_v1_3.models.get_async_api_job_response_data_inner_updates_inner_auto_release import GetAsyncApiJobResponseDataInnerUpdatesInnerAutoRelease
from typing import Optional, Set
from typing_extensions import Self

class GetAsyncApiJobResponseDataInnerUpdatesInner(BaseModel):
    """
    GetAsyncApiJobResponseDataInnerUpdatesInner
    """ # noqa: E501
    rate_id: Optional[StrictStr] = Field(default=None, description="Rate ID for which action was taken", alias="rateID")
    action: Optional[StrictStr] = Field(default=None, description="Action taken for this interval as part of this job. in_progress - interval wait for it turn. updated - interval was updated. created - new interval was created with the new date range. error - there was an error when attempting this update. Allowed values: in_progress, updated, created, error")
    start_date: Optional[date] = Field(default=None, description="Interval start date", alias="startDate")
    end_date: Optional[date] = Field(default=None, description="Interval end date", alias="endDate")
    rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value of rate which was updated")
    max_los: Optional[StrictInt] = Field(default=None, description="Maximum length of stay for this rate", alias="maxLos")
    min_los: Optional[StrictInt] = Field(default=None, description="Minimum length of stay for this rate", alias="minLos")
    closed_to_arrival: Optional[StrictBool] = Field(default=None, description="If this rate is closed to arrival", alias="closedToArrival")
    closed_to_departure: Optional[StrictBool] = Field(default=None, description="If this rate is closed to departure", alias="closedToDeparture")
    cut_off: Optional[StrictInt] = Field(default=None, description="Cutoff for this rate", alias="cutOff")
    last_minute_booking: Optional[StrictInt] = Field(default=None, description="Last minute booking for this rate", alias="lastMinuteBooking")
    property_id: Optional[StrictStr] = Field(default=None, description="Property ID associated to the allotment block", alias="propertyID")
    allotment_block_code: Optional[StrictStr] = Field(default=None, description="Allotment block code", alias="allotmentBlockCode")
    allotment_block_status: Optional[StrictStr] = Field(default=None, description="Allotment block status", alias="allotmentBlockStatus")
    allotment_block_name: Optional[StrictStr] = Field(default=None, description="Allotment block name", alias="allotmentBlockName")
    allotment_block_id: Optional[StrictStr] = Field(default=None, description="Allotment block ID", alias="allotmentBlockId")
    rate_type: Optional[StrictStr] = Field(default=None, description="Rate type for the allotment block", alias="rateType")
    rate_plan_id: Optional[StrictStr] = Field(default=None, description="Rate plan ID if applicable", alias="ratePlanId")
    allotment_type: Optional[StrictStr] = Field(default=None, description="the type of allotment block", alias="allotmentType")
    group_id: Optional[StrictStr] = Field(default=None, description="Group profile ID associated to the allotment block", alias="groupId")
    groupcode: Optional[StrictStr] = Field(default=None, description="Group profile code associated to the allotment block")
    is_auto_release: Optional[StrictBool] = Field(default=None, description="If the allotment block is configured for auto-release", alias="isAutoRelease")
    auto_release: Optional[GetAsyncApiJobResponseDataInnerUpdatesInnerAutoRelease] = Field(default=None, alias="autoRelease")
    allotment_intervals: Optional[List[GetAsyncApiJobResponseDataInnerUpdatesInnerAllotmentIntervalsInner]] = Field(default=None, description="array of interval data by room type", alias="allotmentIntervals")
    message: Optional[StrictStr] = Field(default=None, description="Error message")
    __properties: ClassVar[List[str]] = ["rateID", "action", "startDate", "endDate", "rate", "maxLos", "minLos", "closedToArrival", "closedToDeparture", "cutOff", "lastMinuteBooking", "propertyID", "allotmentBlockCode", "allotmentBlockStatus", "allotmentBlockName", "allotmentBlockId", "rateType", "ratePlanId", "allotmentType", "groupId", "groupcode", "isAutoRelease", "autoRelease", "allotmentIntervals", "message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAsyncApiJobResponseDataInnerUpdatesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_release
        if self.auto_release:
            _dict['autoRelease'] = self.auto_release.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in allotment_intervals (list)
        _items = []
        if self.allotment_intervals:
            for _item_allotment_intervals in self.allotment_intervals:
                if _item_allotment_intervals:
                    _items.append(_item_allotment_intervals.to_dict())
            _dict['allotmentIntervals'] = _items
        # set to None if max_los (nullable) is None
        # and model_fields_set contains the field
        if self.max_los is None and "max_los" in self.model_fields_set:
            _dict['maxLos'] = None

        # set to None if min_los (nullable) is None
        # and model_fields_set contains the field
        if self.min_los is None and "min_los" in self.model_fields_set:
            _dict['minLos'] = None

        # set to None if closed_to_arrival (nullable) is None
        # and model_fields_set contains the field
        if self.closed_to_arrival is None and "closed_to_arrival" in self.model_fields_set:
            _dict['closedToArrival'] = None

        # set to None if closed_to_departure (nullable) is None
        # and model_fields_set contains the field
        if self.closed_to_departure is None and "closed_to_departure" in self.model_fields_set:
            _dict['closedToDeparture'] = None

        # set to None if cut_off (nullable) is None
        # and model_fields_set contains the field
        if self.cut_off is None and "cut_off" in self.model_fields_set:
            _dict['cutOff'] = None

        # set to None if last_minute_booking (nullable) is None
        # and model_fields_set contains the field
        if self.last_minute_booking is None and "last_minute_booking" in self.model_fields_set:
            _dict['lastMinuteBooking'] = None

        # set to None if property_id (nullable) is None
        # and model_fields_set contains the field
        if self.property_id is None and "property_id" in self.model_fields_set:
            _dict['propertyID'] = None

        # set to None if allotment_block_code (nullable) is None
        # and model_fields_set contains the field
        if self.allotment_block_code is None and "allotment_block_code" in self.model_fields_set:
            _dict['allotmentBlockCode'] = None

        # set to None if allotment_block_status (nullable) is None
        # and model_fields_set contains the field
        if self.allotment_block_status is None and "allotment_block_status" in self.model_fields_set:
            _dict['allotmentBlockStatus'] = None

        # set to None if allotment_block_name (nullable) is None
        # and model_fields_set contains the field
        if self.allotment_block_name is None and "allotment_block_name" in self.model_fields_set:
            _dict['allotmentBlockName'] = None

        # set to None if allotment_block_id (nullable) is None
        # and model_fields_set contains the field
        if self.allotment_block_id is None and "allotment_block_id" in self.model_fields_set:
            _dict['allotmentBlockId'] = None

        # set to None if rate_type (nullable) is None
        # and model_fields_set contains the field
        if self.rate_type is None and "rate_type" in self.model_fields_set:
            _dict['rateType'] = None

        # set to None if rate_plan_id (nullable) is None
        # and model_fields_set contains the field
        if self.rate_plan_id is None and "rate_plan_id" in self.model_fields_set:
            _dict['ratePlanId'] = None

        # set to None if allotment_type (nullable) is None
        # and model_fields_set contains the field
        if self.allotment_type is None and "allotment_type" in self.model_fields_set:
            _dict['allotmentType'] = None

        # set to None if group_id (nullable) is None
        # and model_fields_set contains the field
        if self.group_id is None and "group_id" in self.model_fields_set:
            _dict['groupId'] = None

        # set to None if groupcode (nullable) is None
        # and model_fields_set contains the field
        if self.groupcode is None and "groupcode" in self.model_fields_set:
            _dict['groupcode'] = None

        # set to None if is_auto_release (nullable) is None
        # and model_fields_set contains the field
        if self.is_auto_release is None and "is_auto_release" in self.model_fields_set:
            _dict['isAutoRelease'] = None

        # set to None if auto_release (nullable) is None
        # and model_fields_set contains the field
        if self.auto_release is None and "auto_release" in self.model_fields_set:
            _dict['autoRelease'] = None

        # set to None if allotment_intervals (nullable) is None
        # and model_fields_set contains the field
        if self.allotment_intervals is None and "allotment_intervals" in self.model_fields_set:
            _dict['allotmentIntervals'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAsyncApiJobResponseDataInnerUpdatesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rateID": obj.get("rateID"),
            "action": obj.get("action"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "rate": obj.get("rate"),
            "maxLos": obj.get("maxLos"),
            "minLos": obj.get("minLos"),
            "closedToArrival": obj.get("closedToArrival"),
            "closedToDeparture": obj.get("closedToDeparture"),
            "cutOff": obj.get("cutOff"),
            "lastMinuteBooking": obj.get("lastMinuteBooking"),
            "propertyID": obj.get("propertyID"),
            "allotmentBlockCode": obj.get("allotmentBlockCode"),
            "allotmentBlockStatus": obj.get("allotmentBlockStatus"),
            "allotmentBlockName": obj.get("allotmentBlockName"),
            "allotmentBlockId": obj.get("allotmentBlockId"),
            "rateType": obj.get("rateType"),
            "ratePlanId": obj.get("ratePlanId"),
            "allotmentType": obj.get("allotmentType"),
            "groupId": obj.get("groupId"),
            "groupcode": obj.get("groupcode"),
            "isAutoRelease": obj.get("isAutoRelease"),
            "autoRelease": GetAsyncApiJobResponseDataInnerUpdatesInnerAutoRelease.from_dict(obj["autoRelease"]) if obj.get("autoRelease") is not None else None,
            "allotmentIntervals": [GetAsyncApiJobResponseDataInnerUpdatesInnerAllotmentIntervalsInner.from_dict(_item) for _item in obj["allotmentIntervals"]] if obj.get("allotmentIntervals") is not None else None,
            "message": obj.get("message")
        })
        return _obj


