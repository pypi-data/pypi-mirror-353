# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetReservationInvoiceInformationResponseDataInnerMainGuestDetailsInner(BaseModel):
    """
    GetReservationInvoiceInformationResponseDataInnerMainGuestDetailsInner
    """ # noqa: E501
    guest_first_name: Optional[StrictStr] = Field(default=None, description="First Name", alias="guestFirstName")
    guest_last_name: Optional[StrictStr] = Field(default=None, description="Last Name", alias="guestLastName")
    guest_gender: Optional[StrictStr] = Field(default=None, description="Gender", alias="guestGender")
    guest_email: Optional[StrictStr] = Field(default=None, description="Email Address", alias="guestEmail")
    guest_phone: Optional[StrictStr] = Field(default=None, description="Phone Number", alias="guestPhone")
    guest_cell_phone: Optional[StrictStr] = Field(default=None, description="Cell Phone Number", alias="guestCellPhone")
    guest_address: Optional[StrictStr] = Field(default=None, description="Adress", alias="guestAddress")
    guest_address2: Optional[StrictStr] = Field(default=None, description="Address Line 2 (Complement)", alias="guestAddress2")
    guest_city: Optional[StrictStr] = Field(default=None, description="City", alias="guestCity")
    guest_country: Optional[StrictStr] = Field(default=None, description="Country", alias="guestCountry")
    tax_id: Optional[StrictStr] = Field(default=None, description="Guest Tax Identifier Number", alias="taxID")
    company_tax_id: Optional[StrictStr] = Field(default=None, description="Company Tax Identifier Number", alias="companyTaxID")
    company_name: Optional[StrictStr] = Field(default=None, description="Company Name", alias="companyName")
    guest_state: Optional[StrictStr] = Field(default=None, description="State", alias="guestState")
    guest_zip: Optional[StrictStr] = Field(default=None, description="Zip code", alias="guestZip")
    is_anonymyzed: Optional[StrictBool] = Field(default=None, description="Flag indicating the guest data was removed upon request", alias="isAnonymyzed")
    __properties: ClassVar[List[str]] = ["guestFirstName", "guestLastName", "guestGender", "guestEmail", "guestPhone", "guestCellPhone", "guestAddress", "guestAddress2", "guestCity", "guestCountry", "taxID", "companyTaxID", "companyName", "guestState", "guestZip", "isAnonymyzed"]

    @field_validator('guest_gender')
    def guest_gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['M', 'F', 'N/A']):
            raise ValueError("must be one of enum values ('M', 'F', 'N/A')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetReservationInvoiceInformationResponseDataInnerMainGuestDetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetReservationInvoiceInformationResponseDataInnerMainGuestDetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "guestFirstName": obj.get("guestFirstName"),
            "guestLastName": obj.get("guestLastName"),
            "guestGender": obj.get("guestGender"),
            "guestEmail": obj.get("guestEmail"),
            "guestPhone": obj.get("guestPhone"),
            "guestCellPhone": obj.get("guestCellPhone"),
            "guestAddress": obj.get("guestAddress"),
            "guestAddress2": obj.get("guestAddress2"),
            "guestCity": obj.get("guestCity"),
            "guestCountry": obj.get("guestCountry"),
            "taxID": obj.get("taxID"),
            "companyTaxID": obj.get("companyTaxID"),
            "companyName": obj.get("companyName"),
            "guestState": obj.get("guestState"),
            "guestZip": obj.get("guestZip"),
            "isAnonymyzed": obj.get("isAnonymyzed")
        })
        return _obj


