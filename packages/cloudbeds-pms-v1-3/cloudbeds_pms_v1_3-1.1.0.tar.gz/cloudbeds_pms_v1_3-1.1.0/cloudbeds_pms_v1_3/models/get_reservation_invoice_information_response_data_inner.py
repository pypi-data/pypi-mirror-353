# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from cloudbeds_pms_v1_3.models.get_reservation_invoice_information_response_data_inner_balance_detailed_inner import GetReservationInvoiceInformationResponseDataInnerBalanceDetailedInner
from cloudbeds_pms_v1_3.models.get_reservation_invoice_information_response_data_inner_main_guest_details_inner import GetReservationInvoiceInformationResponseDataInnerMainGuestDetailsInner
from cloudbeds_pms_v1_3.models.get_reservation_invoice_information_response_data_inner_reservation_add_on_products_inner import GetReservationInvoiceInformationResponseDataInnerReservationAddOnProductsInner
from cloudbeds_pms_v1_3.models.get_reservation_invoice_information_response_data_inner_reservation_additional_products_inner import GetReservationInvoiceInformationResponseDataInnerReservationAdditionalProductsInner
from cloudbeds_pms_v1_3.models.get_reservation_invoice_information_response_data_inner_reservation_adjustments_inner import GetReservationInvoiceInformationResponseDataInnerReservationAdjustmentsInner
from cloudbeds_pms_v1_3.models.get_reservation_invoice_information_response_data_inner_reservation_payments_inner import GetReservationInvoiceInformationResponseDataInnerReservationPaymentsInner
from cloudbeds_pms_v1_3.models.get_reservation_invoice_information_response_data_inner_reservation_rooms_inner import GetReservationInvoiceInformationResponseDataInnerReservationRoomsInner
from cloudbeds_pms_v1_3.models.get_reservation_invoice_information_response_data_inner_reservation_taxes_inner import GetReservationInvoiceInformationResponseDataInnerReservationTaxesInner
from cloudbeds_pms_v1_3.models.get_reservation_response_data_guest_list_value_custom_fields_inner import GetReservationResponseDataGuestListValueCustomFieldsInner
from typing import Optional, Set
from typing_extensions import Self

class GetReservationInvoiceInformationResponseDataInner(BaseModel):
    """
    GetReservationInvoiceInformationResponseDataInner
    """ # noqa: E501
    status: Optional[StrictStr] = Field(default=None, description="Reservation status<br /> 'not_confirmed' - Reservation is pending confirmation<br /> 'confirmed' - Reservation is confirmed<br /> 'canceled' - Reservation is canceled<br /> 'checked_in' - Guest is in hotel<br /> 'checked_out' - Guest already left hotel<br /> 'no_show' - Guest didn't showed up on check-in date")
    custom_fields: Optional[List[GetReservationResponseDataGuestListValueCustomFieldsInner]] = Field(default=None, description="Custom Fields related to the reservation", alias="customFields")
    main_guest_details: Optional[List[GetReservationInvoiceInformationResponseDataInnerMainGuestDetailsInner]] = Field(default=None, description="Details for the main guest of the reservation", alias="mainGuestDetails")
    reservation_rooms: Optional[List[GetReservationInvoiceInformationResponseDataInnerReservationRoomsInner]] = Field(default=None, description="Booked rooms information", alias="reservationRooms")
    reservation_rooms_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total rates for all rooms", alias="reservationRoomsTotal")
    reservation_adjustments: Optional[List[GetReservationInvoiceInformationResponseDataInnerReservationAdjustmentsInner]] = Field(default=None, description="Adjustments applied to the reservation", alias="reservationAdjustments")
    reservation_adjustments_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total sum of adjustments", alias="reservationAdjustmentsTotal")
    reservation_payments: Optional[List[GetReservationInvoiceInformationResponseDataInnerReservationPaymentsInner]] = Field(default=None, description="Payments made for this reservation", alias="reservationPayments")
    reservation_additional_products: Optional[List[GetReservationInvoiceInformationResponseDataInnerReservationAdditionalProductsInner]] = Field(default=None, description="Additional items (products or services)", alias="reservationAdditionalProducts")
    reservation_additional_products_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total sum for additional items", alias="reservationAdditionalProductsTotal")
    reservation_add_on_products: Optional[List[GetReservationInvoiceInformationResponseDataInnerReservationAddOnProductsInner]] = Field(default=None, description="Addons", alias="reservationAddOnProducts")
    reservation_add_on_products_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total sum for addons", alias="reservationAddOnProductsTotal")
    reservation_taxes: Optional[List[GetReservationInvoiceInformationResponseDataInnerReservationTaxesInner]] = Field(default=None, description="Taxes", alias="reservationTaxes")
    reservation_taxes_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total sum for taxes", alias="reservationTaxesTotal")
    reservation_fees: Optional[List[GetReservationInvoiceInformationResponseDataInnerReservationTaxesInner]] = Field(default=None, description="Fees", alias="reservationFees")
    reservation_fees_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total sum for fees", alias="reservationFeesTotal")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Balance currently owed")
    balance_detailed: Optional[List[GetReservationInvoiceInformationResponseDataInnerBalanceDetailedInner]] = Field(default=None, description="Reservation balance detailed with the information available on PC app, describing the financial items calculated", alias="balanceDetailed")
    reservation_origin: Optional[StrictStr] = Field(default=None, description="Reservation Origin", alias="reservationOrigin")
    reservation_meal_plans: Optional[StrictStr] = Field(default=None, description="Reservation Meal Plans", alias="reservationMealPlans")
    __properties: ClassVar[List[str]] = ["status", "customFields", "mainGuestDetails", "reservationRooms", "reservationRoomsTotal", "reservationAdjustments", "reservationAdjustmentsTotal", "reservationPayments", "reservationAdditionalProducts", "reservationAdditionalProductsTotal", "reservationAddOnProducts", "reservationAddOnProductsTotal", "reservationTaxes", "reservationTaxesTotal", "reservationFees", "reservationFeesTotal", "balance", "balanceDetailed", "reservationOrigin", "reservationMealPlans"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['confirmed', 'not_confirmed', 'canceled', 'checked_in', 'checked_out', 'no_show']):
            raise ValueError("must be one of enum values ('confirmed', 'not_confirmed', 'canceled', 'checked_in', 'checked_out', 'no_show')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetReservationInvoiceInformationResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in main_guest_details (list)
        _items = []
        if self.main_guest_details:
            for _item_main_guest_details in self.main_guest_details:
                if _item_main_guest_details:
                    _items.append(_item_main_guest_details.to_dict())
            _dict['mainGuestDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reservation_rooms (list)
        _items = []
        if self.reservation_rooms:
            for _item_reservation_rooms in self.reservation_rooms:
                if _item_reservation_rooms:
                    _items.append(_item_reservation_rooms.to_dict())
            _dict['reservationRooms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reservation_adjustments (list)
        _items = []
        if self.reservation_adjustments:
            for _item_reservation_adjustments in self.reservation_adjustments:
                if _item_reservation_adjustments:
                    _items.append(_item_reservation_adjustments.to_dict())
            _dict['reservationAdjustments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reservation_payments (list)
        _items = []
        if self.reservation_payments:
            for _item_reservation_payments in self.reservation_payments:
                if _item_reservation_payments:
                    _items.append(_item_reservation_payments.to_dict())
            _dict['reservationPayments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reservation_additional_products (list)
        _items = []
        if self.reservation_additional_products:
            for _item_reservation_additional_products in self.reservation_additional_products:
                if _item_reservation_additional_products:
                    _items.append(_item_reservation_additional_products.to_dict())
            _dict['reservationAdditionalProducts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reservation_add_on_products (list)
        _items = []
        if self.reservation_add_on_products:
            for _item_reservation_add_on_products in self.reservation_add_on_products:
                if _item_reservation_add_on_products:
                    _items.append(_item_reservation_add_on_products.to_dict())
            _dict['reservationAddOnProducts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reservation_taxes (list)
        _items = []
        if self.reservation_taxes:
            for _item_reservation_taxes in self.reservation_taxes:
                if _item_reservation_taxes:
                    _items.append(_item_reservation_taxes.to_dict())
            _dict['reservationTaxes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reservation_fees (list)
        _items = []
        if self.reservation_fees:
            for _item_reservation_fees in self.reservation_fees:
                if _item_reservation_fees:
                    _items.append(_item_reservation_fees.to_dict())
            _dict['reservationFees'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in balance_detailed (list)
        _items = []
        if self.balance_detailed:
            for _item_balance_detailed in self.balance_detailed:
                if _item_balance_detailed:
                    _items.append(_item_balance_detailed.to_dict())
            _dict['balanceDetailed'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetReservationInvoiceInformationResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "customFields": [GetReservationResponseDataGuestListValueCustomFieldsInner.from_dict(_item) for _item in obj["customFields"]] if obj.get("customFields") is not None else None,
            "mainGuestDetails": [GetReservationInvoiceInformationResponseDataInnerMainGuestDetailsInner.from_dict(_item) for _item in obj["mainGuestDetails"]] if obj.get("mainGuestDetails") is not None else None,
            "reservationRooms": [GetReservationInvoiceInformationResponseDataInnerReservationRoomsInner.from_dict(_item) for _item in obj["reservationRooms"]] if obj.get("reservationRooms") is not None else None,
            "reservationRoomsTotal": obj.get("reservationRoomsTotal"),
            "reservationAdjustments": [GetReservationInvoiceInformationResponseDataInnerReservationAdjustmentsInner.from_dict(_item) for _item in obj["reservationAdjustments"]] if obj.get("reservationAdjustments") is not None else None,
            "reservationAdjustmentsTotal": obj.get("reservationAdjustmentsTotal"),
            "reservationPayments": [GetReservationInvoiceInformationResponseDataInnerReservationPaymentsInner.from_dict(_item) for _item in obj["reservationPayments"]] if obj.get("reservationPayments") is not None else None,
            "reservationAdditionalProducts": [GetReservationInvoiceInformationResponseDataInnerReservationAdditionalProductsInner.from_dict(_item) for _item in obj["reservationAdditionalProducts"]] if obj.get("reservationAdditionalProducts") is not None else None,
            "reservationAdditionalProductsTotal": obj.get("reservationAdditionalProductsTotal"),
            "reservationAddOnProducts": [GetReservationInvoiceInformationResponseDataInnerReservationAddOnProductsInner.from_dict(_item) for _item in obj["reservationAddOnProducts"]] if obj.get("reservationAddOnProducts") is not None else None,
            "reservationAddOnProductsTotal": obj.get("reservationAddOnProductsTotal"),
            "reservationTaxes": [GetReservationInvoiceInformationResponseDataInnerReservationTaxesInner.from_dict(_item) for _item in obj["reservationTaxes"]] if obj.get("reservationTaxes") is not None else None,
            "reservationTaxesTotal": obj.get("reservationTaxesTotal"),
            "reservationFees": [GetReservationInvoiceInformationResponseDataInnerReservationTaxesInner.from_dict(_item) for _item in obj["reservationFees"]] if obj.get("reservationFees") is not None else None,
            "reservationFeesTotal": obj.get("reservationFeesTotal"),
            "balance": obj.get("balance"),
            "balanceDetailed": [GetReservationInvoiceInformationResponseDataInnerBalanceDetailedInner.from_dict(_item) for _item in obj["balanceDetailed"]] if obj.get("balanceDetailed") is not None else None,
            "reservationOrigin": obj.get("reservationOrigin"),
            "reservationMealPlans": obj.get("reservationMealPlans")
        })
        return _obj


