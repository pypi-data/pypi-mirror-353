# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from cloudbeds_pms_v1_3.models.get_payments_response_data_inner_payment_allocation_inner import GetPaymentsResponseDataInnerPaymentAllocationInner
from typing import Optional, Set
from typing_extensions import Self

class GetPaymentsResponseDataInner(BaseModel):
    """
    GetPaymentsResponseDataInner
    """ # noqa: E501
    transaction_id: Optional[StrictStr] = Field(default=None, description="Transaction identifier", alias="transactionID")
    payment_id: Optional[StrictStr] = Field(default=None, description="Payment ID", alias="paymentID")
    property_id: Optional[StrictStr] = Field(default=None, description="Property ID", alias="propertyID")
    transaction_date_time: Optional[datetime] = Field(default=None, description="Transaction DateTime", alias="transactionDateTime")
    transaction_date_time_utc: Optional[datetime] = Field(default=None, description="Transaction DateTime on UTC timezone", alias="transactionDateTimeUTC")
    user_id: Optional[StrictStr] = Field(default=None, description="User ID that generated payment", alias="userID")
    user_name: Optional[StrictStr] = Field(default=None, description="User name that generated payment", alias="userName")
    room_id: Optional[StrictStr] = Field(default=None, description="ID of room. Only available when reservationID is sent.", alias="roomID")
    room_name: Optional[StrictStr] = Field(default=None, description="Name/Number of room. Only available when reservationID is sent.", alias="roomName")
    guest_id: Optional[StrictStr] = Field(default=None, description="Guest ID. Only available when reservationID or guestID is sent.", alias="guestID")
    guest_name: Optional[StrictStr] = Field(default=None, description="Guest Name. Only available when reservationID or guestID is sent.", alias="guestName")
    guest_check_in: Optional[date] = Field(default=None, description="Guest Check-In date. Only available when reservationID is sent.", alias="guestCheckIn")
    guest_check_out: Optional[date] = Field(default=None, description="Guest Check-Out date. Only available when reservationID is sent.", alias="guestCheckOut")
    reservation_id: Optional[StrictStr] = Field(default=None, description="Reservation ID. Only available when reservationID is sent.", alias="reservationID")
    sub_reservation_id: Optional[StrictStr] = Field(default=None, description="Sub reservation ID. Only available when reservationID is sent.", alias="subReservationID")
    reservation_status: Optional[StrictStr] = Field(default=None, description="Current reservation status. Only available when reservationID is sent.", alias="reservationStatus")
    house_account_id: Optional[StrictStr] = Field(default=None, description="House Account ID, Only available when houseAccountID is sent.", alias="houseAccountID")
    house_account_name: Optional[StrictStr] = Field(default=None, description="House Account Name, Only available when houseAccountID is sent.", alias="houseAccountName")
    description: Optional[StrictStr] = Field(default=None, description="Description of the transaction")
    payment_method: Optional[StrictStr] = Field(default=None, description="Payment Method of the transaction", alias="paymentMethod")
    quantity: Optional[StrictInt] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Consolidated amount on the transaction (Credit - Debit)")
    currency: Optional[StrictStr] = Field(default=None, description="Currency of the transaction")
    is_posted: Optional[StrictBool] = Field(default=None, alias="isPosted")
    is_voided: Optional[StrictBool] = Field(default=None, alias="isVoided")
    is_deleted: Optional[StrictBool] = Field(default=None, alias="isDeleted")
    state: Optional[StrictStr] = None
    is_allocated: Optional[StrictBool] = Field(default=None, description="only if includePaymentAllocation=true", alias="isAllocated")
    total_allocated: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="² Amount of allocated payment", alias="totalAllocated")
    total_unallocated: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="² Amount of unallocated payment", alias="totalUnallocated")
    payment_allocation: Optional[List[GetPaymentsResponseDataInnerPaymentAllocationInner]] = Field(default=None, description="²", alias="paymentAllocation")
    __properties: ClassVar[List[str]] = ["transactionID", "paymentID", "propertyID", "transactionDateTime", "transactionDateTimeUTC", "userID", "userName", "roomID", "roomName", "guestID", "guestName", "guestCheckIn", "guestCheckOut", "reservationID", "subReservationID", "reservationStatus", "houseAccountID", "houseAccountName", "description", "paymentMethod", "quantity", "amount", "currency", "isPosted", "isVoided", "isDeleted", "state", "isAllocated", "totalAllocated", "totalUnallocated", "paymentAllocation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPaymentsResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payment_allocation (list)
        _items = []
        if self.payment_allocation:
            for _item_payment_allocation in self.payment_allocation:
                if _item_payment_allocation:
                    _items.append(_item_payment_allocation.to_dict())
            _dict['paymentAllocation'] = _items
        # set to None if room_id (nullable) is None
        # and model_fields_set contains the field
        if self.room_id is None and "room_id" in self.model_fields_set:
            _dict['roomID'] = None

        # set to None if room_name (nullable) is None
        # and model_fields_set contains the field
        if self.room_name is None and "room_name" in self.model_fields_set:
            _dict['roomName'] = None

        # set to None if guest_id (nullable) is None
        # and model_fields_set contains the field
        if self.guest_id is None and "guest_id" in self.model_fields_set:
            _dict['guestID'] = None

        # set to None if guest_name (nullable) is None
        # and model_fields_set contains the field
        if self.guest_name is None and "guest_name" in self.model_fields_set:
            _dict['guestName'] = None

        # set to None if guest_check_in (nullable) is None
        # and model_fields_set contains the field
        if self.guest_check_in is None and "guest_check_in" in self.model_fields_set:
            _dict['guestCheckIn'] = None

        # set to None if guest_check_out (nullable) is None
        # and model_fields_set contains the field
        if self.guest_check_out is None and "guest_check_out" in self.model_fields_set:
            _dict['guestCheckOut'] = None

        # set to None if reservation_id (nullable) is None
        # and model_fields_set contains the field
        if self.reservation_id is None and "reservation_id" in self.model_fields_set:
            _dict['reservationID'] = None

        # set to None if sub_reservation_id (nullable) is None
        # and model_fields_set contains the field
        if self.sub_reservation_id is None and "sub_reservation_id" in self.model_fields_set:
            _dict['subReservationID'] = None

        # set to None if reservation_status (nullable) is None
        # and model_fields_set contains the field
        if self.reservation_status is None and "reservation_status" in self.model_fields_set:
            _dict['reservationStatus'] = None

        # set to None if house_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.house_account_id is None and "house_account_id" in self.model_fields_set:
            _dict['houseAccountID'] = None

        # set to None if house_account_name (nullable) is None
        # and model_fields_set contains the field
        if self.house_account_name is None and "house_account_name" in self.model_fields_set:
            _dict['houseAccountName'] = None

        # set to None if is_allocated (nullable) is None
        # and model_fields_set contains the field
        if self.is_allocated is None and "is_allocated" in self.model_fields_set:
            _dict['isAllocated'] = None

        # set to None if total_allocated (nullable) is None
        # and model_fields_set contains the field
        if self.total_allocated is None and "total_allocated" in self.model_fields_set:
            _dict['totalAllocated'] = None

        # set to None if total_unallocated (nullable) is None
        # and model_fields_set contains the field
        if self.total_unallocated is None and "total_unallocated" in self.model_fields_set:
            _dict['totalUnallocated'] = None

        # set to None if payment_allocation (nullable) is None
        # and model_fields_set contains the field
        if self.payment_allocation is None and "payment_allocation" in self.model_fields_set:
            _dict['paymentAllocation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPaymentsResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactionID": obj.get("transactionID"),
            "paymentID": obj.get("paymentID"),
            "propertyID": obj.get("propertyID"),
            "transactionDateTime": obj.get("transactionDateTime"),
            "transactionDateTimeUTC": obj.get("transactionDateTimeUTC"),
            "userID": obj.get("userID"),
            "userName": obj.get("userName"),
            "roomID": obj.get("roomID"),
            "roomName": obj.get("roomName"),
            "guestID": obj.get("guestID"),
            "guestName": obj.get("guestName"),
            "guestCheckIn": obj.get("guestCheckIn"),
            "guestCheckOut": obj.get("guestCheckOut"),
            "reservationID": obj.get("reservationID"),
            "subReservationID": obj.get("subReservationID"),
            "reservationStatus": obj.get("reservationStatus"),
            "houseAccountID": obj.get("houseAccountID"),
            "houseAccountName": obj.get("houseAccountName"),
            "description": obj.get("description"),
            "paymentMethod": obj.get("paymentMethod"),
            "quantity": obj.get("quantity"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "isPosted": obj.get("isPosted"),
            "isVoided": obj.get("isVoided"),
            "isDeleted": obj.get("isDeleted"),
            "state": obj.get("state"),
            "isAllocated": obj.get("isAllocated"),
            "totalAllocated": obj.get("totalAllocated"),
            "totalUnallocated": obj.get("totalUnallocated"),
            "paymentAllocation": [GetPaymentsResponseDataInnerPaymentAllocationInner.from_dict(_item) for _item in obj["paymentAllocation"]] if obj.get("paymentAllocation") is not None else None
        })
        return _obj


