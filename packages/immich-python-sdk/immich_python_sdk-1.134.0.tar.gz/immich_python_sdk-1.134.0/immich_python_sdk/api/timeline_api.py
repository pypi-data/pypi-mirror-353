# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.134.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import List, Optional, Union
from typing_extensions import Annotated
from immich_python_sdk.models.asset_order import AssetOrder
from immich_python_sdk.models.asset_visibility import AssetVisibility
from immich_python_sdk.models.time_bucket_asset_response_dto import TimeBucketAssetResponseDto
from immich_python_sdk.models.time_buckets_response_dto import TimeBucketsResponseDto

from immich_python_sdk.api_client import ApiClient, RequestSerialized
from immich_python_sdk.api_response import ApiResponse
from immich_python_sdk.rest import RESTResponseType


class TimelineApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_time_bucket(
        self,
        time_bucket: StrictStr,
        album_id: Optional[StrictStr] = None,
        is_favorite: Optional[StrictBool] = None,
        is_trashed: Optional[StrictBool] = None,
        key: Optional[StrictStr] = None,
        order: Optional[AssetOrder] = None,
        page: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = None,
        page_size: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = None,
        person_id: Optional[StrictStr] = None,
        tag_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        visibility: Optional[AssetVisibility] = None,
        with_partners: Optional[StrictBool] = None,
        with_stacked: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TimeBucketAssetResponseDto:
        """get_time_bucket


        :param time_bucket: (required)
        :type time_bucket: str
        :param album_id:
        :type album_id: str
        :param is_favorite:
        :type is_favorite: bool
        :param is_trashed:
        :type is_trashed: bool
        :param key:
        :type key: str
        :param order:
        :type order: AssetOrder
        :param page:
        :type page: float
        :param page_size:
        :type page_size: float
        :param person_id:
        :type person_id: str
        :param tag_id:
        :type tag_id: str
        :param user_id:
        :type user_id: str
        :param visibility:
        :type visibility: AssetVisibility
        :param with_partners:
        :type with_partners: bool
        :param with_stacked:
        :type with_stacked: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_time_bucket_serialize(
            time_bucket=time_bucket,
            album_id=album_id,
            is_favorite=is_favorite,
            is_trashed=is_trashed,
            key=key,
            order=order,
            page=page,
            page_size=page_size,
            person_id=person_id,
            tag_id=tag_id,
            user_id=user_id,
            visibility=visibility,
            with_partners=with_partners,
            with_stacked=with_stacked,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeBucketAssetResponseDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_time_bucket_with_http_info(
        self,
        time_bucket: StrictStr,
        album_id: Optional[StrictStr] = None,
        is_favorite: Optional[StrictBool] = None,
        is_trashed: Optional[StrictBool] = None,
        key: Optional[StrictStr] = None,
        order: Optional[AssetOrder] = None,
        page: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = None,
        page_size: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = None,
        person_id: Optional[StrictStr] = None,
        tag_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        visibility: Optional[AssetVisibility] = None,
        with_partners: Optional[StrictBool] = None,
        with_stacked: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TimeBucketAssetResponseDto]:
        """get_time_bucket


        :param time_bucket: (required)
        :type time_bucket: str
        :param album_id:
        :type album_id: str
        :param is_favorite:
        :type is_favorite: bool
        :param is_trashed:
        :type is_trashed: bool
        :param key:
        :type key: str
        :param order:
        :type order: AssetOrder
        :param page:
        :type page: float
        :param page_size:
        :type page_size: float
        :param person_id:
        :type person_id: str
        :param tag_id:
        :type tag_id: str
        :param user_id:
        :type user_id: str
        :param visibility:
        :type visibility: AssetVisibility
        :param with_partners:
        :type with_partners: bool
        :param with_stacked:
        :type with_stacked: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_time_bucket_serialize(
            time_bucket=time_bucket,
            album_id=album_id,
            is_favorite=is_favorite,
            is_trashed=is_trashed,
            key=key,
            order=order,
            page=page,
            page_size=page_size,
            person_id=person_id,
            tag_id=tag_id,
            user_id=user_id,
            visibility=visibility,
            with_partners=with_partners,
            with_stacked=with_stacked,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeBucketAssetResponseDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_time_bucket_without_preload_content(
        self,
        time_bucket: StrictStr,
        album_id: Optional[StrictStr] = None,
        is_favorite: Optional[StrictBool] = None,
        is_trashed: Optional[StrictBool] = None,
        key: Optional[StrictStr] = None,
        order: Optional[AssetOrder] = None,
        page: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = None,
        page_size: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = None,
        person_id: Optional[StrictStr] = None,
        tag_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        visibility: Optional[AssetVisibility] = None,
        with_partners: Optional[StrictBool] = None,
        with_stacked: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_time_bucket


        :param time_bucket: (required)
        :type time_bucket: str
        :param album_id:
        :type album_id: str
        :param is_favorite:
        :type is_favorite: bool
        :param is_trashed:
        :type is_trashed: bool
        :param key:
        :type key: str
        :param order:
        :type order: AssetOrder
        :param page:
        :type page: float
        :param page_size:
        :type page_size: float
        :param person_id:
        :type person_id: str
        :param tag_id:
        :type tag_id: str
        :param user_id:
        :type user_id: str
        :param visibility:
        :type visibility: AssetVisibility
        :param with_partners:
        :type with_partners: bool
        :param with_stacked:
        :type with_stacked: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_time_bucket_serialize(
            time_bucket=time_bucket,
            album_id=album_id,
            is_favorite=is_favorite,
            is_trashed=is_trashed,
            key=key,
            order=order,
            page=page,
            page_size=page_size,
            person_id=person_id,
            tag_id=tag_id,
            user_id=user_id,
            visibility=visibility,
            with_partners=with_partners,
            with_stacked=with_stacked,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeBucketAssetResponseDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_time_bucket_serialize(
        self,
        time_bucket,
        album_id,
        is_favorite,
        is_trashed,
        key,
        order,
        page,
        page_size,
        person_id,
        tag_id,
        user_id,
        visibility,
        with_partners,
        with_stacked,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if album_id is not None:
            
            _query_params.append(('albumId', album_id))
            
        if is_favorite is not None:
            
            _query_params.append(('isFavorite', is_favorite))
            
        if is_trashed is not None:
            
            _query_params.append(('isTrashed', is_trashed))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if order is not None:
            
            _query_params.append(('order', order.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if person_id is not None:
            
            _query_params.append(('personId', person_id))
            
        if tag_id is not None:
            
            _query_params.append(('tagId', tag_id))
            
        if time_bucket is not None:
            
            _query_params.append(('timeBucket', time_bucket))
            
        if user_id is not None:
            
            _query_params.append(('userId', user_id))
            
        if visibility is not None:
            
            _query_params.append(('visibility', visibility.value))
            
        if with_partners is not None:
            
            _query_params.append(('withPartners', with_partners))
            
        if with_stacked is not None:
            
            _query_params.append(('withStacked', with_stacked))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'cookie', 
            'api_key', 
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/timeline/bucket',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_time_buckets(
        self,
        album_id: Optional[StrictStr] = None,
        is_favorite: Optional[StrictBool] = None,
        is_trashed: Optional[StrictBool] = None,
        key: Optional[StrictStr] = None,
        order: Optional[AssetOrder] = None,
        person_id: Optional[StrictStr] = None,
        tag_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        visibility: Optional[AssetVisibility] = None,
        with_partners: Optional[StrictBool] = None,
        with_stacked: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[TimeBucketsResponseDto]:
        """get_time_buckets


        :param album_id:
        :type album_id: str
        :param is_favorite:
        :type is_favorite: bool
        :param is_trashed:
        :type is_trashed: bool
        :param key:
        :type key: str
        :param order:
        :type order: AssetOrder
        :param person_id:
        :type person_id: str
        :param tag_id:
        :type tag_id: str
        :param user_id:
        :type user_id: str
        :param visibility:
        :type visibility: AssetVisibility
        :param with_partners:
        :type with_partners: bool
        :param with_stacked:
        :type with_stacked: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_time_buckets_serialize(
            album_id=album_id,
            is_favorite=is_favorite,
            is_trashed=is_trashed,
            key=key,
            order=order,
            person_id=person_id,
            tag_id=tag_id,
            user_id=user_id,
            visibility=visibility,
            with_partners=with_partners,
            with_stacked=with_stacked,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[TimeBucketsResponseDto]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_time_buckets_with_http_info(
        self,
        album_id: Optional[StrictStr] = None,
        is_favorite: Optional[StrictBool] = None,
        is_trashed: Optional[StrictBool] = None,
        key: Optional[StrictStr] = None,
        order: Optional[AssetOrder] = None,
        person_id: Optional[StrictStr] = None,
        tag_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        visibility: Optional[AssetVisibility] = None,
        with_partners: Optional[StrictBool] = None,
        with_stacked: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[TimeBucketsResponseDto]]:
        """get_time_buckets


        :param album_id:
        :type album_id: str
        :param is_favorite:
        :type is_favorite: bool
        :param is_trashed:
        :type is_trashed: bool
        :param key:
        :type key: str
        :param order:
        :type order: AssetOrder
        :param person_id:
        :type person_id: str
        :param tag_id:
        :type tag_id: str
        :param user_id:
        :type user_id: str
        :param visibility:
        :type visibility: AssetVisibility
        :param with_partners:
        :type with_partners: bool
        :param with_stacked:
        :type with_stacked: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_time_buckets_serialize(
            album_id=album_id,
            is_favorite=is_favorite,
            is_trashed=is_trashed,
            key=key,
            order=order,
            person_id=person_id,
            tag_id=tag_id,
            user_id=user_id,
            visibility=visibility,
            with_partners=with_partners,
            with_stacked=with_stacked,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[TimeBucketsResponseDto]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_time_buckets_without_preload_content(
        self,
        album_id: Optional[StrictStr] = None,
        is_favorite: Optional[StrictBool] = None,
        is_trashed: Optional[StrictBool] = None,
        key: Optional[StrictStr] = None,
        order: Optional[AssetOrder] = None,
        person_id: Optional[StrictStr] = None,
        tag_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        visibility: Optional[AssetVisibility] = None,
        with_partners: Optional[StrictBool] = None,
        with_stacked: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_time_buckets


        :param album_id:
        :type album_id: str
        :param is_favorite:
        :type is_favorite: bool
        :param is_trashed:
        :type is_trashed: bool
        :param key:
        :type key: str
        :param order:
        :type order: AssetOrder
        :param person_id:
        :type person_id: str
        :param tag_id:
        :type tag_id: str
        :param user_id:
        :type user_id: str
        :param visibility:
        :type visibility: AssetVisibility
        :param with_partners:
        :type with_partners: bool
        :param with_stacked:
        :type with_stacked: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_time_buckets_serialize(
            album_id=album_id,
            is_favorite=is_favorite,
            is_trashed=is_trashed,
            key=key,
            order=order,
            person_id=person_id,
            tag_id=tag_id,
            user_id=user_id,
            visibility=visibility,
            with_partners=with_partners,
            with_stacked=with_stacked,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[TimeBucketsResponseDto]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_time_buckets_serialize(
        self,
        album_id,
        is_favorite,
        is_trashed,
        key,
        order,
        person_id,
        tag_id,
        user_id,
        visibility,
        with_partners,
        with_stacked,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if album_id is not None:
            
            _query_params.append(('albumId', album_id))
            
        if is_favorite is not None:
            
            _query_params.append(('isFavorite', is_favorite))
            
        if is_trashed is not None:
            
            _query_params.append(('isTrashed', is_trashed))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if order is not None:
            
            _query_params.append(('order', order.value))
            
        if person_id is not None:
            
            _query_params.append(('personId', person_id))
            
        if tag_id is not None:
            
            _query_params.append(('tagId', tag_id))
            
        if user_id is not None:
            
            _query_params.append(('userId', user_id))
            
        if visibility is not None:
            
            _query_params.append(('visibility', visibility.value))
            
        if with_partners is not None:
            
            _query_params.append(('withPartners', with_partners))
            
        if with_stacked is not None:
            
            _query_params.append(('withStacked', with_stacked))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'cookie', 
            'api_key', 
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/timeline/buckets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


