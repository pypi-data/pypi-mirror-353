# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.134.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from immich_python_sdk.models.system_config_dto import SystemConfigDto

class TestSystemConfigDto(unittest.TestCase):
    """SystemConfigDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SystemConfigDto:
        """Test SystemConfigDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SystemConfigDto`
        """
        model = SystemConfigDto()
        if include_optional:
            return SystemConfigDto(
                backup = immich_python_sdk.models.system_config_backups_dto.SystemConfigBackupsDto(
                    database = immich_python_sdk.models.database_backup_config.DatabaseBackupConfig(
                        cron_expression = '', 
                        enabled = True, 
                        keep_last_amount = 1, ), ),
                ffmpeg = immich_python_sdk.models.system_config_f_fmpeg_dto.SystemConfigFFmpegDto(
                    accel = null, 
                    accel_decode = True, 
                    accepted_audio_codecs = [
                        'mp3'
                        ], 
                    accepted_containers = [
                        'mov'
                        ], 
                    accepted_video_codecs = [
                        'h264'
                        ], 
                    bframes = -1, 
                    cq_mode = null, 
                    crf = 0, 
                    gop_size = 0, 
                    max_bitrate = '', 
                    preferred_hw_device = '', 
                    preset = '', 
                    refs = 0, 
                    target_audio_codec = null, 
                    target_resolution = '', 
                    target_video_codec = null, 
                    temporal_aq = True, 
                    threads = 0, 
                    tonemap = null, 
                    transcode = null, 
                    two_pass = True, ),
                image = immich_python_sdk.models.system_config_image_dto.SystemConfigImageDto(
                    colorspace = null, 
                    extract_embedded = True, 
                    fullsize = immich_python_sdk.models.system_config_generated_fullsize_image_dto.SystemConfigGeneratedFullsizeImageDto(
                        enabled = True, 
                        format = null, 
                        quality = 1, ), 
                    preview = immich_python_sdk.models.system_config_generated_image_dto.SystemConfigGeneratedImageDto(
                        format = null, 
                        quality = 1, 
                        size = 1, ), 
                    thumbnail = immich_python_sdk.models.system_config_generated_image_dto.SystemConfigGeneratedImageDto(
                        format = null, 
                        quality = 1, 
                        size = 1, ), ),
                job = immich_python_sdk.models.system_config_job_dto.SystemConfigJobDto(
                    background_task = immich_python_sdk.models.job_settings_dto.JobSettingsDto(
                        concurrency = 1, ), 
                    face_detection = immich_python_sdk.models.job_settings_dto.JobSettingsDto(
                        concurrency = 1, ), 
                    library = , 
                    metadata_extraction = , 
                    migration = , 
                    notifications = , 
                    search = , 
                    sidecar = , 
                    smart_search = , 
                    thumbnail_generation = , 
                    video_conversion = , ),
                library = immich_python_sdk.models.system_config_library_dto.SystemConfigLibraryDto(
                    scan = immich_python_sdk.models.system_config_library_scan_dto.SystemConfigLibraryScanDto(
                        cron_expression = '', 
                        enabled = True, ), 
                    watch = immich_python_sdk.models.system_config_library_watch_dto.SystemConfigLibraryWatchDto(
                        enabled = True, ), ),
                logging = immich_python_sdk.models.system_config_logging_dto.SystemConfigLoggingDto(
                    enabled = True, 
                    level = null, ),
                machine_learning = immich_python_sdk.models.system_config_machine_learning_dto.SystemConfigMachineLearningDto(
                    clip = immich_python_sdk.models.clip_config.CLIPConfig(
                        enabled = True, 
                        model_name = '', ), 
                    duplicate_detection = immich_python_sdk.models.duplicate_detection_config.DuplicateDetectionConfig(
                        enabled = True, 
                        max_distance = 0.001, ), 
                    enabled = True, 
                    facial_recognition = immich_python_sdk.models.facial_recognition_config.FacialRecognitionConfig(
                        enabled = True, 
                        max_distance = 0.1, 
                        min_faces = 1, 
                        min_score = 0.1, 
                        model_name = '', ), 
                    url = '', 
                    urls = [
                        ''
                        ], ),
                map = immich_python_sdk.models.system_config_map_dto.SystemConfigMapDto(
                    dark_style = '', 
                    enabled = True, 
                    light_style = '', ),
                metadata = immich_python_sdk.models.system_config_metadata_dto.SystemConfigMetadataDto(
                    faces = immich_python_sdk.models.system_config_faces_dto.SystemConfigFacesDto(
                        import = True, ), ),
                new_version_check = immich_python_sdk.models.system_config_new_version_check_dto.SystemConfigNewVersionCheckDto(
                    enabled = True, ),
                notifications = immich_python_sdk.models.system_config_notifications_dto.SystemConfigNotificationsDto(
                    smtp = immich_python_sdk.models.system_config_smtp_dto.SystemConfigSmtpDto(
                        enabled = True, 
                        from = '', 
                        reply_to = '', 
                        transport = immich_python_sdk.models.system_config_smtp_transport_dto.SystemConfigSmtpTransportDto(
                            host = '', 
                            ignore_cert = True, 
                            password = '', 
                            port = 0, 
                            username = '', ), ), ),
                oauth = immich_python_sdk.models.system_config_o_auth_dto.SystemConfigOAuthDto(
                    auto_launch = True, 
                    auto_register = True, 
                    button_text = '', 
                    client_id = '', 
                    client_secret = '', 
                    default_storage_quota = 0, 
                    enabled = True, 
                    issuer_url = '', 
                    mobile_override_enabled = True, 
                    mobile_redirect_uri = '', 
                    profile_signing_algorithm = '', 
                    scope = '', 
                    signing_algorithm = '', 
                    storage_label_claim = '', 
                    storage_quota_claim = '', 
                    timeout = 1, 
                    token_endpoint_auth_method = null, ),
                password_login = immich_python_sdk.models.system_config_password_login_dto.SystemConfigPasswordLoginDto(
                    enabled = True, ),
                reverse_geocoding = immich_python_sdk.models.system_config_reverse_geocoding_dto.SystemConfigReverseGeocodingDto(
                    enabled = True, ),
                server = immich_python_sdk.models.system_config_server_dto.SystemConfigServerDto(
                    external_domain = '', 
                    login_page_message = '', 
                    public_users = True, ),
                storage_template = immich_python_sdk.models.system_config_storage_template_dto.SystemConfigStorageTemplateDto(
                    enabled = True, 
                    hash_verification_enabled = True, 
                    template = '', ),
                templates = immich_python_sdk.models.system_config_templates_dto.SystemConfigTemplatesDto(
                    email = immich_python_sdk.models.system_config_template_emails_dto.SystemConfigTemplateEmailsDto(
                        album_invite_template = '', 
                        album_update_template = '', 
                        welcome_template = '', ), ),
                theme = immich_python_sdk.models.system_config_theme_dto.SystemConfigThemeDto(
                    custom_css = '', ),
                trash = immich_python_sdk.models.system_config_trash_dto.SystemConfigTrashDto(
                    days = 0, 
                    enabled = True, ),
                user = immich_python_sdk.models.system_config_user_dto.SystemConfigUserDto(
                    delete_delay = 1, )
            )
        else:
            return SystemConfigDto(
                backup = immich_python_sdk.models.system_config_backups_dto.SystemConfigBackupsDto(
                    database = immich_python_sdk.models.database_backup_config.DatabaseBackupConfig(
                        cron_expression = '', 
                        enabled = True, 
                        keep_last_amount = 1, ), ),
                ffmpeg = immich_python_sdk.models.system_config_f_fmpeg_dto.SystemConfigFFmpegDto(
                    accel = null, 
                    accel_decode = True, 
                    accepted_audio_codecs = [
                        'mp3'
                        ], 
                    accepted_containers = [
                        'mov'
                        ], 
                    accepted_video_codecs = [
                        'h264'
                        ], 
                    bframes = -1, 
                    cq_mode = null, 
                    crf = 0, 
                    gop_size = 0, 
                    max_bitrate = '', 
                    preferred_hw_device = '', 
                    preset = '', 
                    refs = 0, 
                    target_audio_codec = null, 
                    target_resolution = '', 
                    target_video_codec = null, 
                    temporal_aq = True, 
                    threads = 0, 
                    tonemap = null, 
                    transcode = null, 
                    two_pass = True, ),
                image = immich_python_sdk.models.system_config_image_dto.SystemConfigImageDto(
                    colorspace = null, 
                    extract_embedded = True, 
                    fullsize = immich_python_sdk.models.system_config_generated_fullsize_image_dto.SystemConfigGeneratedFullsizeImageDto(
                        enabled = True, 
                        format = null, 
                        quality = 1, ), 
                    preview = immich_python_sdk.models.system_config_generated_image_dto.SystemConfigGeneratedImageDto(
                        format = null, 
                        quality = 1, 
                        size = 1, ), 
                    thumbnail = immich_python_sdk.models.system_config_generated_image_dto.SystemConfigGeneratedImageDto(
                        format = null, 
                        quality = 1, 
                        size = 1, ), ),
                job = immich_python_sdk.models.system_config_job_dto.SystemConfigJobDto(
                    background_task = immich_python_sdk.models.job_settings_dto.JobSettingsDto(
                        concurrency = 1, ), 
                    face_detection = immich_python_sdk.models.job_settings_dto.JobSettingsDto(
                        concurrency = 1, ), 
                    library = , 
                    metadata_extraction = , 
                    migration = , 
                    notifications = , 
                    search = , 
                    sidecar = , 
                    smart_search = , 
                    thumbnail_generation = , 
                    video_conversion = , ),
                library = immich_python_sdk.models.system_config_library_dto.SystemConfigLibraryDto(
                    scan = immich_python_sdk.models.system_config_library_scan_dto.SystemConfigLibraryScanDto(
                        cron_expression = '', 
                        enabled = True, ), 
                    watch = immich_python_sdk.models.system_config_library_watch_dto.SystemConfigLibraryWatchDto(
                        enabled = True, ), ),
                logging = immich_python_sdk.models.system_config_logging_dto.SystemConfigLoggingDto(
                    enabled = True, 
                    level = null, ),
                machine_learning = immich_python_sdk.models.system_config_machine_learning_dto.SystemConfigMachineLearningDto(
                    clip = immich_python_sdk.models.clip_config.CLIPConfig(
                        enabled = True, 
                        model_name = '', ), 
                    duplicate_detection = immich_python_sdk.models.duplicate_detection_config.DuplicateDetectionConfig(
                        enabled = True, 
                        max_distance = 0.001, ), 
                    enabled = True, 
                    facial_recognition = immich_python_sdk.models.facial_recognition_config.FacialRecognitionConfig(
                        enabled = True, 
                        max_distance = 0.1, 
                        min_faces = 1, 
                        min_score = 0.1, 
                        model_name = '', ), 
                    url = '', 
                    urls = [
                        ''
                        ], ),
                map = immich_python_sdk.models.system_config_map_dto.SystemConfigMapDto(
                    dark_style = '', 
                    enabled = True, 
                    light_style = '', ),
                metadata = immich_python_sdk.models.system_config_metadata_dto.SystemConfigMetadataDto(
                    faces = immich_python_sdk.models.system_config_faces_dto.SystemConfigFacesDto(
                        import = True, ), ),
                new_version_check = immich_python_sdk.models.system_config_new_version_check_dto.SystemConfigNewVersionCheckDto(
                    enabled = True, ),
                notifications = immich_python_sdk.models.system_config_notifications_dto.SystemConfigNotificationsDto(
                    smtp = immich_python_sdk.models.system_config_smtp_dto.SystemConfigSmtpDto(
                        enabled = True, 
                        from = '', 
                        reply_to = '', 
                        transport = immich_python_sdk.models.system_config_smtp_transport_dto.SystemConfigSmtpTransportDto(
                            host = '', 
                            ignore_cert = True, 
                            password = '', 
                            port = 0, 
                            username = '', ), ), ),
                oauth = immich_python_sdk.models.system_config_o_auth_dto.SystemConfigOAuthDto(
                    auto_launch = True, 
                    auto_register = True, 
                    button_text = '', 
                    client_id = '', 
                    client_secret = '', 
                    default_storage_quota = 0, 
                    enabled = True, 
                    issuer_url = '', 
                    mobile_override_enabled = True, 
                    mobile_redirect_uri = '', 
                    profile_signing_algorithm = '', 
                    scope = '', 
                    signing_algorithm = '', 
                    storage_label_claim = '', 
                    storage_quota_claim = '', 
                    timeout = 1, 
                    token_endpoint_auth_method = null, ),
                password_login = immich_python_sdk.models.system_config_password_login_dto.SystemConfigPasswordLoginDto(
                    enabled = True, ),
                reverse_geocoding = immich_python_sdk.models.system_config_reverse_geocoding_dto.SystemConfigReverseGeocodingDto(
                    enabled = True, ),
                server = immich_python_sdk.models.system_config_server_dto.SystemConfigServerDto(
                    external_domain = '', 
                    login_page_message = '', 
                    public_users = True, ),
                storage_template = immich_python_sdk.models.system_config_storage_template_dto.SystemConfigStorageTemplateDto(
                    enabled = True, 
                    hash_verification_enabled = True, 
                    template = '', ),
                templates = immich_python_sdk.models.system_config_templates_dto.SystemConfigTemplatesDto(
                    email = immich_python_sdk.models.system_config_template_emails_dto.SystemConfigTemplateEmailsDto(
                        album_invite_template = '', 
                        album_update_template = '', 
                        welcome_template = '', ), ),
                theme = immich_python_sdk.models.system_config_theme_dto.SystemConfigThemeDto(
                    custom_css = '', ),
                trash = immich_python_sdk.models.system_config_trash_dto.SystemConfigTrashDto(
                    days = 0, 
                    enabled = True, ),
                user = immich_python_sdk.models.system_config_user_dto.SystemConfigUserDto(
                    delete_delay = 1, ),
        )
        """

    def testSystemConfigDto(self):
        """Test SystemConfigDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
