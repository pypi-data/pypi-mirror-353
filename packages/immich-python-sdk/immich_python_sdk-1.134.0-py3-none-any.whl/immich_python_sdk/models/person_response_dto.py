# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.134.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PersonResponseDto(BaseModel):
    """
    PersonResponseDto
    """ # noqa: E501
    birth_date: Optional[date] = Field(alias="birthDate")
    color: Optional[StrictStr] = Field(default=None, description="This property was added in v1.126.0")
    id: StrictStr
    is_favorite: Optional[StrictBool] = Field(default=None, description="This property was added in v1.126.0", alias="isFavorite")
    is_hidden: StrictBool = Field(alias="isHidden")
    name: StrictStr
    thumbnail_path: StrictStr = Field(alias="thumbnailPath")
    updated_at: Optional[datetime] = Field(default=None, description="This property was added in v1.107.0", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["birthDate", "color", "id", "isFavorite", "isHidden", "name", "thumbnailPath", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if birth_date (nullable) is None
        # and model_fields_set contains the field
        if self.birth_date is None and "birth_date" in self.model_fields_set:
            _dict['birthDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "birthDate": obj.get("birthDate"),
            "color": obj.get("color"),
            "id": obj.get("id"),
            "isFavorite": obj.get("isFavorite"),
            "isHidden": obj.get("isHidden"),
            "name": obj.get("name"),
            "thumbnailPath": obj.get("thumbnailPath"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


