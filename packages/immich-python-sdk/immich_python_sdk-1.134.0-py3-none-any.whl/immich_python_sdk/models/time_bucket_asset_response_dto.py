# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.134.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from immich_python_sdk.models.asset_visibility import AssetVisibility
from typing import Optional, Set
from typing_extensions import Self

class TimeBucketAssetResponseDto(BaseModel):
    """
    TimeBucketAssetResponseDto
    """ # noqa: E501
    city: List[Optional[StrictStr]]
    country: List[Optional[StrictStr]]
    duration: List[Optional[StrictStr]]
    id: List[StrictStr]
    is_favorite: List[StrictBool] = Field(alias="isFavorite")
    is_image: List[StrictBool] = Field(alias="isImage")
    is_trashed: List[StrictBool] = Field(alias="isTrashed")
    live_photo_video_id: List[Optional[StrictStr]] = Field(alias="livePhotoVideoId")
    local_date_time: List[StrictStr] = Field(alias="localDateTime")
    owner_id: List[StrictStr] = Field(alias="ownerId")
    projection_type: List[Optional[StrictStr]] = Field(alias="projectionType")
    ratio: List[Union[StrictFloat, StrictInt]]
    stack: Optional[List[Optional[Annotated[List[StrictStr], Field(min_length=2, max_length=2)]]]] = Field(default=None, description="(stack ID, stack asset count) tuple")
    thumbhash: List[Optional[StrictStr]]
    visibility: List[AssetVisibility]
    __properties: ClassVar[List[str]] = ["city", "country", "duration", "id", "isFavorite", "isImage", "isTrashed", "livePhotoVideoId", "localDateTime", "ownerId", "projectionType", "ratio", "stack", "thumbhash", "visibility"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeBucketAssetResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeBucketAssetResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "country": obj.get("country"),
            "duration": obj.get("duration"),
            "id": obj.get("id"),
            "isFavorite": obj.get("isFavorite"),
            "isImage": obj.get("isImage"),
            "isTrashed": obj.get("isTrashed"),
            "livePhotoVideoId": obj.get("livePhotoVideoId"),
            "localDateTime": obj.get("localDateTime"),
            "ownerId": obj.get("ownerId"),
            "projectionType": obj.get("projectionType"),
            "ratio": obj.get("ratio"),
            "stack": obj.get("stack"),
            "thumbhash": obj.get("thumbhash"),
            "visibility": obj.get("visibility")
        })
        return _obj


