# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.134.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from immich_python_sdk.models.download_response import DownloadResponse
from immich_python_sdk.models.email_notifications_response import EmailNotificationsResponse
from immich_python_sdk.models.folders_response import FoldersResponse
from immich_python_sdk.models.memories_response import MemoriesResponse
from immich_python_sdk.models.people_response import PeopleResponse
from immich_python_sdk.models.purchase_response import PurchaseResponse
from immich_python_sdk.models.ratings_response import RatingsResponse
from immich_python_sdk.models.shared_links_response import SharedLinksResponse
from immich_python_sdk.models.tags_response import TagsResponse
from typing import Optional, Set
from typing_extensions import Self

class UserPreferencesResponseDto(BaseModel):
    """
    UserPreferencesResponseDto
    """ # noqa: E501
    download: DownloadResponse
    email_notifications: EmailNotificationsResponse = Field(alias="emailNotifications")
    folders: FoldersResponse
    memories: MemoriesResponse
    people: PeopleResponse
    purchase: PurchaseResponse
    ratings: RatingsResponse
    shared_links: SharedLinksResponse = Field(alias="sharedLinks")
    tags: TagsResponse
    __properties: ClassVar[List[str]] = ["download", "emailNotifications", "folders", "memories", "people", "purchase", "ratings", "sharedLinks", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserPreferencesResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of download
        if self.download:
            _dict['download'] = self.download.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_notifications
        if self.email_notifications:
            _dict['emailNotifications'] = self.email_notifications.to_dict()
        # override the default output from pydantic by calling `to_dict()` of folders
        if self.folders:
            _dict['folders'] = self.folders.to_dict()
        # override the default output from pydantic by calling `to_dict()` of memories
        if self.memories:
            _dict['memories'] = self.memories.to_dict()
        # override the default output from pydantic by calling `to_dict()` of people
        if self.people:
            _dict['people'] = self.people.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchase
        if self.purchase:
            _dict['purchase'] = self.purchase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ratings
        if self.ratings:
            _dict['ratings'] = self.ratings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shared_links
        if self.shared_links:
            _dict['sharedLinks'] = self.shared_links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserPreferencesResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "download": DownloadResponse.from_dict(obj["download"]) if obj.get("download") is not None else None,
            "emailNotifications": EmailNotificationsResponse.from_dict(obj["emailNotifications"]) if obj.get("emailNotifications") is not None else None,
            "folders": FoldersResponse.from_dict(obj["folders"]) if obj.get("folders") is not None else None,
            "memories": MemoriesResponse.from_dict(obj["memories"]) if obj.get("memories") is not None else None,
            "people": PeopleResponse.from_dict(obj["people"]) if obj.get("people") is not None else None,
            "purchase": PurchaseResponse.from_dict(obj["purchase"]) if obj.get("purchase") is not None else None,
            "ratings": RatingsResponse.from_dict(obj["ratings"]) if obj.get("ratings") is not None else None,
            "sharedLinks": SharedLinksResponse.from_dict(obj["sharedLinks"]) if obj.get("sharedLinks") is not None else None,
            "tags": TagsResponse.from_dict(obj["tags"]) if obj.get("tags") is not None else None
        })
        return _obj


