# # # numpyp/__init__.py
# #
# # import os
# # from dotenv import load_dotenv
# # from .telegram_handler import _TelegramHandler
# #
# # # ... (–∫–æ–¥ _telegram_instance –∏ _auto_initialize_if_needed –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
# # _telegram_instance: _TelegramHandler | None = None
# #
# #
# # def _auto_initialize_if_needed():
# #     # –≠–¢–û–¢ –ö–û–î –ù–ï –ú–ï–ù–Ø–ï–¢–°–Ø
# #     global _telegram_instance
# #     if _telegram_instance: return
# #     print("üîß –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ Telegram-—Ñ—É–Ω–∫—Ü–∏–∏. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞...")
# #     library_path = os.path.dirname(__file__)
# #     dotenv_path = os.path.join(library_path, '.env')
# #     if not os.path.exists(dotenv_path): raise FileNotFoundError(
# #         f"–ù–µ –Ω–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏! –ü–æ–º–µ—Å—Ç–∏—Ç–µ .env –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏: {library_path}")
# #     load_dotenv(dotenv_path=dotenv_path)
# #     token = os.getenv("TELEGRAM_TOKEN")
# #     chat_id = os.getenv("TELEGRAM_CHAT_ID")
# #     if not token or not chat_id: raise ValueError("TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ.")
# #     _telegram_instance = _TelegramHandler(token=token, chat_id=chat_id)
# #     print("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ .env —Ñ–∞–π–ª–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.")
# #
# #
# # # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
# #
# # async def call(text: str):
# #     """
# #     –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Telegram-—á–∞—Ç.
# #     """
# #     _auto_initialize_if_needed()
# #     # –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å –Ω—É–∂–µ–Ω await
# #     await _telegram_instance.send_message(text)
# #
# #
# # async def ans() -> str | None:
# #     """
# #     –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
# #     """
# #     _auto_initialize_if_needed()
# #     # –ò –∑–¥–µ—Å—å —Ç–æ–∂–µ –Ω—É–∂–µ–Ω await
# #     reply = await _telegram_instance.check_for_reply()
# #
# #     if reply:
# #         print(f"–û—Ç–≤–µ—Ç: {reply}")
# #     else:
# #         print("–û—Ç–≤–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç.")
# #
# #     return reply  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
# # numpyp/__init__.py
#
# # numpyp/__init__.py
#
# import os
# from dotenv import load_dotenv
# from .telegram_handler import _TelegramHandler
#
# # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–¥—É–ª—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
# _telegram_instance: _TelegramHandler | None = None
#
#
# def _auto_initialize_if_needed():
#     """
#     –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–¥—É–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ,
#     –∑–∞–≥—Ä—É–∂–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ª–µ–∂–∏—Ç –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
#     """
#     global _telegram_instance
#     if _telegram_instance:
#         return
#
#     print("üîß –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞...")
#
#     # –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∞–º–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
#     library_path = os.path.dirname(__file__)
#     dotenv_path = os.path.join(library_path, '.env')
#
#     if not os.path.exists(dotenv_path):
#         raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏! –ü–æ–º–µ—Å—Ç–∏—Ç–µ .env –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏: {library_path}")
#
#     load_dotenv(dotenv_path=dotenv_path)
#
#     # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
#     token = os.getenv("TELEGRAM_TOKEN")
#     chat_id = os.getenv("TELEGRAM_CHAT_ID")
#     redis_host = os.getenv("REDIS_HOST")
#     redis_port_str = os.getenv("REDIS_PORT")
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –ø—É—Å—Ç–æ–µ
#     if not all([token, chat_id, redis_host, redis_port_str]):
#         raise ValueError(
#             "–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, REDIS_HOST, REDIS_PORT) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã –≤ .env —Ñ–∞–π–ª–µ."
#         )
#
#     # –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ redis_port_str –Ω–µ –ø—É—Å—Ç–æ–π, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ —á–∏—Å–ª–æ
#     try:
#         redis_port = int(redis_port_str)
#     except ValueError:
#         raise TypeError(f"–ó–Ω–∞—á–µ–Ω–∏–µ REDIS_PORT ('{redis_port_str}') –≤ .env —Ñ–∞–π–ª–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º.")
#
#     # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
#     _telegram_instance = _TelegramHandler(token=token, chat_id=chat_id, redis_host=redis_host, redis_port=redis_port)
#     print("‚úÖ –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
#
#
# async def call(text: str, task_id: str):
#     """
#     –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID.
#     :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
#     :param task_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.
#     """
#     _auto_initialize_if_needed()
#     await _telegram_instance.send_message(text, task_id)
#
#
# async def ans(task_id: str) -> str | None:
#     """
#     –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID.
#     :param task_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏, –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –º—ã –∂–¥–µ–º.
#     """
#     _auto_initialize_if_needed()
#     reply = await _telegram_instance.check_for_reply(task_id)
#
#     if reply:
#         print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_id}': {reply}")
#     else:
#         print(f"–û—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_id}' –ø–æ–∫–∞ –Ω–µ—Ç.")
#
#     return reply

import os
from dotenv import load_dotenv
from .telegram_handler import _TelegramHandler

_telegram_instance: _TelegramHandler | None = None


def _auto_initialize_if_needed():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–¥—É–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ,
    –∑–∞–≥—Ä—É–∂–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ª–µ–∂–∏—Ç –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
    """
    global _telegram_instance
    if _telegram_instance:
        return

    print("üîß –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞...")

    library_path = os.path.dirname(__file__)
    dotenv_path = os.path.join(library_path, '.env')

    if not os.path.exists(dotenv_path):
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏! –ü–æ–º–µ—Å—Ç–∏—Ç–µ .env –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏: {library_path}")

    load_dotenv(dotenv_path=dotenv_path)

    token = os.getenv("TELEGRAM_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")
    redis_host = os.getenv("REDIS_HOST")
    redis_port_str = os.getenv("REDIS_PORT")

    if not all([token, chat_id, redis_host, redis_port_str]):
        raise ValueError(
            "–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, REDIS_HOST, REDIS_PORT) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã –≤ .env —Ñ–∞–π–ª–µ.")

    try:
        redis_port = int(redis_port_str)
    except ValueError:
        raise TypeError(f"–ó–Ω–∞—á–µ–Ω–∏–µ REDIS_PORT ('{redis_port_str}') –≤ .env —Ñ–∞–π–ª–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º.")

    _telegram_instance = _TelegramHandler(token=token, chat_id=chat_id, redis_host=redis_host, redis_port=redis_port)
    print("‚úÖ –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")


async def call(text: str, task_id: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID.
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param task_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.
    """
    _auto_initialize_if_needed()
    await _telegram_instance.send_message(text, task_id)


async def ans(task_id: str) -> dict | None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–≤–µ—Ç–µ –∏–ª–∏ None.
    """
    _auto_initialize_if_needed()
    reply_data = await _telegram_instance.check_for_reply(task_id)

    if reply_data:
        username = reply_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç @{username} –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_id}': {reply_data['text']}")
    else:
        print(f"–û—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_id}' –ø–æ–∫–∞ –Ω–µ—Ç.")

    return reply_data