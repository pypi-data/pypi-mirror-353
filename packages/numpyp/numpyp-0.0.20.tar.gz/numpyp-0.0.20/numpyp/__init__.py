# # numpyp/__init__.py
#
# import os
# from dotenv import load_dotenv
# from .telegram_handler import _TelegramHandler
#
# # ... (–∫–æ–¥ _telegram_instance –∏ _auto_initialize_if_needed –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
# _telegram_instance: _TelegramHandler | None = None
#
#
# def _auto_initialize_if_needed():
#     # –≠–¢–û–¢ –ö–û–î –ù–ï –ú–ï–ù–Ø–ï–¢–°–Ø
#     global _telegram_instance
#     if _telegram_instance: return
#     print("üîß –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ Telegram-—Ñ—É–Ω–∫—Ü–∏–∏. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞...")
#     library_path = os.path.dirname(__file__)
#     dotenv_path = os.path.join(library_path, '.env')
#     if not os.path.exists(dotenv_path): raise FileNotFoundError(
#         f"–ù–µ –Ω–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏! –ü–æ–º–µ—Å—Ç–∏—Ç–µ .env –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏: {library_path}")
#     load_dotenv(dotenv_path=dotenv_path)
#     token = os.getenv("TELEGRAM_TOKEN")
#     chat_id = os.getenv("TELEGRAM_CHAT_ID")
#     if not token or not chat_id: raise ValueError("TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ.")
#     _telegram_instance = _TelegramHandler(token=token, chat_id=chat_id)
#     print("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ .env —Ñ–∞–π–ª–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.")
#
#
# # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
#
# async def call(text: str):
#     """
#     –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Telegram-—á–∞—Ç.
#     """
#     _auto_initialize_if_needed()
#     # –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å –Ω—É–∂–µ–Ω await
#     await _telegram_instance.send_message(text)
#
#
# async def ans() -> str | None:
#     """
#     –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
#     """
#     _auto_initialize_if_needed()
#     # –ò –∑–¥–µ—Å—å —Ç–æ–∂–µ –Ω—É–∂–µ–Ω await
#     reply = await _telegram_instance.check_for_reply()
#
#     if reply:
#         print(f"–û—Ç–≤–µ—Ç: {reply}")
#     else:
#         print("–û—Ç–≤–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç.")
#
#     return reply  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ

import os
from dotenv import load_dotenv
from .telegram_handler import _TelegramHandler

_telegram_instance: _TelegramHandler | None = None


def _auto_initialize_if_needed():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–¥—É–ª—å, –∑–∞–≥—Ä—É–∂–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞."""
    global _telegram_instance
    if _telegram_instance:
        return

    print("üîß –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞...")

    library_path = os.path.dirname(__file__)
    dotenv_path = os.path.join(library_path, '.env')

    if not os.path.exists(dotenv_path):
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏! –ü–æ–º–µ—Å—Ç–∏—Ç–µ .env –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏: {library_path}")

    load_dotenv(dotenv_path=dotenv_path)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    token = os.getenv("TELEGRAM_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")
    redis_host = os.getenv("REDIS_HOST")
    redis_port = int(os.getenv("REDIS_PORT"))

    if not all([token, chat_id, redis_host, redis_port]):
        raise ValueError(
            "–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, REDIS_HOST, REDIS_PORT) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")

    _telegram_instance = _TelegramHandler(token=token, chat_id=chat_id, redis_host=redis_host, redis_port=redis_port)
    print("‚úÖ –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")


async def call(text: str, task_id: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID.
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param task_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.
    """
    _auto_initialize_if_needed()
    await _telegram_instance.send_message(text, task_id)


async def ans(task_id: str) -> str | None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID.
    :param task_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏, –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –º—ã –∂–¥–µ–º.
    """
    _auto_initialize_if_needed()
    reply = await _telegram_instance.check_for_reply(task_id)

    if reply:
        print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_id}': {reply}")
    else:
        print(f"–û—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_id}' –ø–æ–∫–∞ –Ω–µ—Ç.")

    return reply