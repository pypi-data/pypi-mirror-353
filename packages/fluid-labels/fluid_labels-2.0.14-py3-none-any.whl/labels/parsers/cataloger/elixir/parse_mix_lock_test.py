from io import BytesIO, TextIOWrapper
from pathlib import Path

from labels.model.file import Coordinates, DependencyType, Location, LocationReadCloser, Scope
from labels.model.package import Language, Package, PackageType
from labels.parsers.cataloger.elixir.parse_mix_lock import build_location, parse_mix_lock
from labels.testing.utils.helpers import get_test_data_path
from labels.utils.file import new_location


def test_parse_mix_lock() -> None:
    test_data_path = get_test_data_path("dependencies/elixir/mix.lock")
    expected_packages = [
        Package(
            name="castore",
            version="0.1.17",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=2,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/castore@0.1.17",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="connection",
            version="1.1.0",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=3,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/connection@1.1.0",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="cowboy",
            version="2.9.0",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=4,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/cowboy@2.9.0",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="cowboy_telemetry",
            version="0.4.0",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=5,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/cowboy_telemetry@0.4.0",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="cowlib",
            version="2.11.0",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=6,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/cowlib@2.11.0",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="db_connection",
            version="2.4.2",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=7,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/db_connection@2.4.2",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="decimal",
            version="2.0.0",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=8,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/decimal@2.0.0",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="earmark_parser",
            version="1.4.25",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=9,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/earmark_parser@1.4.25",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="ecto",
            version="3.8.1",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=10,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/ecto@3.8.1",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="ecto_sql",
            version="3.8.1",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=11,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/ecto_sql@3.8.1",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="esbuild",
            version="0.5.0",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=12,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/esbuild@0.5.0",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="ex_doc",
            version="0.28.4",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=13,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/ex_doc@0.28.4",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="gettext",
            version="0.19.1",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=14,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/gettext@0.19.1",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="hpax",
            version="0.1.1",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=15,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/hpax@0.1.1",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
        Package(
            name="jason",
            version="1.3.0",
            locations=[
                Location(
                    coordinates=Coordinates(
                        real_path=test_data_path,
                        file_system_id=None,
                        line=16,
                    ),
                    dependency_type=DependencyType.DIRECT,
                    access_path=test_data_path,
                    annotations={},
                ),
            ],
            language=Language.ELIXIR,
            licenses=[],
            type=PackageType.HexPkg,
            metadata=None,
            p_url="pkg:hex/jason@1.3.0",
            dependencies=None,
            found_by=None,
            health_metadata=None,
        ),
    ]
    with Path(test_data_path).open(encoding="utf-8") as reader:
        pkgs, _ = parse_mix_lock(
            None,
            None,
            LocationReadCloser(location=new_location(test_data_path), read_closer=reader),
        )
        assert pkgs == expected_packages


def test_build_location_without_coordinates() -> None:
    test_data_path = get_test_data_path("dependencies/elixir/mix.lock")
    content = b"test content"
    reader = TextIOWrapper(BytesIO(content))
    location = new_location(test_data_path)
    location.coordinates = None
    reader_obj = LocationReadCloser(location=location, read_closer=reader)

    result = build_location(reader_obj, 1)

    assert result.coordinates is None
    assert result.dependency_type == DependencyType.UNKNOWN
    assert result.scope == Scope.PROD
