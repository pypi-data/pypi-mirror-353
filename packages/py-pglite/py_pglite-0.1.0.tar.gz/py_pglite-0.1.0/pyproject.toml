[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "py-pglite"
dynamic = ["version"]
description = "Python testing library for PGlite - in-memory PostgreSQL for tests"
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.10"
authors = [
    { name = "Wey Gu", email = "weyl.gu@gmail.com" },
]
keywords = [
    "testing",
    "postgresql",
    "pglite",
    "database",
    "pytest",
    "sqlalchemy",
    "sqlmodel",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "sqlalchemy>=2.0.41",
    "psycopg>=3.0.0",
    "psutil>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=6.1.1",
    "sqlmodel>=0.0.24",
    "fastapi>=0.115.12",
    "mypy>=1.16.0",
    "ruff>=0.11.12",
    "build>=1.2.2.post1",
    "twine>=6.1.0",
    "bandit[toml]>=1.8.3",
    "safety>=3.5.2",
]
sqlmodel = [
    "sqlmodel>=0.0.24",
]
fastapi = [
    "fastapi>=0.115.12",
    "sqlmodel>=0.0.24",
]

[project.urls]
Homepage = "https://github.com/wey-gu/py-pglite"
Documentation = "https://github.com/wey-gu/py-pglite#readme"
Repository = "https://github.com/wey-gu/py-pglite"
Issues = "https://github.com/wey-gu/py-pglite/issues"

[project.entry-points.pytest11]
py_pglite = "py_pglite.fixtures"

[tool.hatch.version]
path = "py_pglite/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["py_pglite"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.ruff.format]

quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.coverage.run]
source = ["py_pglite"]
omit = [
    "*/tests/*",
    "*/test_*",
    "examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov" 