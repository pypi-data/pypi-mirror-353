expression = { for_expression | if_expression | let_expression | binary_expression | comment_expression }

binary_expression = { comment_expression* ~ whitespace* ~ term ~ (whitespace* ~ operator ~ whitespace* ~ term)* }

term = _{ for_expression | if_expression | let_expression | unary_expression | postfix }

unary_expression = { "not" ~ whitespace+ ~ binary_expression }

postfix = _{ primary ~ (postfix_op)* }
postfix_op = _{ field | index | call }

field = { "." ~ ident }
index = { "[" ~ expression ~ "]" }
call = {
    "(" ~ whitespace* ~ call_args? ~ whitespace* ~ ")"
}

call_args = _{ call_arg ~ (whitespace* ~ "," ~ whitespace* ~ call_arg)* }
call_arg = _{ kw_arg | pos_arg }
pos_arg = { expression }
kw_arg = { ident ~ whitespace* ~ "=" ~ whitespace* ~ expression }

primary = _{ "(" ~ expression ~ ")" | component | string | integer | boolean | ident }
component = { "<" ~ (!"/>" ~ ANY)* ~ "/>" }

operator = { "+" | "-" | "*" | "/" | "and" | "or" | "==" | "!=" | ">=" | "<=" | ">" | "<" }
boolean = { "true" | "false" }
integer = @{ (ASCII_DIGIT | "_")+ }
string = @{ "\"" ~ (escape_sequence | !("\"" | "\\") ~ ANY)* ~ "\"" }

keyword = { "for" | "in" | "if" | "else" | "not" | "and" | "or" | "let" }

keyword_spaced = { keyword ~ (whitespace+ | ".") }
ident = { !keyword_spaced ~ ident_raw }
ident_raw = _{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

whitespace = _{ " " | "\t" | "\n" | "\r" | comment_expression }
escape_sequence = { "\\" ~ ( "\"" | "\\" | "n" | "t" | "r" ) }

if_expression = {
    "if " ~ whitespace* ~ binary_expression ~ whitespace* ~ block ~ (whitespace* ~ "else" ~ whitespace* ~ block )?
}

for_expression = { "for" ~ whitespace+ ~ ident ~ whitespace+ ~ "in" ~ whitespace+ ~ expression ~ whitespace* ~ block }

let_expression = { "let" ~ whitespace+ ~ ident ~ whitespace* ~ "=" ~ whitespace* ~ expression }

block = { whitespace* ~"{" ~ whitespace* ~ expression ~ whitespace* ~ "}" ~ whitespace* }
comment_expression = _{ "/*" ~ comment ~ "*/" }
comment = { (!"*/" ~ ANY)* }
