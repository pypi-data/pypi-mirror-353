"""Transform Abstract Class."""

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING, List, Optional, Tuple

from pyspark.sql import DataFrame

if TYPE_CHECKING:
    from butterfree.transform.features import Feature


class TransformComponent(ABC):
    """Defines an abstract class for Transform entities.

    Attributes:
        parent: parent transform component.
    """

    def __init__(self) -> None:
        self._parent: Optional[Feature] = None

    @property
    def parent(self) -> "Feature":
        """Parent transform component."""
        return self._parent

    @parent.setter
    def parent(self, parent: None) -> None:
        self._parent = parent

    @property
    @abstractmethod
    def output_columns(self) -> List[str]:
        """Columns generated by the transformation."""

    @abstractmethod
    def transform(self, dataframe: DataFrame) -> DataFrame:
        """Performs a transformation to the feature pipeline.

        Args:
            dataframe: input dataframe.

        Returns:
            Transformed dataframe.
        """

    @abstractmethod
    def get_names_and_types(self) -> List[Tuple[str, str]]:
        """Get the names and types generated by the transformation."""
        pass
