[build-system]
requires = ["setuptools >= 64.0"]
build-backend = "setuptools.build_meta"


[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "UP",  # pyupgrade
    "PL",  # pylint
    # "ERA",  # eradicate (commented-out code) (FIX)
    "PERF",  # Perflint
    "FURB",  # refurb
    "RUF",  # ruff-specific rules
    "A",  # flake8-builtins,
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    # "DTZ",  # flake8-datetimez (FIX?)
    "FLY",  # flynt (FLY)
    "LOG",  # flake8-logging
    "PIE",  # flake8-piej
    "PYI",  # flake8-pyi
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long
    "E722",  # bare-except (FIX)
    "E731",  # lambda-assignment (FIX?)
    "E741",  # ambiguous-variable-name
    "PLW0603",  # global-statement
    "PLW2901",  # redefined-loop-name (FIX)
    "PLR09",  # "too many ..." warnings from pylint
    "PLR2004",  # magic-value-comparison
    "PLR5501",  # collapsible-else-if
    "UP012",  # unnecessary-encode-utf8
    "UP015",  # redundant-open-modes
    "PERF401",  # manual-list-comprehension
    "PERF203",  # try-except-in-loop
    "RUF005",  # collection-literal-concatenation (FIX?)
    "RUF012",  # mutable-class-default (FIX?)
    "RUF015",  # unnecessary-iterable-allocation-for-first-element
    "SIM102",  # collapsible-if
    "SIM108",  # Use ternary if operator
    "SIM910",  # dict-get-with-none-default
]

[tool.ruff.lint.isort]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]
known-first-party= [
    "idea-format",
    "ipranges",
    "pydgets",
    "pynspect",
    "pyzenkit",
    "typedcols",
]
known-local-folder = ["hawat", "mentat"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["flask_babel.lazy_gettext"]

[tool.mypy]
plugins = "sqlalchemy.ext.mypy.plugin"

warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
extra_checks = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
no_implicit_reexport = true
warn_return_any = true

[[tool.mypy.overrides]]  # Submodules with strict type checking
module = [
    "hawat.charts.*",
    "hawat.blueprints.pivot.*"
]
check_untyped_defs = true
disallow_subclassing_any = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]  # Turn off strict type checking for tests
module = "*.test.*"
check_untyped_defs = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_defs = false
no_implicit_reexport = false

[[tool.mypy.overrides]]  # Libraries without available stubs
module = [
    "ipranges.*",
    "pyzenkit.*",
    "idea.*",
    "typedcols.*",
    "pydgets.*",
    "pynspect.*",
    "wtforms.*",
    "flask_wtf.*",
    "flask_babel.*",
    "flask_sqlalchemy.*",
    "flask_login.*",
    "flask_principal.*",
    "flask_debugtoolbar.*",
    "plotly.*",
    "rrdtool.*"
]
ignore_missing_imports = true


[tool.djlint]
profile = "jinja"
ignore = "H006,H014,H021,H029,H030,H031,T028"
enable = "H017,H035,H036"
max_blank_lines = 3
line_break_after_multiline_tag = true
format_js = true
format_css = true

[tool.djlint.per-file-ignores]
".*\\.(txt|idea)\\.j2" = "H025"
"_macros_site.html" = "H025,T001"


[tool.nose2.unittest]
plugins = "nose2.plugins.junitxml"
start-dir = "lib"
test-file-pattern = "*.py"


[tool.coverage.run]
source = ["./lib"]
