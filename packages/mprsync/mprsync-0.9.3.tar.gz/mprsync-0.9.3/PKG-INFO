Metadata-Version: 2.4
Name: mprsync
Version: 0.9.3
Summary: Run multiple rsync processes in parallel for local/remote data sync
Author-email: Sumedh Wale <sumwale@yahoo.com>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Homepage, https://github.com/sumwale/mprsync
Project-URL: Issues, https://github.com/sumwale/mprsync/issues
Keywords: Multiprocess rsync,Parallel rsync,rsync
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

mprsync or "multiprocess rsync" runs multiple rsync processes concurrently to sync data
much faster over slower and/or high latency networks (e.g. backups across continents)

There are two versions provided: a bash script `mprsync.sh` and a python module `mprsync.sync`
(latter is invoked by the wrapper `mprsync` script installed by `pip/pipx`).


## Features

- fetches affected files/directories in first pass with their sizes to distribute evenly among the
  parallel rsync processes
- curates the rsync options obtained before passing to the first step to skip any
  non-desirable output, so you can use all of rsync options that will only apply to
  subsequent steps
- curates the source locations for the cases of trailing slash vs without slash, with
  or without `-R/--relative` arguments to work correctly in all cases for the fetch path
  list of the first step (sets it apart from other similar utilities out there
  that falter with different combinations of source/destination specifications)
- correctly takes care of deletes and directory metadata changes (if asked in rsync flags)
  unlike other similar utilities
- no dependencies other than bash, rsync and standard POSIX utilities like sed, awk
- python version of the utility (in module `mprsync.sync`) depends on only python >= 3.10 and
  in addition to above, also provides:
  * parallelism between the fetch path phase and the fetch data phase so that the path list
    obtained is pipelined to the rsync jobs on-the-fly taking into account the path sizes sent to
    each job so far (e.g. prioritize the job with smallest total size so far)
  * take care of grouping paths together into `chunk-size` (as per their fetched sizes) so
    that small files (probably in the same directory) do not get strewn across multiple jobs
  * cycles chunks to other threads if a thread is slow to empty its queue
  * up to 2 retries (i.e. total of 3 tries) for each thread rsync job in case it fails due to
    an unexpected reason; permission errors and the like do not count for "unexpected" which
    is determined using a combination of the rsync exit code and the standard error messages

Due to above additional features, the python version should be faster over slow networks when the
number of paths is quite large and the fetch phase ends of taking a significant proportion of the
total time. For most other cases, the performance of the two will be similar.


## Installation

To install the bash version, just download and copy the
[mprsync.sh](https://github.com/sumwale/mprsync/blob/main/mprsync.sh?raw=true) script somewhere
in your `$PATH`. In current Linux distributions a good place is `~/.local/bin` which should be in
`$PATH`. Then provide execute permission to the script (`chmod +x mprsync.sh`).

To install the python version, you can use `pip` (or `pipx` in newer distributions):

```sh
pip/pipx install mprsync
```

You can then run the python version as `mprsync` (assuming `~/.local/bin` is in `$PATH` which is
where `pip/pipx` will normally put the wrapper executable). Note that in newer releases,
installation using `pip` requires doing so in a virtual environment (which `pipx` handles
automatically) unless the flag `--break-system-packages` is used. Since this module depends on
nothing apart from python >= 3.10, you can safely use that flag with `pip`.

Alternatively you can skip all this and just download the
[sync.py](https://github.com/sumwale/mprsync/blob/main/mprsync/sync.py?raw=true) file, then run
it using `python/python3`: `python3 sync.py --jobs=10 <rsync args ...>`


## Usage

None of the additional options added by `mprsync/mprsync.sh` (apart from `-h/--help`) conflict
with rsync options, so you can just mix match them with any required rsync options.
The `-h/--help` option details the additional options:

(for bash script)
```
Usage: mprsync.sh [-h|--help] [-j JOBS|--jobs=JOBS] [--ignore-fetch-errors] [--silent]
       <rsync options> SRC... DEST

Run multiple rsync processes to copy local/remote files and directories

Arguments:
  SRC...                 the source location(s) for rsync
  DEST                   the destination location for rsync

Options:
  -h, --help             show this help message and exit
  -j, --jobs=JOBS        number of parallel jobs to use (default: 8)
  --ignore-fetch-errors  ignore permission or any other errors in the fetch path name
                         phase to continue to fetch data phase
  --silent               don't print any informational messages from mprsync.sh
```

(for python script)
```
usage: mprsync [-h] [-j JOBS] [--chunk-size CHUNK_SIZE] [--silent]

Run multiple rsync processes to copy local/remote files and directories

options:
  -h, --help            show this help message and exit
  -j JOBS, --jobs JOBS  number of parallel jobs to use
  --chunk-size CHUNK_SIZE
                        minimum chunk size (in bytes) for splitting paths among the jobs
  --full-rsync          run a full rsync at the end if any of the rsync processes failed
                        with unexpected errors
  --silent              don't print any informational messages from this program (does not
                        affect rsync output which is governed by its own flags)
```

The additional options need not be placed at the start before rsync ones, but it might
be clearer to do so. For example to run 10 parallel rsync jobs to sync data from a
remote server to local:

```sh
mprsync.sh --jobs=10 -aH --info=progress2 <user>@<server>:/data/ data/
```

Or using the python script with higher chunk size and with `zstd` compression level 1:


```sh
mprsync -j 10 --chunk-size=16777216 -aH --zc=zstd --zl=1 --info=progress2 <user>@<server>:/data/ data/
```

### CPU usage with compression

When using compression, in some cases the CPU on the server or client can turn
into a bottleneck due to multiple concurrent rsync processes. For instance, running
10 jobs with gzip compression (`-z` option to rsync) on an entry-level online storage
box or a basic online VPS storage can easily run into severe CPU bottlenecks on the
storage nodes especially for downloads requiring compression on the server.

If you are not getting expected benefits in download/upload performance compared to
plain rsync, then this may be a cause. Hence it may be better to reduce the compression
level when running `mprsync/mprsync.sh` compared to the usual rsync usage and/or reduce the
number of jobs.

Recent versions of rsync allow for using `zstd` or `lz4` algorithms that are much
lighter on CPU and can provide similar level of compression as gzip. Monitor the
client and server CPU usage, if possible, and start with `--zc=zstd --zl=1` which is
light enough even for modern single/dual core VPS boxes while providing good amount
of compression. Using `lz4` will be fastest (at its default of compression level 1)
but provides the least amount of compression. Comparitively `zstd` level 1 is a bit
more expensive than `lz4` level 1 but has much higher compression. If you need to reduce
bandwidth usage and want to keep higher compression levels, then it is still better to
use `zstd` levels 3-6 that usually give better compression than gzip (`-z`)
with much lower CPU usage, and then reduce the number of parallel jobs.

A note about SSH options: you might get better performance when using SSH transport using AES-GCM
ciphers when client and server support AES-NI acceleration (`grep -w aes /proc/cpuinfo`) like:
`mprsync ... --zc=zstd --zl=1 -e "ssh -o Compression=no -c aes256-gcm@openssh.com" ...`


### Some numbers

Here is a brief comparison of python mprsync vs mprsync.sh vs rsync on a 200Mbps link
pulling data from a backup from across continent (Europe to Asia). The local destination
is empty for all these runs.

This first one is around 13.1GB of data having 442K files most of which are small.

python mprsync:
```
> time python3 mprsync/sync.py -j 10 --info=progress2 --zc=zstd --zl=1 --delete -aHSOJ -e "ssh -o Compression=no -c aes256-gcm@openssh.com" <remote source> <local destination>
Using rsync executable from /usr/bin/rsync
Running up to 10 parallel rsync jobs with paths split into 8388608 byte chunks (as per the sizes on source) ...
...
Executed in  385.86 secs    fish           external
```

mprsync.sh:
```
> time mprsync.sh -j 10 --ignore-fetch-errors --info=progress2 --zc=zstd --zl=1 --delete -aHSOJ -e "ssh -o Compression=no -c aes256-gcm@openssh.com" <remote source> <local destination>
Fetching the list of paths to be updated and/or deleted ...
...
Executed in  456.80 secs    fish           external
```

rsync:
```
> time rsync --info=progress2 --zc=zstd --zl=8 --delete -aHSOJ -e "ssh -o Compression=no -c aes256-gcm@openssh.com" <remote source> <local destination>
...
Executed in   17.47 mins    fish           external
```

For this case the python version is about 1.2X faster than the bash version and about 2.7X
faster than plain rsync. The 200Mbps link is more than 90% saturated for both the python
and bash scripts once the parallel rsync processes start (except at the tail end), while
it is less than 30% full with rsync for most of the run but it covers up some of the loss
due to higher compression and doing the sync in a single pass.


The second comparison is for video and picture data of around 13.1GB where the number of
files is only 743. The data is not compressible but the same flags are used as above
(since that is how most users will run these when the type of data is not known) which
does not affect the numbers in any significant way for any of the runs.

python mprsync:
```
> time python3 mprsync/sync.py -j 10 --info=progress2 --zc=zstd --zl=1 --delete -aHSOJ -e "ssh -o Compression=no -c aes256-gcm@openssh.com" sumedh@$BORG_BACKUP_SERVER:vids/ vids/
Using rsync executable from /usr/bin/rsync
Running up to 10 parallel rsync jobs with paths split into 8388608 byte chunks (as per the sizes on source) ...
...
Executed in  617.28 secs    fish           external
```

mprsync.sh:
```
> time mprsync.sh -j 10 --info=progress2 --zc=zstd --zl=1 --delete -aHSOJ -e "ssh -o Compression=no -c aes256-gcm@openssh.com" <remote source> <local destination>

Splitting paths having 13145.65 MB of data into 10 jobs
Running 10 parallel rsync jobs...
...
Executed in  614.17 secs    fish           external
```

rsync:
```
> time rsync --info=progress2 --zc=zstd --zl=8 --delete -aHSOJ -e "ssh -o Compression=no -c aes256-gcm@openssh.com" <remote source> <local destination>
...
Executed in   18.51 mins    fish           external
```

Here the python and bash scripts are similar and about 1.8X faster than plain rsync.
This is to be expected since the python script has an advantage due to pipelining of
path list fetch and parallel rsync data fetch phases, and the first phase has very little
cost for this case.
