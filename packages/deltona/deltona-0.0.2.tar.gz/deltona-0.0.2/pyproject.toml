[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[project]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python",
  "Topic :: Desktop Environment :: K Desktop Environment (KDE)",
  "Topic :: Desktop Environment",
  "Topic :: File Formats",
  "Topic :: Games/Entertainment",
  "Topic :: Internet :: WWW/HTTP :: Browsers",
  "Topic :: Multimedia",
  "Topic :: System :: Hardware",
  "Topic :: System :: Systems Administration",
  "Topic :: Utilities",
  "Typing :: Typed",
]
description = "A lot of uncategorised utilities."
dynamic = ["dependencies", "requires-python"]
keywords = ["bluetooth", "command line", "file management", "git", "multimedia"]
license = "MIT"
name = "deltona"
readme = "README.md"
version = "0.0.2"

[[project.authors]]
email = "audvare@gmail.com"
name = "Andrew Udvare"

[project.scripts]
add-cdda-times = "deltona.commands.media:add_cdda_times_main"
add-info-json = "deltona.commands.media:add_info_json_main"
adp = "deltona.commands.misc:adp_main"
audio2vid = "deltona.commands.media:audio2vid_main"
burnrariso = "deltona.commands.misc:burnrariso_main"
cddb-query = "deltona.commands.media:cddb_query_main"
check-bookmarks-html = "deltona.commands.www:check_bookmarks_html_main"
chrome-bisect-flags = "deltona.commands.www:chrome_bisect_flags_main"
clean-old-kernels-modules = "deltona.commands.admin:clean_old_kernels_and_modules_main"
connect-g603 = "deltona.commands.desktop:connect_g603_main"
display-info-json = "deltona.commands.media:display_info_json_main"
encode-dashcam = "deltona.commands.media:encode_dashcam_main"
fix-pwa-icon = "deltona.commands.www:fix_chromium_pwa_icon_main"
flac-album = "deltona.commands.media:flacted_main"
flac-artist = "deltona.commands.media:flacted_main"
flac-dir-finalize = "deltona.commands.media:flac_dir_finalize_main"
flac-genre = "deltona.commands.media:flacted_main"
flac-title = "deltona.commands.media:flacted_main"
flac-track = "deltona.commands.media:flacted_main"
flac-year = "deltona.commands.media:flacted_main"
flacted = "deltona.commands.media:flacted_main"
fullwidth2ascii = "deltona.commands.string:fullwidth2ascii_main"
git-checkout-default-branch = "deltona.commands.git:git_checkout_default_branch_main"
git-co-default-branch = "deltona.commands.git:git_checkout_default_branch_main"
git-open = "deltona.commands.git:git_open_main"
git-rebase-default-branch = "deltona.commands.git:git_rebase_default_branch_main"
gogextract = "deltona.commands.misc:gogextract_main"
hlg2sdr = "deltona.commands.media:hlg2sdr_main"
htmltree = "deltona.commands.admin:generate_html_dir_tree_main"
inhibit-notifications = "deltona.commands.desktop:inhibit_notifications_main"
is-ascii = "deltona.commands.string:is_ascii_main"
is-bin = "deltona.commands.string:is_bin_main"
json2yaml = "deltona.commands.string:json2yaml_main"
kconfig-to-commands = "deltona.commands.admin:kconfig_to_commands_main"
ke-ebook-ex = "deltona.commands.media:ke_ebook_ex_main"
kill-gamescope = "deltona.commands.desktop:kill_gamescope_main"
kill-wine = "deltona.commands.wine:kill_wine_main"
merge-dependabot-prs = "deltona.commands.git:merge_dependabot_prs_main"
mkwineprefix = "deltona.commands.wine:mkwineprefix_main"
mp4json = "deltona.commands.media:add_info_json_main"
mp4json-display = "deltona.commands.media:display_info_json_main"
mpv-sbs = "deltona.commands.desktop:mpv_sbs_main"
mvid-rename = "deltona.commands.media:mvid_rename_main"
netloc = "deltona.commands.string:urldecode_main"
patch-bundle = "deltona.commands.admin:patch_bundle_main"
patch-uiso-font = "deltona.commands.wine:patch_ultraiso_font_main"
pl2json = "deltona.commands.string:pl2json_main"
ripcd = "deltona.commands.media:ripcd_main"
sanitize = "deltona.commands.string:sanitize_main"
set-wine-fonts = "deltona.commands.wine:set_wine_fonts_main"
show-info-json = "deltona.commands.media:display_info_json_main"
slug-rename = "deltona.commands.admin:slug_rename_main"
slugify = "deltona.commands.string:slugify_main"
smv = "deltona.commands.admin:smv_main"
supported-audio-input-formats = "deltona.commands.media:supported_audio_input_formats_main"
systemd-reset-tpm-cryptenroll = "deltona.commands.admin:reset_tpm_enrollments_main"
tbc2srt = "deltona.commands.media:tbc2srt_main"
title-fixer = "deltona.commands.string:title_fixer_main"
trim = "deltona.commands.string:trim_main"
ucwords = "deltona.commands.string:ucwords_main"
uiso = "deltona.commands.media:ultraiso_main"
umpv = "deltona.commands.desktop:umpv_main"
underscorize = "deltona.commands.string:underscorize_main"
unix2wine = "deltona.commands.wine:unix2wine_main"
unpack-0day = "deltona.commands.misc:unpack_0day_main"
unregister-wine-assocs = "deltona.commands.wine:unregister_wine_file_associations_main"
upload-to-imgbb = "deltona.commands.desktop:upload_to_imgbb_main"
urldecode = "deltona.commands.string:urldecode_main"
wait-for-disc = "deltona.commands.media:wait_for_disc_main"
where-from = "deltona.commands.www:where_from_main"
winegoginstall = "deltona.commands.wine:winegoginstall_main"
wineshell = "deltona.commands.wine:wineshell_main"

[project.urls]
Issues = "https://github.com/Tatsh/deltona/issues"
documentation = "https://deltona.readthedocs.org"
homepage = "https://tatsh.github.io/deltona/"
repository = "https://github.com/Tatsh/deltona"

[tool.commitizen]
tag_format = "v$version"
version_files = [
  ".wiswa.jsonnet",
  "CITATION.cff",
  "README.md",
  "deltona/__init__.py",
  "docs/index.rst",
  "man/deltona.1",
  "package.json",
]
version_provider = "pep621"

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:"]
omit = ["conftest.py", "tests.py", "tests/test_*.py", "__main__.py"]
show_missing = true

[tool.coverage.run]
branch = true
omit = ["conftest.py", "tests.py", "tests/test_*.py", "__main__.py"]

[tool.djlint]
max_line_length = 100
no_line_after_yaml = true
preserve_blank_lines = true
preserve_leading_space = true
profile = "jinja"
use_gitignore = true

[tool.doc8]
max-line-length = 100

[tool.mypy]
cache_dir = "~/.cache/mypy"
explicit_package_bases = true
platform = "linux"
python_version = "3.12"
show_column_numbers = true
strict = true
strict_optional = true
warn_unreachable = true

[tool.poetry]
include = ["man", { format = "sdist", path = "tests" }]

[tool.poetry.dependencies]
binaryornot = "^0.4.4"
click = "^8.2.1"
colorlog = "^6.9.0"
keyring = "^25.6.0"
python = ">=3.10,<3.14"
requests = "^2.32.3"
send2trash = "^1.8.3"
typing-extensions = "^4.14.0"

[tool.poetry.dependencies.beautifulsoup4]
optional = true
version = "^4.13.4"

[tool.poetry.dependencies.gitpython]
optional = true
version = "^3.1.44"

[tool.poetry.dependencies.html5lib]
optional = true
version = "^1.1"

[tool.poetry.dependencies.mutagen]
optional = true
version = "^1.47.0"

[tool.poetry.dependencies.paramiko]
optional = true
version = "^3.5.1"

[tool.poetry.dependencies.pexpect]
optional = true
version = "^4.9.0"

[tool.poetry.dependencies.pillow]
optional = true
version = "^11.2.1"

[tool.poetry.dependencies.platformdirs]
optional = true
version = "^4.3.8"

[tool.poetry.dependencies.psutil]
optional = true
version = "^7.0.0"

[tool.poetry.dependencies.pydbus]
optional = true
platform = "linux"
version = "^0.6.0"

[tool.poetry.dependencies.pygithub]
optional = true
version = "^2.6.1"

[tool.poetry.dependencies.pygobject]
optional = true
platform = "linux"
version = "^3.52.3"

[tool.poetry.dependencies.pyperclip]
optional = true
version = "^1.9.0"

[tool.poetry.dependencies.python-xz]
optional = true
version = "^0.5.0"

[tool.poetry.dependencies.pyyaml]
optional = true
version = "^6.0.2"

[tool.poetry.dependencies.unidecode]
optional = true
version = "^1.4.0"

[tool.poetry.dependencies.yt-dlp]
optional = true
version = "^2025.5.22"

[tool.poetry.extras]
admin = ["paramiko"]
desktop = ["pydbus", "pygobject", "pyperclip"]
git = ["gitpython", "pygithub"]
media = ["mutagen", "platformdirs"]
string = ["unidecode", "pyyaml", "yt-dlp"]
wine = ["pexpect", "platformdirs", "psutil", "python-xz"]
www = ["beautifulsoup4", "html5lib", "pillow"]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
commitizen = "^4.8.2"
djlint = "^1.36.4"
mypy = "^1.16.0"
pydbus-stubs = "^0.0.3"
ruff = "^0.11.12"
types-beautifulsoup4 = "^4.12.0.20250516"
types-binaryornot = "^0.4.0.20250507"
types-paramiko = "^3.5.0.20250516"
types-pexpect = "^4.9.0.20250516"
types-pillow = "^10.2.0.20240822"
types-psutil = "^7.0.0.20250601"
types-pyperclip = "^1.9.0.20250218"
types-pyyaml = "^6.0.12.20250516"
types-requests = "^2.32.0.20250602"
types-send2trash = "^1.8.2.7"
yapf = "^0.43.0"
yt-dlp-types = "^0.0.16"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
autodoc-pydantic = "^2.2.0"
doc8 = "^1.1.2"
docutils = "^0.21.2"
esbonio = "^0.16.5"
numpydoc = "^1.8.0"
restructuredtext-lint = "^1.4.0"
sphinx-click = "^6.0.0"
sphinx-datatables = "^0.2.1"
sphinx-hoverxref = "^1.4.2"
sphinx-immaterial = "^0.13.5"

[tool.poetry.group.docs.dependencies.enum-tools]
extras = ["sphinx"]
version = "^0.13.0"

[[tool.poetry.group.docs.dependencies.sphinx]]
python = ">=3.11"
version = "^8.2.0"

[[tool.poetry.group.docs.dependencies.sphinx]]
python = "<3.11"
version = "^7.2.5"

[tool.poetry.group.tests]
optional = true

[tool.poetry.group.tests.dependencies]
mock = "^5.2.0"
pytest = "^8.4.0"
pytest-cov = "^6.1.1"
pytest-mock = "^3.14.1"
requests-mock = "^1.12.1"

[tool.poetry.group.tests.dependencies.coveralls]
python = "<3.13"
version = "^4.0.1"

[[tool.poetry.packages]]
include = "deltona"

[tool.pyright]
deprecateTypingAliases = true
enableExperimentalFeatures = true
include = ["./deltona", "./tests"]
pythonPlatform = "Linux"
pythonVersion = "3.12"
reportCallInDefaultInitializer = "warning"
reportImplicitOverride = "warning"
reportImportCycles = "error"
reportMissingModuleSource = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUnnecessaryTypeIgnoreComment = "none"
typeCheckingMode = "off"
useLibraryCodeForTypes = false

[tool.pytest.ini_options]
mock_use_standalone_module = true
norecursedirs = ["node_modules"]
python_files = ["tests.py", "test_*.py", "*_tests.py"]
testpaths = ["tests"]

[tool.ruff]
cache-dir = "~/.cache/ruff"
force-exclude = true
line-length = 100
namespace-packages = ["docs", "tests"]
target-version = "py312"
unsafe-fixes = true

[tool.ruff.lint]
extend-select = [
  "A",
  "AIR",
  "ANN",
  "ARG",
  "ASYNC",
  "B",
  "BLE",
  "C4",
  "C90",
  "COM",
  "CPY",
  "D",
  "DJ",
  "DOC",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "EXE",
  "F",
  "FA",
  "FAST",
  "FBT",
  "FIX",
  "FLY",
  "FURB",
  "G",
  "I",
  "ICN",
  "INP",
  "INT",
  "ISC",
  "LOG",
  "N",
  "NPY",
  "PD",
  "PERF",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "SLOT",
  "T10",
  "T20",
  "TC",
  "TD",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
]
ignore = [
  "A005",
  "ANN401",
  "ARG001",
  "ARG002",
  "ARG004",
  "C901",
  "COM812",
  "CPY001",
  "D201",
  "D203",
  "D204",
  "D212",
  "DOC201",
  "EM101",
  "N818",
  "PLR0912",
  "PLR0913",
  "PLR0914",
  "PLR0915",
  "PLR0917",
  "PLR1702",
  "PLR6301",
  "S101",
  "S404",
  "S603",
  "TD002",
  "TD003",
  "TD004",
  "UP046",
  "UP047",
]
preview = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
from-first = true
required-imports = ["from __future__ import annotations"]
section-order = ["future", "standard-library", "third-party", "local-folder"]

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["test_*"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.yapf]
align_closing_bracket_with_visual_indent = true
allow_multiline_dictionary_keys = false
allow_multiline_lambdas = false
allow_split_before_dict_value = true
blank_line_before_class_docstring = false
blank_line_before_module_docstring = false
blank_line_before_nested_class_or_def = false
blank_lines_around_top_level_definition = 2
coalesce_brackets = true
column_limit = 100
continuation_align_style = "SPACE"
continuation_indent_width = 4
dedent_closing_brackets = false
disable_ending_comma_heuristic = false
each_dict_entry_on_separate_line = true
indent_dictionary_value = true
indent_width = 4
join_multiple_lines = true
no_spaces_around_selected_binary_operators = false
space_between_ending_comma_and_closing_bracket = false
spaces_around_default_or_named_assign = false
spaces_around_power_operator = true
spaces_before_comment = 2
split_all_comma_separated_values = false
split_arguments_when_comma_terminated = false
split_before_bitwise_operator = true
split_before_closing_bracket = true
split_before_dict_set_generator = true
split_before_dot = false
split_before_expression_after_opening_paren = false
split_before_first_argument = false
split_before_logical_operator = true
split_before_named_assigns = true
split_complex_comprehension = false
split_penalty_after_opening_bracket = 30
split_penalty_after_unary_operator = 10000
split_penalty_before_if_expr = 0
split_penalty_bitwise_operator = 300
split_penalty_comprehension = 80
split_penalty_excess_character = 7000
split_penalty_for_added_line_split = 30
split_penalty_import_names = 0
split_penalty_logical_operator = 300
use_tabs = false

[tool.yapfignore]
ignore_patterns = ["node_modules/**"]
