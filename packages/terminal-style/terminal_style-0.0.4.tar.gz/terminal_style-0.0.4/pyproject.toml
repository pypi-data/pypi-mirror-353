[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "terminal-style"
description = "Style your terminal-printed text"
license = { text = "MIT" }
requires-python = ">=3.7"
keywords = [
  "terminal",
  "style",
  "text",
  "styling",
  "formatting",
  "colors",
  "backgrounds",
  "effects",
]
classifiers = [
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "Intended Audience :: End Users/Desktop",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Natural Language :: English",
]
readme = "README.md"
dependencies = [
  "pyyaml",
]

dynamic = ["version"]

[project.optional-dependencies]
all = ["terminal-style[dev,docs]"]
dev = [
  "pre-commit",
  "black[jupyter]",
  "ruff",
  "coverage",
  "pytest >= 4.6",
  "pytest-cov",
  "sphinx",
  "pytest-mock",
  "mypy",
  "build",
  "twine",
]
docs = [
  "sphinx",
  "ipython",
]

[project.urls]
homepage = "https://github.com/colinfrisch/terminal-style"
repository = "https://github.com/colinfrisch/terminal-style"

[tool.hatch.build.targets.wheel]
packages = ["terminal_style"]
include = ["terminal_style/terminal_style_config.yml"]

[tool.hatch.version]
path = "terminal_style/__init__.py"

[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = [
    "tests",
]

[tool.ruff]
line-length = 90
target-version = "py310"
lint.select = [
    # "ANN", # annotations TODO
    "B", # bugbear
    "C4", # comprehensions
    "DTZ", # naive datetime
    "E", # style errors
    "F", # flakes
    "I", # import sorting
    "ISC", # string concatenation
    "N", # naming
    "PGH", # pygrep-hooks
    "PIE", # miscellaneous
    "PLC", # pylint convention
    "PLE", # pylint error
    # "PLR", # pylint refactor TODO
    "PLW", # pylint warning
    "Q", # quotes
    "RUF", # Ruff
    "S", # security
    "SIM", # simplify
    "T10", # debugger
    "UP", # upgrade
    "W", # style warnings
    "YTT", # sys.version
]
lint.extend-ignore = [
    "E501",
    "S101",   # Use of `assert` detected
    "B017",   # `assertRaises(Exception)` should be considered evil TODO
    "PGH004", # Use specific rule codes when using `noqa` TODO
    "B905",   # `zip()` without an explicit `strict=` parameter
    "N802",   # Function name should be lowercase
    "N999",   # Invalid module name. We should revisit this in the future, TODO
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar` TODO
    "S310",   # Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.
    "S603",   # `subprocess` call: check for execution of untrusted input
    "ISC001", # ruff format asks to disable this feature
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
]
extend-exclude = ["docs", "build"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
ignore_errors = true
omit = [
    "tests/*",
    "setup.py",
]