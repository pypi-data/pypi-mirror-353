"""
Program name: MLPClassifier Class Testing
Purpose description: This program is designed to test the functionality of the MLPClassifier
                     class from the 'tnlearn' library using synthetic classification data
                     generated by 'make_classification' from 'sklearn'. The program
                     preprocesses the data with a custom DataPreprocessor class, trains
                     the MLPClassifier model, and evaluates its performance.
Tests: The script has undergone testing with synthetic datasets created by 'make_classification' from sklearn.
Note: This script is based on the assumption that tnlearn and sklearn libraries are installed and
      that the relevant classes and functions are correctly implemented in those libraries.
"""

from tnlearn import MLPClassifier
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from tnlearn import DataPreprocessor

# This step is responsible for creating a synthetic dataset suitable for classification tasks.
X, y = make_classification(n_samples=100, n_features=20,
                           n_informative=2, n_redundant=10,
                           random_state=42)

# Setting the indices for the numerical features for preprocessing purposes.
num_features = list(range(20))

# Creating an instance of the DataPreprocessor class to preprocess numeric features.
preprocessor = DataPreprocessor(num_features=num_features)

# Using the preprocessor to fit and transform the features.
X = preprocessor.fit_transform(X)

# Splitting the dataset into training and test sets with an 80-20 ratio.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Constructing the neural network classifier with specific parameters.
mlp = MLPClassifier(neurons='x**2',
                    layers_list=[10, 10, 10],
                    activation_funcs='sigmoid',
                    optimizer_name='adam',
                    max_iter=200,
                    batch_size=16,
                    )

# Training the MLPClassifier using the training data.
mlp.fit(X_train, y_train)

# Generating predictions for the test set.
y_pred = mlp.predict(X_test)

# Scoring the model based on accuracy using the predictions and actual labels.
accuracy = mlp.score(X_test, y_test)
