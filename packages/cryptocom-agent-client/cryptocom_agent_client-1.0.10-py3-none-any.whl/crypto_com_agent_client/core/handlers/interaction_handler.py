"""
InteractionHandler Module.

This module defines the `InteractionHandler` class, which handles user interaction
logic for the LangGraph-based workflow.
"""

# Standard library imports
from typing import Optional

# Third-party imports
from langchain_core.messages import HumanMessage
from langgraph.graph.state import CompiledStateGraph

# Internal application imports
from crypto_com_agent_client.lib.enums.workflow_enum import Workflow
from crypto_com_agent_client.lib.types.blockchain_config import BlockchainConfig
from crypto_com_agent_client.lib.utils.storage import Storage


class InteractionHandler:
    """
    The `InteractionHandler` class encapsulates the logic for processing user
    interactions with the LangGraph workflow.

    Attributes:
        app (CompiledStateGraph): The compiled workflow graph for processing interactions.
        storage (Storage): The storage mechanism for saving and loading workflow state.

    Example:
        >>> handler = InteractionHandler(app=compiled_graph, storage=custom_storage)
        >>> response = handler.handle("Hello! How can I help you?")
        >>> print(response)
    """

    def __init__(
        self,
        app: CompiledStateGraph,
        storage: Storage,
        blockchain_config: BlockchainConfig,
    ) -> None:
        """
        Initializes the InteractionHandler instance.

        Args:
            app (CompiledStateGraph): The compiled workflow graph for processing interactions.
            storage (Storage): The storage mechanism for saving and loading workflow state.
        """
        self.app: CompiledStateGraph = app
        self.storage: Storage = storage
        self.blockchain_config: BlockchainConfig = blockchain_config

    def interact(self, user_input: str, thread_id: Optional[int] = None) -> str:
        """
        Processes user input and returns the generated response.

        Args:
            user_input (str): The user's input message.
            thread_id (int, optional): A thread ID for contextual execution.

        Returns:
            str: The response generated by the workflow.

        Raises:
            ValueError: If the workflow graph is not initialized.
        """
        if not self.app:
            raise ValueError("The workflow graph is not initialized.")

        # Load state from storage or initialize it
        state = self.storage.load_state(thread_id)

        # Add user input as a HumanMessage
        state[Workflow.Messages].append(HumanMessage(content=user_input))

        # Initialise other state variables
        state[Workflow.ChainID] = self.blockchain_config.chainId
        state[Workflow.PrivateKey] = self.blockchain_config.private_key
        state[Workflow.SSOWalletURL] = self.blockchain_config.sso_wallet_url

        # Optional workflow configuration
        config = (
            {Workflow.Configurable: {Workflow.ThreadID: thread_id}}
            if thread_id
            else {Workflow.ThreadID: 42}
        )

        # Execute the workflow
        final_state = self.app.invoke(state, config=config)

        # Save updated state to storage
        self.storage.save_state(final_state, thread_id)

        # Extract and return the final response
        return final_state[Workflow.Messages][-1].content
