Metadata-Version: 2.4
Name: masedb
Version: 0.1.1
Summary: Python client library for Mase Database API
Home-page: https://github.com/MaseZev/Mase-DataBase
Author: Maseai Database company
Author-email: support@maseai.online
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.25.0
Requires-Dist: aiohttp>=3.8.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# MaseDB Python Client / –ö–ª–∏–µ–Ω—Ç MaseDB –¥–ª—è Python

<div align="center">

![MaseDB Logo](https://masedb.maseai.online/static/logo.png)

[![PyPI version](https://badge.fury.io/py/masedb.svg)](https://badge.fury.io/py/masedb)
[![Python Versions](https://img.shields.io/pypi/pyversions/masedb.svg)](https://pypi.org/project/masedb/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Documentation](https://img.shields.io/badge/docs-latest-brightgreen.svg)](https://masedb.maseai.online/documentation)
[![GitHub stars](https://img.shields.io/github/stars/maseai/masedb.svg)](https://github.com/MaseZev/Mase-DataBase/stargazers)
[![GitHub forks](https://img.shields.io/github/forks/maseai/masedb.svg)](https://github.com/MaseZev/Mase-DataBase/network)
[![GitHub issues](https://img.shields.io/github/issues/maseai/masedb.svg)](https://github.com/MaseZev/Mase-DataBase/issues)
[![GitHub pull requests](https://img.shields.io/github/issues-pr/maseai/masedb.svg)](https://github.com/MaseZev/Mase-DataBase/pulls)

[English](#english) | [–†—É—Å—Å–∫–∏–π](#russian)

</div>

## Quick Links / –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏

- üåê [Website / –°–∞–π—Ç](https://masedb.maseai.online/)
- üìö [Documentation / –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://masedb.maseai.online/documentation)
- üí¨ [Support / –ü–æ–¥–¥–µ—Ä–∂–∫–∞](https://masedb.maseai.online/support)
- üìß [Email / –ü–æ—á—Ç–∞](mailto:admin@maseai.online)
- üì¶ [PyPI Package](https://pypi.org/project/masedb/)
- üìÇ [Examples / –ü—Ä–∏–º–µ—Ä—ã](#examples)
- ‚≠ê [GitHub Repository](https://github.com/maseai/masedb)

## Table of Contents / –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ

- [Installation](#installation)
- [Quick Start](#quick-start)
- [Examples](#examples)
- [API Reference](#api-reference)
- [Contributing](#contributing)
- [License](#license)

---

<a name="english"></a>
# English

## Overview

MaseDB Python Client is a powerful library for interacting with the Mase Database API. It provides both synchronous and asynchronous interfaces for database operations, supporting MongoDB-style queries, transactions, indexing, and comprehensive error handling.

## Features

- ‚ú® Synchronous and asynchronous client interfaces
- üîç MongoDB-style query operators
- üîÑ Transaction support
- üìä Index management
- üõ°Ô∏è Comprehensive error handling
- üìà Statistics and monitoring
- üì¶ Batch operations support
- üìù Type hints and documentation

## Installation

### From PyPI
```bash
pip install masedb
```

### From GitHub
```bash
# Clone the repository
git clone https://github.com/maseai/masedb.git

# Navigate to the project directory
cd masedb

# Install in development mode
pip install -e .
```

## Quick Start

```python
from masedb import MaseDBClient

# Initialize client with your API key
client = MaseDBClient(api_key="your_api_key")

# Create a collection
client.create_collection("users", "Collection for user data")

# Create a document
document = {
    "name": "John Doe",
    "email": "john@example.com",
    "age": 30
}
result = client.create_document("users", document)
```

## Examples

Check out the `examples` directory for complete working examples:

- `basic_usage.py` - Basic CRUD operations and collection management
- `advanced_queries.py` - Complex MongoDB-style query operators and array operations
- `transactions.py` - Transaction management and money transfer examples
- `async_usage.py` - Asynchronous operations with asyncio

Each example demonstrates different aspects of the library:

### Basic Usage
```python
# basic_usage.py demonstrates:
- Creating and managing collections
- Basic CRUD operations with documents
- Using MongoDB-style query operators
- Error handling
```

### Advanced Queries
```python
# advanced_queries.py demonstrates:
- Complex MongoDB-style query operators
- Array operations
- Logical operators
- Type checking
- Regular expressions
- Nested document queries
```

### Transactions
```python
# transactions.py demonstrates:
- Starting and managing transactions
- Performing multiple operations within a transaction
- Handling transaction rollbacks
- Error handling in transactions
- Transaction status monitoring
```

### Async Usage
```python
# async_usage.py demonstrates:
- Using the async client with asyncio
- Managing collections asynchronously
- Performing CRUD operations asynchronously
- Using transactions
- Error handling in async context
```

To run an example:

```bash
python examples/basic_usage.py
```

## API Reference

### Collections

```python
# List all collections
collections = client.list_collections()

# Create a new collection
client.create_collection("users", "Collection for user data")

# Get collection details
collection = client.get_collection("users")

# Delete a collection
client.delete_collection("users")
```

### Documents

```python
# List all documents in a collection
documents = client.list_documents("users")

# Create a new document
document = {
    "name": "John Doe",
    "email": "john@example.com",
    "age": 30
}
result = client.create_document("users", document)

# Get a specific document
document = client.get_document("users", "document_id")

# Update a document
updated_doc = {
    "name": "John Doe",
    "email": "john.doe@example.com",
    "age": 31
}
client.update_document("users", "document_id", updated_doc)

# Delete a document
client.delete_document("users", "document_id")
```

### Indexes

```python
# Create an index
client.create_index("users", ["email", "age"])

# List all indexes
indexes = client.list_indexes("users")
```

### Transactions

```python
# Start a transaction
transaction = client.start_transaction()
transaction_id = transaction["transaction_id"]

# Commit a transaction
client.commit_transaction(transaction_id)

# Rollback a transaction
client.rollback_transaction(transaction_id)

# Get transaction status
status = client.get_transaction_status(transaction_id)
```

### Statistics

```python
# Get database statistics
stats = client.get_stats()

# Get detailed statistics (admin only)
detailed_stats = client.get_detailed_stats()
```

### Batch Operations

```python
def batch_create_documents(client, collection_name, documents):
    """Create multiple documents in parallel"""
    return [client.create_document(collection_name, doc) for doc in documents]

# Usage
documents = [
    {"name": "John Doe", "email": "john@example.com"},
    {"name": "Jane Smith", "email": "jane@example.com"},
    {"name": "Bob Johnson", "email": "bob@example.com"}
]

results = batch_create_documents(client, "users", documents)
```

## Error Handling

The library provides specific exceptions for different error cases:

```python
from masedb import (
    MaseDBError,
    BadRequestError,
    UnauthorizedError,
    ForbiddenError,
    NotFoundError,
    ConflictError,
    ValidationError,
    RateLimitError,
    InternalError,
    ServiceUnavailableError
)

try:
    client.create_collection("users")
except UnauthorizedError as e:
    print(f"Authentication failed: {e.message}")
except ValidationError as e:
    print(f"Validation error: {e.message}")
    print(f"Details: {e.details}")
except MaseDBError as e:
    print(f"An error occurred: {e.message}")
```

## Contributing

We welcome contributions! Please see our [Contributing Guide](https://masedb.maseai.online/documentation/contributing) for details.

### Development Setup

1. Fork the repository
2. Clone your fork:
   ```bash
   git clone https://github.com/your-username/masedb.git
   ```
3. Create a virtual environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```
4. Install development dependencies:
   ```bash
   pip install -e ".[dev]"
   ```
5. Run tests:
   ```bash
   pytest
   ```

### Pull Request Process

1. Update the README.md with details of changes if needed
2. Update the documentation if needed
3. Add tests for new functionality
4. Ensure all tests pass
5. Submit a pull request

## License

MIT License

---

<a name="russian"></a>
# –†—É—Å—Å–∫–∏–π

## –û–±–∑–æ—Ä

MaseDB Python Client - —ç—Ç–æ –º–æ—â–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Mase. –û–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, —Ç–∞–∫ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç MongoDB-–ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- ‚ú® –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∫–ª–∏–µ–Ω—Ç–∞
- üîç MongoDB-–ø–æ–¥–æ–±–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
- üîÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞–º–∏
- üõ°Ô∏è –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
- üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- üì¶ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- üìù –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–∏–ø–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

### –ò–∑ PyPI
```bash
pip install masedb
```

### –ò–∑ GitHub
```bash
# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
git clone https://github.com/maseai/masedb.git

# –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd masedb

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
pip install -e .
```

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

```python
from masedb import MaseDBClient

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –≤–∞—à–∏–º API –∫–ª—é—á–æ–º
client = MaseDBClient(api_key="–≤–∞—à_api_–∫–ª—é—á")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
client.create_collection("users", "–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
document = {
    "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
    "email": "ivan@example.com",
    "age": 30
}
result = client.create_document("users", document)
```

## –ü—Ä–∏–º–µ—Ä—ã

–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ `examples` –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–∏–º–µ—Ä—ã:

- `basic_usage.py` - –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ CRUD –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
- `advanced_queries.py` - –°–ª–æ–∂–Ω—ã–µ MongoDB-–ø–æ–¥–æ–±–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–∞–º–∏
- `transactions.py` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
- `async_usage.py` - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å asyncio

–ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:

### –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
```python
# basic_usage.py –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
- –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ CRUD —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ MongoDB-–ø–æ–¥–æ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
```

### –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
```python
# advanced_queries.py –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –°–ª–æ–∂–Ω—ã–µ MongoDB-–ø–æ–¥–æ–±–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
- –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–∞–º–∏
- –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
- –ü—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤
- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
- –ó–∞–ø—Ä–æ—Å—ã –∫ –≤–ª–æ–∂–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
```

### –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
```python
# transactions.py –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ù–∞—á–∞–ª–æ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–∫–∞—Ç–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
```

### –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
```python
# async_usage.py –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å asyncio
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π CRUD
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
```

–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–∞:

```bash
python examples/basic_usage.py
```

## –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ API

### –ö–æ–ª–ª–µ–∫—Ü–∏–∏

```python
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
collections = client.list_collections()

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
client.create_collection("users", "–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
collection = client.get_collection("users")

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
client.delete_collection("users")
```

### –î–æ–∫—É–º–µ–Ω—Ç—ã

```python
# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
documents = client.list_documents("users")

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
document = {
    "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
    "email": "ivan@example.com",
    "age": 30
}
result = client.create_document("users", document)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
document = client.get_document("users", "document_id")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
updated_doc = {
    "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
    "email": "ivan.ivanov@example.com",
    "age": 31
}
client.update_document("users", "document_id", updated_doc)

# –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
client.delete_document("users", "document_id")
```

### –ò–Ω–¥–µ–∫—Å—ã

```python
# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
client.create_index("users", ["email", "age"])

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
indexes = client.list_indexes("users")
```

### –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

```python
# –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
transaction = client.start_transaction()
transaction_id = transaction["transaction_id"]

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
client.commit_transaction(transaction_id)

# –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
client.rollback_transaction(transaction_id)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
status = client.get_transaction_status(transaction_id)
```

### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

```python
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
stats = client.get_stats()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
detailed_stats = client.get_detailed_stats()
```

### –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

```python
def batch_create_documents(client, collection_name, documents):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    return [client.create_document(collection_name, doc) for doc in documents]

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
documents = [
    {"name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "email": "ivan@example.com"},
    {"name": "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞", "email": "maria@example.com"},
    {"name": "–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤", "email": "alexey@example.com"}
]

results = batch_create_documents(client, "users", documents)
```

## –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –æ—à–∏–±–æ–∫:

```python
from masedb import (
    MaseDBError,
    BadRequestError,
    UnauthorizedError,
    ForbiddenError,
    NotFoundError,
    ConflictError,
    ValidationError,
    RateLimitError,
    InternalError,
    ServiceUnavailableError
)

try:
    client.create_collection("users")
except UnauthorizedError as e:
    print(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e.message}")
except ValidationError as e:
    print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e.message}")
    print(f"–î–µ—Ç–∞–ª–∏: {e.details}")
except MaseDBError as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e.message}")
```

## –£—á–∞—Å—Ç–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

–ú—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—à –≤–∫–ª–∞–¥! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ [–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ –ø–æ —É—á–∞—Å—Ç–∏—é –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ](https://masedb.maseai.online/documentation/contributing).

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

1. –§–æ—Ä–∫–Ω–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
2. –ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ –≤–∞—à —Ñ–æ—Ä–∫:
   ```bash
   git clone https://github.com/–≤–∞—à-username/masedb.git
   ```
3. –°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:
   ```bash
   python -m venv venv
   source venv/bin/activate  # –ù–∞ Windows: venv\Scripts\activate
   ```
4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
   ```bash
   pip install -e ".[dev]"
   ```
5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã:
   ```bash
   pytest
   ```

### –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è Pull Request

1. –û–±–Ω–æ–≤–∏—Ç–µ README.md –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
2. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
3. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ pull request

## –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License 
