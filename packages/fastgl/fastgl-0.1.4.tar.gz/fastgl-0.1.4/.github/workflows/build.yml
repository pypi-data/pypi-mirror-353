name: Build

on: [push, pull_request]

jobs:
  test-linux:
    name: "Run tests on Linux"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python: ["3.13", "3.12", "3.11", "3.10"]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      
      - name: Run Tests (Linux)
        run: |
          python -m pip install --upgrade pip setuptools wheel meson ninja meson-python numpy scipy pybind11
          python -m pip install --no-build-isolation --editable '.[test]'
          pytest --cov --cov-report html --cov-report xml --cov-report annotate -s
          
      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          verbose: true # optional (default = false)

  test-macos:
    name: "Run tests on MacOS"
    runs-on: macos-latest
    env:
      CC: gcc-14
      CXX: g++-14
      FC: gfortran-14

    steps:
      - uses: actions/checkout@v4
      - name: Install GCC + OpenMP runtime
        run: |
          brew install gcc@14
          echo "Using $(gcc-14 --version | head -1)"
        
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Dependencies (MacOS)
        run: |
          python -m pip install --upgrade pip setuptools wheel pybind11 pytest numpy scipy 
          

      - name: Install Package (MacOS)
        # The built-in fortran compiler does not link to gfortran (just numbered versions)
        # and build_ext does not play nicely with that. So we link gfortran-X to gfortran.
        run: |
          ln -s $CXX $(dirname $(which $CXX))/g++
          ln -s $FC $(dirname $(which $FC))/gfortran
          ln -s $CC $(dirname $(which $CC))/gcc
          echo "Using FC=$FC CXX=$CXX CC=$CC"
          python -m pip install .

      - name: Run Tests (MacOS)
        run: |
          pytest -s

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest, macos-13]

    steps:
      - uses: actions/checkout@v4
      - name: Install GCC + OpenMP runtime (macOS only)
        if: runner.os == 'macOS'
        run: brew install gcc@14
        
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CC: gcc-14
          CXX: g++-14
          FC: gfortran-14
          MACOSX_DEPLOYMENT_TARGET: "13.0"


      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_wheels_macos_arm:

    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install GCC + OpenMP runtime
        run: brew install gcc@14
        
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CC: gcc-14
          CXX: g++-14
          FC: gfortran-14
          MACOSX_DEPLOYMENT_TARGET: "14.0"

         

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  test_wheels_linux:
    name: Test built wheels on Linux
    needs: [build_wheels]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          path: dist
          merge-multiple: true

      - name: Install and test wheel
        run: |
          python -m pip install --upgrade pip setuptools wheel meson ninja meson-python numpy scipy pybind11 pytest

          pip install fastgl --no-index --find-links=dist/

          echo "Running tests"
          pytest -v

  test_wheels_macos:
    name: Test built wheels on ${{ matrix.os }}
    needs: [build_wheels, build_wheels_macos_arm]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, macos-14]  # macos-13: x86_64, macos-14: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          path: dist
          merge-multiple: true

      - name: Install and test matching wheel
        run: |
          python3 -m pip install --upgrade pip setuptools wheel meson ninja meson-python numpy scipy pybind11 pytest

          python3 -m pip install fastgl --no-index --find-links=dist/

          echo "Running tests against installed wheel"
          pytest -v

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'

      - name: Build sdist
        run: |
          python -m pip install -U pip
          python -m pip install -U setuptools
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install numpy pybind11 scipy
          python -m pip install build
          python -m build . --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist, build_wheels_macos_arm]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          # To test: repository_url: https://test.pypi.org/legacy/

