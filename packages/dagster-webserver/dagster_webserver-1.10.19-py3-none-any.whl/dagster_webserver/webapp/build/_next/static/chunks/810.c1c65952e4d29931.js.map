{"version":3,"file":"static/chunks/810.c1c65952e4d29931.js","mappings":"iIAEO,IAAMA,EAAOC,SAAAA,EAAMA,CAACC,GAAG,CAAAC,UAAA,yoBCOvB,IAAMC,EAAkB,OAAC,CAACC,UAAAA,CAAS,CAAEC,SAAAA,CAAQ,CAAQ,CAAAC,EAC1D,MACE,GAAAC,EAAAC,IAAA,EAACC,EAAAA,EAAIA,CAAAA,CAACC,cAAeN,EAAWC,SAAUA,YACxC,GAAAE,EAAAI,GAAA,EAACC,EAAAA,EAAGA,CAAAA,CAACC,MAAM,QAAQC,GAAG,kBAAkBC,SAAUX,oBAAAA,IAClD,GAAAG,EAAAI,GAAA,EAACC,EAAAA,EAAGA,CAAAA,CACFC,MAAM,sBACNC,GAAG,kBACHC,SAAUX,oBAAAA,MAIlB,+mBCLA,IAAMY,EAAwB,UAEjBC,EAAmB,OAAC,CAACC,gBAAAA,CAAe,CAA8B,CAAAZ,EACvEa,EAAYC,CAAAA,EAAAA,EAAAA,MAAAA,EAA8B,MAE1CC,EAAiBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACpCC,MAAOL,EAAgBM,MAAM,CAC7BC,iBAAkB,IAAMN,EAAUO,OAAO,CACzCC,aAAc,IAAM,GACpBC,SAAU,EACZ,GAEMC,EAAcR,EAAeS,YAAY,GACzCC,EAAQV,EAAeW,eAAe,GAE5C,MACE,GAAAzB,EAAAI,GAAA,EAACV,MAAAA,CAAIgC,MAAO,CAACC,SAAU,QAAQ,WAC7B,GAAA3B,EAAAC,IAAA,EAAC2B,EAAAA,EAASA,CAAAA,CAACC,IAAKjB,YACd,GAAAZ,EAAAI,GAAA,EAAC0B,EAAAA,CAAAA,GACD,GAAA9B,EAAAI,GAAA,EAAC2B,EAAAA,EAAKA,CAAAA,CAACC,aAAcV,WAClBE,EAAMS,GAAG,CAAC,OAAC,CAACC,MAAAA,CAAK,CAAEC,IAAAA,CAAG,CAAEC,KAAAA,CAAI,CAAEC,MAAAA,CAAK,CAAC,CAAAtC,EAC7BuC,EAAiB3B,CAAe,CAACuB,EAAM,CAC7C,MACE,GAAAlC,EAAAI,GAAA,EAACmC,EAAAA,CAECD,eAAgBA,EAChBE,OAAQJ,EACRC,MAAOA,GAHFF,EAMX,SAKV,EAEML,EAAoB,IAEtB,GAAA9B,EAAAC,IAAA,EAACwC,EAAAA,EAASA,CAAAA,CAACC,gBAAiBjC,EAAuBkC,OAAM,aACvD,GAAA3C,EAAAI,GAAA,EAACwC,EAAAA,EAAUA,CAAAA,UAAC,SACZ,GAAA5C,EAAAI,GAAA,EAACwC,EAAAA,EAAUA,CAAAA,UAAC,aAIZL,EAAiB,OAAC,CACtBD,eAAAA,CAAc,CACdE,OAAAA,CAAM,CACNH,MAAAA,CAAK,CAKN,CAAAtC,EAEO8C,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,EAAgB,KAC9BC,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,EAClBC,EACA,CACEC,UAAW,CAACZ,eAAAA,CAAc,EAC1Ba,KAAM,CAACN,CACT,GAGFO,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BL,EAAaM,EAAAA,EAAeA,EAEtD,GAAM,CAACC,KAAAA,CAAI,CAAC,CAAGP,EACTQ,EAAQD,MAAAA,EAAAA,KAAAA,EAAAA,EAAME,QAAQ,CAACC,gBAAgB,CAEvCC,EAAO,2BAA8DC,MAAA,CAAnCC,mBAAmBtB,IAC3D,MACE,GAAAtC,EAAAI,GAAA,EAACyD,EAAAA,EAAGA,CAAAA,CAACC,QAAStB,EAAQuB,OAAQ1B,WAC5B,GAAArC,EAAAC,IAAA,EAAC+D,EAAAA,CAAQC,OAAO,mBACd,GAAAjE,EAAAI,GAAA,EAAC8D,EAAAA,EAAOA,CAAAA,UACN,GAAAlE,EAAAC,IAAA,EAACkE,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,IAAK,EAAGC,WAAY,QAAQ,YACtC,GAAAtE,EAAAI,GAAA,EAACmE,EAAAA,EAAIA,CAAAA,CAACC,KAAK,iBACX,GAAAxE,EAAAI,GAAA,EAACqE,EAAAA,EAAIA,CAAAA,CAACC,GAAIhB,WAAOpB,SAGrB,GAAAtC,EAAAI,GAAA,EAAC8D,EAAAA,EAAOA,CAAAA,UACLX,EAAQ,GAAAvD,EAAAI,GAAA,EAACV,MAAAA,UAAK6D,EAAMoB,SAAS,GAAU,GAAA3E,EAAAI,GAAA,EAACwE,EAAAA,EAAaA,CAAAA,CAAC7B,YAAaA,UAK9E,EAEME,EAA+B4B,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,KAuBlCb,EAAUvE,CAAAA,EAAAA,EAAAA,EAAAA,EAAO0E,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,uFAEC1D,80BCpFpB,IAAMqE,EAAiCC,EAAAA,IAAU,CAAC,KACvD,GAAM,CAACzC,eAAAA,CAAc,CAAC,CAAG0C,CAAAA,EAAAA,EAAAA,EAAAA,IACzB,GAAI,CAAC1C,EACH,MAAO,GAAAtC,EAAAI,GAAA,EAAC6E,EAAAA,CAAAA,GAGV,IAAMC,EAAaC,mBAAmB7C,GACtC,MAAO,GAAAtC,EAAAI,GAAA,EAACgF,EAAAA,EAA0BA,CAAAA,CAAC9C,eAAgB4C,GACrD,GAEaD,EAAkCF,EAAAA,IAAU,CAAC,KACxDM,CAAAA,EAAAA,EAAAA,EAAAA,IACAC,CAAAA,EAAAA,EAAAA,CAAAA,EAAiB,eACjB,IAAMvC,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,EAGlBuC,GAAmC,CACnCC,4BAA6B,EAC/B,GACM,CAAC3F,EAAW4F,EAAa,CAAGV,EAAAA,QAAc,CAAiB,mBAE3D,CAACzB,KAAAA,CAAI,CAAC,CAAGP,EAmCf,MACE,GAAA/C,EAAAC,IAAA,EAAAD,EAAA0F,QAAA,YACE,GAAA1F,EAAAI,GAAA,EAACuF,EAAAA,CAA0B9F,UAAWA,EAAWC,SAAU2F,IAlC7D,EAQI5F,oBAAAA,EAEA,GAAAG,EAAAI,GAAA,EAACV,MAAAA,CAAIgC,MAAO,CAACkE,UAAW,MAAM,WAC5B,GAAA5F,EAAAI,GAAA,EAACyF,EAAAA,CACCC,YAAa,CAAC,CAACxC,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAME,QAAQ,CAACuC,mBAAmB,EACjDC,eAAgB1C,MAAAA,EAAAA,KAAAA,EAAAA,EAAME,QAAQ,CAACwC,cAAc,KAOnD,GAAAhG,EAAAI,GAAA,EAACV,MAAAA,CAAIgC,MAAO,CAACkE,UAAW,QAAQ,WAC9B,GAAA5F,EAAAI,GAAA,EAAC6F,EAAAA,CACCtF,gBAAiB2C,EAAKE,QAAQ,CAAC0C,iBAAiB,CAACjE,GAAG,CAAC,GAAWsB,EAAMjB,cAAc,EACpF6D,WAAY7C,EAAKE,QAAQ,CAAC4C,yBAAyB,CACnDC,QAAStD,EAAYsD,OAAO,CAC5BC,SAAUhD,EAAKE,QAAQ,CAAC+C,wBAAwB,CAChDC,SAAUlD,EAAKE,QAAQ,CAACiD,wBAAwB,KAxBlD,GAAAzG,EAAAI,GAAA,EAAC+D,EAAAA,CAAGA,CAAAA,CAACuC,QAAS,CAACC,SAAU,EAAE,EAAGvC,KAAM,CAACwC,UAAW,SAAUtC,WAAY,QAAQ,WAC5E,GAAAtE,EAAAI,GAAA,EAACyG,EAAAA,CAAeA,CAAAA,CAACC,MAAM,yCAmCjC,GAEaC,EAA0B,KACrC,GAAM,CAACC,UAAAA,CAAS,CAAC,CAAGjC,EAAAA,UAAgB,CAACkC,EAAAA,CAAmBA,EACxD,MACE,GAAAjH,EAAAC,IAAA,EAACT,EAAAA,CAAIA,CAAAA,CAACkC,MAAO,CAACgF,QAAS,CAAC,YACtB,GAAA1G,EAAAI,GAAA,EAAC8G,EAAAA,CAAUA,CAAAA,CACT5G,MAAO,GAAAN,EAAAI,GAAA,EAAC+G,EAAAA,EAAOA,CAAAA,UAAEH,IACjBI,KAAM,GAAApH,EAAAI,GAAA,EAACiH,EAAAA,CAAYA,CAAAA,CAACC,IAAI,kBAE1B,GAAAtH,EAAAI,GAAA,EAAC6E,EAAAA,CAAAA,KAGP,EAIA,IAAAsC,EAAeR,EAER,IAAMlB,EAAwB,OAAC,CACpCC,YAAAA,CAAW,CACXE,eAAAA,CAAc,CAKf,CAAAjG,EACC,GAAI,CAAC+F,EACH,MACE,GAAA9F,EAAAC,IAAA,EAAAD,EAAA0F,QAAA,YACE,GAAA1F,EAAAI,GAAA,EAAC+D,EAAAA,CAAGA,CAAAA,CACFuC,QAAS,CAACC,SAAU,GAAIa,WAAY,EAAE,EACtCvD,OAAO,SACPG,KAAM,CAACwC,UAAW,MAAOtC,WAAY,SAAUmD,eAAgB,eAAe,WAE9E,GAAAzH,EAAAI,GAAA,EAACsH,EAAAA,EAAUA,CAAAA,UAAC,0BAEd,GAAA1H,EAAAC,IAAA,EAACkE,EAAAA,CAAGA,CAAAA,CAACuC,QAAS,CAACC,SAAU,GAAIa,WAAY,EAAE,YAAG,oIAED,GAAAxH,EAAAI,GAAA,EAACuH,EAAAA,EAAIA,CAAAA,UAAC,yBAA2B,WAAS,IACrF,GAAA3H,EAAAI,GAAA,EAACuH,EAAAA,EAAIA,CAAAA,UAAC,iBAAmB,YAAU,IACnC,GAAA3H,EAAAI,GAAA,EAACwH,IAAAA,CACCC,OAAO,SACPC,IAAI,aACJC,KAAK,oFACN,uCAEI,IAAI,8BAOjB,IAAMC,EACJ,GAAAhI,EAAAC,IAAA,EAACkE,EAAAA,CAAGA,CAAAA,CAACuC,QAAS,CAACC,SAAU,GAAIa,WAAY,EAAE,YAAG,sEACwB,IACpE,GAAAxH,EAAAI,GAAA,EAACwH,IAAAA,CACCC,OAAO,SACPC,IAAI,aACJC,KAAK,mHACN,8BAEI,IAAI,2BAKPE,EAAkBjC,EACtB,GAAAhG,EAAAI,GAAA,EAAC8H,EAAAA,EAAgBA,CAAAA,CAACxG,MAAO,CAACyG,WAAY,EAAE,WACtC,GAAAnI,EAAAC,IAAA,EAACmI,QAAAA,WACC,GAAApI,EAAAC,IAAA,EAACoI,KAAAA,WACC,GAAArI,EAAAI,GAAA,EAACkI,KAAAA,UAAG,yBACJ,GAAAtI,EAAAI,GAAA,EAACkI,KAAAA,UAAItC,EAAeuC,iBAAiB,MAEvC,GAAAvI,EAAAC,IAAA,EAACoI,KAAAA,WACC,GAAArI,EAAAI,GAAA,EAACkI,KAAAA,UAAG,4BACJ,GAAAtI,EAAAI,GAAA,EAACkI,KAAAA,UACEtC,EAAewC,wBAAwB,CACtC,GAAAxI,EAAAI,GAAA,EAACqI,EAAAA,CAAmBA,CAAAA,CAClBC,MAAO1C,EAAewC,wBAAwB,CAC9CG,QAAS,CAACC,SAAU,GAAMC,YAAa,GAAMC,KAAM,MAAM,IAG3D,cAMR,KAEJ,MACE,GAAA9I,EAAAC,IAAA,EAACkE,EAAAA,CAAGA,CAAAA,WACD6D,EACAC,IAGP,EAEMtC,EAA4B,OAAC,CACjC9F,UAAAA,CAAS,CACTC,SAAAA,CAAQ,CAIT,CAAAC,EACC,MACE,GAAAC,EAAAI,GAAA,EAAC+D,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CAACqD,eAAgB,gBAAiBnD,WAAY,QAAQ,EAC5DoC,QAAS,CAACc,WAAY,EAAE,EACxBvD,OAAO,kBAEP,GAAAjE,EAAAI,GAAA,EAACR,EAAeA,CAACC,UAAWA,EAAWC,SAAUA,KAGvD,EAEamG,EAAoB,OAAC,CAChCE,WAAAA,CAAU,CACVxF,gBAAAA,CAAe,CACf0F,QAAAA,CAAO,CACPC,SAAAA,CAAQ,CACRE,SAAAA,CAAQ,CAST,CAAAzG,EACO,CAACgJ,EAASC,EAAW,CAAGjE,EAAAA,QAAc,CAAU,IAChD,CAACkE,EAAQC,EAAU,CAAGnE,EAAAA,QAAc,CAAC,IAErCoE,EAAQ,IAAMH,EAAW,IAEzBI,EAAarE,EAAAA,OAAa,CAAC,IACxB,IAAIpE,EAAgB,CACxB0I,MAAM,CAAC,GAASlH,EAAImH,QAAQ,CAACL,IAC7BM,IAAI,CAAC,CAAC3B,EAAG4B,IAAMC,EAAAA,EAAeA,CAACC,OAAO,CAAC9B,EAAG4B,IAC5C,CAAC7I,EAAiBsI,EAAO,SAE5B,EAoBE,GAAAjJ,EAAAC,IAAA,EAACkE,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACwC,UAAW,QAAQ,EAAGlF,MAAO,CAACC,SAAU,OAAQa,OAAQ,MAAM,YACxE,GAAAxC,EAAAI,GAAA,EAACuJ,EAAAA,CAAuBR,MAAOA,EAAOF,OAAQA,EAAQC,UAAWA,IAChEvI,IAAAA,EAAgBM,MAAM,CACrB,GAAAjB,EAAAI,GAAA,EAAC+D,EAAAA,CAAGA,CAAAA,CAACyF,OAAQ,YACX,GAAA5J,EAAAI,GAAA,EAACyJ,EAAAA,CAAaA,CAAAA,CACZC,KAAK,QACLxJ,MAAM,iBACNyJ,YACE,GAAA/J,EAAAC,IAAA,EAAAD,EAAA0F,QAAA,YAAE,6DAEA,GAAA1F,EAAAI,GAAA,EAAC4J,EAAAA,CAAUA,CAAAA,CAACC,QAAS,IAAMd,aAAS,qBAA6B,WAKvE,EAAYlI,MAAM,CASpB,GAAAjB,EAAAI,GAAA,EAACM,EAAgBA,CAACC,gBAAiByI,IARnC,GAAApJ,EAAAI,GAAA,EAAC+D,EAAAA,CAAGA,CAAAA,CAACuC,QAAS,YACZ,GAAA1G,EAAAI,GAAA,EAACyJ,EAAAA,CAAaA,CAAAA,CACZC,KAAK,aACLxJ,MAAM,iBACNyJ,YAAY,0CAMlB,GAAA/J,EAAAI,GAAA,EAAC8J,GAAAA,CACCC,KAAM,CAAC,CAACpB,EACRqB,QAAS,IAAMpB,EAAW,IAC1BqB,WAAYhE,EACZC,SAAUA,MAAAA,EAAAA,EAnQQ,EAoQlBE,SAAUA,MAAAA,EAAAA,EAnQQ,SAkNpB,GAAAxG,EAAAC,IAAA,EAAAD,EAAA0F,QAAA,YACE,GAAA1F,EAAAI,GAAA,EAACuJ,EAAAA,CAAAA,GACD,GAAA3J,EAAAI,GAAA,EAAC+D,EAAAA,CAAGA,CAAAA,CAACyF,OAAQ,YACX,GAAA5J,EAAAI,GAAA,EAACyJ,EAAAA,CAAaA,CAAAA,CACZC,KAAK,QACLxJ,MAAM,yBACNyJ,YACE,4MA8Cd,EAEMJ,EAAyB,OAAC,CAC9BR,MAAAA,CAAK,CACLD,UAAAA,CAAS,CACTD,OAAAA,CAAM,CASP,CAAAlJ,EACC,MACE,GAAAC,EAAAI,GAAA,EAAC+D,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACwC,UAAW,QAAQ,WAC5BsC,EACC,GAAAlJ,EAAAC,IAAA,EAACkE,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CAACwC,UAAW,MAAOa,eAAgB,eAAe,EACxDf,QAAS,CAACC,SAAU,GAAIa,WAAY,EAAE,EACtCvD,OAAO,mBAEP,GAAAjE,EAAAI,GAAA,EAACkK,EAAAA,EAASA,CAAAA,CACR5B,MAAOO,GAAU,GACjBvH,MAAO,CAAC6I,MAAO,OAAQC,SAAU,IAAKC,SAAU,GAAG,EACnDC,YAAY,eACZ5K,SAAU,GAA+BoJ,EAAUyB,EAAE9C,MAAM,CAACa,KAAK,IAElES,EACC,GAAAnJ,EAAAI,GAAA,EAACwK,EAAAA,EAAMA,CAAAA,CAACd,KAAM,GAAA9J,EAAAI,GAAA,EAACmE,EAAAA,EAAIA,CAAAA,CAACC,KAAK,eAAiByF,QAAS,IAAMd,aAAS,mBAGhE,QAEJ,MAGV,EAEMe,GAA4B,OAAC,CACjCC,KAAAA,CAAI,CACJC,QAAAA,CAAO,CACPC,WAAAA,CAAU,CACV7D,SAAAA,CAAQ,CACRF,SAAAA,CAAQ,CAOT,CAAAvG,EACO,CAAC8K,EAAcC,EAAgB,CAAG/F,EAAAA,QAAc,CAAC,IACjD,CAACgG,EAAYC,EAAc,CAAGjG,EAAAA,QAAc,CAAC,IAC7C,CAACkG,EAAUC,EAAY,CAAGnG,EAAAA,QAAc,CAAC,IAE/CA,EAAAA,SAAe,CAAC,KACdiG,EAAc,IACdE,EAAY,GACd,EAAG,CAACf,EAAK,EAET,GAAM,CAACgB,EAAoB,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,EAG5BC,IACIC,EAAO,UACXR,EAAgB,IAChB,MAAMK,EAAoB,CACxBjI,UAAW,CAACZ,eAAgB2I,EAAU1H,MAAOgI,SAASR,EAAWS,IAAI,GAAG,CAC1E,GACAV,EAAgB,IAChBT,IACAD,GACF,EAEA,MACE,GAAApK,EAAAC,IAAA,EAACwL,EAAAA,EAAMA,CAAAA,CAACC,OAAQvB,EAAM7J,MAAM,iBAAiB8J,QAASA,YACpD,GAAApK,EAAAC,IAAA,EAAC0L,EAAAA,EAAUA,CAAAA,WACT,GAAA3L,EAAAI,GAAA,EAAC+D,EAAAA,CAAGA,CAAAA,CAACyF,OAAQ,CAACgC,OAAQ,CAAC,WAAG,UAC1B,GAAA5L,EAAAI,GAAA,EAAC+D,EAAAA,CAAGA,CAAAA,CAACyF,OAAQ,CAACgC,OAAQ,EAAE,WACtB,GAAA5L,EAAAI,GAAA,EAACkK,EAAAA,EAASA,CAAAA,CACR5B,MAAOuC,GAAY,GACnBnL,SAAU,GAAOoL,EAAYP,EAAE9C,MAAM,CAACa,KAAK,EAC3CgC,YAAY,WAGhB,GAAA1K,EAAAC,IAAA,EAACkE,EAAAA,CAAGA,CAAAA,CAACyF,OAAQ,CAACgC,OAAQ,CAAC,YAAG,eACXtF,EAAS,IAAEE,EAAS,QAEnC,GAAAxG,EAAAI,GAAA,EAAC+D,EAAAA,CAAGA,CAAAA,UACF,GAAAnE,EAAAI,GAAA,EAACkK,EAAAA,EAASA,CAAAA,CACR5B,MAAOqC,GAAc,GACrBjL,SAAU,GAAOkL,EAAcL,EAAE9C,MAAM,CAACa,KAAK,EAC7CgC,YAAa,GAAiBlE,MAAAA,CAAdF,EAAS,OAAc3C,MAAA,CAAT6C,UAIpC,GAAAxG,EAAAC,IAAA,EAAC4L,EAAAA,EAAYA,CAAAA,WACX,GAAA7L,EAAAI,GAAA,EAACwK,EAAAA,EAAMA,CAAAA,CAACkB,OAAO,OAAO7B,QAASG,WAAS,WAGxC,GAAApK,EAAAI,GAAA,EAACwK,EAAAA,EAAMA,CAAAA,CACLkB,OAAO,UACP7B,QAASqB,EACTS,SACE,CAACC,CAAAA,EAAAA,EAAAA,EAAAA,EAAajB,EAAWS,IAAI,GAAIlF,EAAUE,IAAa,CAACyE,GAAYJ,WAGtEA,EAAe,YAAc,mBAKxC,EAEMoB,GAA4BpH,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,KAOxBU,GAAoCV,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,IAiBhDoH,IAGEZ,GAAiCxG,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,qLCzbnC,IAAMqH,EAAsBC,CAAAA,EAAAA,EAAAA,IAAAA,EAAK,KACtC,GAAM,CAACC,QAAAA,CAAO,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,CAAuBA,SAEpD,EAKE,GAAAtM,EAAAI,GAAA,EAACmM,EAAAA,CAAcA,CAAAA,CACbC,QAASJ,EAAQI,OAAO,CACxBC,SAAS,SACTC,UAAW,CAACC,OAAQ,CAACC,QAAS,GAAMjE,QAAS,CAACgE,OAAQ,CAAC,EAAG,GAAG,CAAC,CAAC,WAE/D,GAAA3M,EAAAI,GAAA,EAACmE,EAAAA,EAAIA,CAAAA,CAACC,KAAK,UAAUqI,MAAOC,EAAAA,EAAmB,OAT1C,IAYX,6BChBO,IAAMC,EAAkBZ,CAAAA,EAAAA,EAAAA,IAAAA,EAAK,OAAC,CAACzB,YAAAA,CAAW,CAAyB,CAAA3K,EAClE,CAACiN,cAAAA,CAAa,CAAC,CAAGX,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,CAAuBA,SAE1D,EAIIU,YAAAA,EAAcC,IAAI,CAElB,GAAAjN,EAAAI,GAAA,EAAC8M,EAAAA,CAAOA,CAAAA,CAACV,QAASQ,EAAcR,OAAO,CAAEW,UAAU,kBACjD,GAAAnN,EAAAI,GAAA,EAACgN,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,YAAYC,UAAWR,EAAAA,EAAiB,OAM7D,GAAA9M,EAAAI,GAAA,EAACmM,EAAAA,CAAcA,CAAAA,CACbC,QAASQ,EAAcR,OAAO,CAC9BC,SAAS,SACTC,UAAW,CAACC,OAAQ,CAACC,QAAS,GAAMjE,QAAS,CAACgE,OAAQ,CAAC,EAAG,GAAG,CAAC,CAAC,WAE/D,GAAA3M,EAAAI,GAAA,EAACmE,EAAAA,EAAIA,CAAAA,CAACC,KAAK,UAAUqI,MAAOC,EAAAA,EAAmB,OAjB1CpC,EAAc,GAAA1K,EAAAI,GAAA,EAACV,MAAAA,CAAIgC,MAAO,CAAC6I,MAAO,MAAM,IAAQ,IAoB3D,kBCbO,IAAMlD,EAAe,IAC1B,GAAM,CAACkG,aAAAA,CAAY,CAAEjG,IAAAA,CAAG,CAAC,CAAGkG,EAEtB,CAACC,YAAAA,CAAW,CAAC,CAAGpB,CAAAA,EAAAA,EAAAA,UAAAA,EAAWpF,EAAAA,CAAmBA,EAC9CyG,EAAeC,CAAAA,EAAAA,EAAAA,CAAAA,IAErB,MACE,GAAA3N,EAAAC,IAAA,EAACkE,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACwC,UAAW,MAAOa,eAAgB,gBAAiBnD,WAAY,UAAU,YACnF,GAAAtE,EAAAC,IAAA,EAACC,EAAAA,EAAIA,CAAAA,CAACC,cAAemH,YACnB,GAAAtH,EAAAI,GAAA,EAACwN,EAAAA,CAAOA,CAAAA,CACNrN,GAAG,YACHD,MAAM,iBACNoE,GAAG,aACHoF,KAAM,GAAA9J,EAAAI,GAAA,EAAC2M,EAAeA,CAACrC,YAAa,OAEtC,GAAA1K,EAAAI,GAAA,EAACwN,EAAAA,CAAOA,CAAAA,CAACrN,GAAG,SAASD,MAAOmN,EAAa/I,GAAG,UAAUoF,KAAM,GAAA9J,EAAAI,GAAA,EAAC8L,EAAmBA,CAAAA,KAC/EwB,EAAe,GAAA1N,EAAAI,GAAA,EAACwN,EAAAA,CAAOA,CAAAA,CAACrN,GAAG,cAAcD,MAAM,cAAcoE,GAAG,iBAAoB,KACpFgJ,EAAe,GAAA1N,EAAAI,GAAA,EAACwN,EAAAA,CAAOA,CAAAA,CAACrN,GAAG,SAASD,MAAM,gBAAgBoE,GAAG,YAAe,QAE9E6I,EACC,GAAAvN,EAAAI,GAAA,EAAC+D,EAAAA,CAAGA,CAAAA,CAACuC,QAAS,CAACkF,OAAQ,CAAC,WACtB,GAAA5L,EAAAI,GAAA,EAACyN,EAAAA,EAAqBA,CAAAA,CAACN,aAAcA,MAErC,OAGV","sources":["webpack://_N_E/../ui-components/src/components/Page.tsx","webpack://_N_E/../ui-core/src/instance/ConcurrencyTabs.tsx","webpack://_N_E/../ui-core/src/instance/VirtualizedInstanceConcurrencyTable.tsx","webpack://_N_E/../ui-core/src/instance/InstanceConcurrency.tsx","webpack://_N_E/../ui-core/src/nav/InstanceWarningIcon.tsx","webpack://_N_E/../ui-core/src/nav/WorkspaceStatus.tsx","webpack://_N_E/../ui-core/src/instance/InstanceTabs.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Page = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  padding-bottom: 64px;\n  width: 100%;\n`;\n","import {Tab, Tabs} from '@dagster-io/ui-components';\n\nexport type ConcurrencyTab = 'run-concurrency' | 'key-concurrency';\n\ninterface Props {\n  activeTab: ConcurrencyTab;\n  onChange: (tab: ConcurrencyTab) => void;\n}\n\nexport const ConcurrencyTabs = ({activeTab, onChange}: Props) => {\n  return (\n    <Tabs selectedTabId={activeTab} onChange={onChange}>\n      <Tab title=\"Pools\" id=\"key-concurrency\" selected={activeTab === 'key-concurrency'} />\n      <Tab\n        title=\"Run tag concurrency\"\n        id=\"run-concurrency\"\n        selected={activeTab === 'run-concurrency'}\n      />\n    </Tabs>\n  );\n};\n","import {Box, Icon, useDelayedState} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useRef} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  SingleConcurrencyKeyQuery,\n  SingleConcurrencyKeyQueryVariables,\n} from './types/VirtualizedInstanceConcurrencyTable.types';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {Container, HeaderCell, HeaderRow, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {LoadingOrNone} from '../workspace/VirtualizedWorkspaceTable';\n\nconst POOL_TEMPLATE_COLUMNS = '1fr 1fr';\n\nexport const ConcurrencyTable = ({concurrencyKeys}: {concurrencyKeys: string[]}) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: concurrencyKeys.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <ConcurrencyHeader />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const concurrencyKey = concurrencyKeys[index]!;\n            return (\n              <ConcurrencyRow\n                key={key}\n                concurrencyKey={concurrencyKey}\n                height={size}\n                start={start}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n\nconst ConcurrencyHeader = () => {\n  return (\n    <HeaderRow templateColumns={POOL_TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>Pool</HeaderCell>\n      <HeaderCell>Limit</HeaderCell>\n    </HeaderRow>\n  );\n};\nconst ConcurrencyRow = ({\n  concurrencyKey,\n  height,\n  start,\n}: {\n  concurrencyKey: string;\n  height: number;\n  start: number;\n}) => {\n  // Wait 100ms before querying in case we're scrolling the table really fast\n  const shouldQuery = useDelayedState(100);\n  const queryResult = useQuery<SingleConcurrencyKeyQuery, SingleConcurrencyKeyQueryVariables>(\n    SINGLE_CONCURRENCY_KEY_QUERY,\n    {\n      variables: {concurrencyKey},\n      skip: !shouldQuery,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n  const limit = data?.instance.concurrencyLimit;\n\n  const path = `/deployment/concurrency/${encodeURIComponent(concurrencyKey)}`;\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <Box flex={{gap: 4, alignItems: 'center'}}>\n            <Icon name=\"dynamic_feed\" />\n            <Link to={path}>{concurrencyKey}</Link>\n          </Box>\n        </RowCell>\n        <RowCell>\n          {limit ? <div>{limit.slotCount}</div> : <LoadingOrNone queryResult={queryResult} />}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst SINGLE_CONCURRENCY_KEY_QUERY = gql`\n  query SingleConcurrencyKeyQuery($concurrencyKey: String!) {\n    instance {\n      id\n      concurrencyLimit(concurrencyKey: $concurrencyKey) {\n        concurrencyKey\n        slotCount\n        claimedSlots {\n          runId\n          stepKey\n        }\n        pendingSteps {\n          runId\n          stepKey\n          enqueuedTimestamp\n          assignedTimestamp\n          priority\n        }\n      }\n    }\n  }\n`;\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${POOL_TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Heading,\n  Icon,\n  MetadataTableWIP,\n  Mono,\n  NonIdealState,\n  Page,\n  PageHeader,\n  SpinnerWithText,\n  Subheading,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {StyledRawCodeMirror} from '@dagster-io/ui-components/editor';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {ConcurrencyTab, ConcurrencyTabs} from './ConcurrencyTabs';\nimport {InstanceConcurrencyKeyInfo, isValidLimit} from './InstanceConcurrencyKeyInfo';\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {ConcurrencyTable} from './VirtualizedInstanceConcurrencyTable';\nimport {gql, useMutation, useQuery} from '../apollo-client';\nimport {\n  InstanceConcurrencyLimitsQuery,\n  InstanceConcurrencyLimitsQueryVariables,\n  RunQueueConfigFragment,\n  SetConcurrencyLimitMutation,\n  SetConcurrencyLimitMutationVariables,\n} from './types/InstanceConcurrency.types';\nimport {QueryRefreshState} from '../app/QueryRefresh';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nconst DEFAULT_MIN_VALUE = 1;\nconst DEFAULT_MAX_VALUE = 1000;\n\nexport const InstanceConcurrencyPageContent = React.memo(() => {\n  const {concurrencyKey} = useParams<{concurrencyKey?: string}>();\n  if (!concurrencyKey) {\n    return <InstanceConcurrencyIndexContent />;\n  }\n\n  const decodedKey = decodeURIComponent(concurrencyKey);\n  return <InstanceConcurrencyKeyInfo concurrencyKey={decodedKey} />;\n});\n\nexport const InstanceConcurrencyIndexContent = React.memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Concurrency');\n  const queryResult = useQuery<\n    InstanceConcurrencyLimitsQuery,\n    InstanceConcurrencyLimitsQueryVariables\n  >(INSTANCE_CONCURRENCY_LIMITS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n  });\n  const [activeTab, setActiveTab] = React.useState<ConcurrencyTab>('key-concurrency');\n\n  const {data} = queryResult;\n\n  const content = () => {\n    if (!data) {\n      return (\n        <Box padding={{vertical: 64}} flex={{direction: 'column', alignItems: 'center'}}>\n          <SpinnerWithText label=\"Loading concurrency information…\" />\n        </Box>\n      );\n    }\n\n    if (activeTab === 'run-concurrency') {\n      return (\n        <div style={{overflowY: 'auto'}}>\n          <RunConcurrencyContent\n            hasRunQueue={!!data?.instance.runQueuingSupported}\n            runQueueConfig={data?.instance.runQueueConfig}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <div style={{overflowY: 'hidden'}}>\n        <ConcurrencyLimits\n          concurrencyKeys={data.instance.concurrencyLimits.map((limit) => limit.concurrencyKey)}\n          hasSupport={data.instance.supportsConcurrencyLimits}\n          refetch={queryResult.refetch}\n          minValue={data.instance.minConcurrencyLimitValue}\n          maxValue={data.instance.maxConcurrencyLimitValue}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <RunConcurrencyLimitHeader activeTab={activeTab} onChange={setActiveTab} />\n      {content()}\n    </>\n  );\n});\n\nexport const InstanceConcurrencyPage = () => {\n  const {pageTitle} = React.useContext(InstancePageContext);\n  return (\n    <Page style={{padding: 0}}>\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"concurrency\" />}\n      />\n      <InstanceConcurrencyIndexContent />\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConcurrencyPage;\n\nexport const RunConcurrencyContent = ({\n  hasRunQueue,\n  runQueueConfig,\n}: {\n  hasRunQueue: boolean;\n  runQueueConfig: RunQueueConfigFragment | null | undefined;\n  refreshState?: QueryRefreshState;\n}) => {\n  if (!hasRunQueue) {\n    return (\n      <>\n        <Box\n          padding={{vertical: 16, horizontal: 24}}\n          border=\"bottom\"\n          flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n        >\n          <Subheading>Run tag concurrency</Subheading>\n        </Box>\n        <Box padding={{vertical: 16, horizontal: 24}}>\n          Run concurrency is not supported with this run coordinator. To enable run concurrency\n          limits, configure your instance to use the <Mono>QueuedRunCoordinator</Mono> in your{' '}\n          <Mono>dagster.yaml</Mono>. See the{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://docs.dagster.io/deployment/dagster-instance#queuedruncoordinator\"\n          >\n            QueuedRunCoordinator documentation\n          </a>{' '}\n          for more information.\n        </Box>\n      </>\n    );\n  }\n\n  const infoContent = (\n    <Box padding={{vertical: 24, horizontal: 24}}>\n      Run tag concurrency can be set in your deployment settings. See the{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        href=\"https://docs.dagster.io/guides/limiting-concurrency-in-data-pipelines#configuring-run-level-concurrency\"\n      >\n        concurrency documentation\n      </a>{' '}\n      for more information.\n    </Box>\n  );\n\n  const settingsContent = runQueueConfig ? (\n    <MetadataTableWIP style={{marginLeft: -1}}>\n      <tbody>\n        <tr>\n          <td>Max concurrent runs:</td>\n          <td>{runQueueConfig.maxConcurrentRuns}</td>\n        </tr>\n        <tr>\n          <td>Tag concurrency limits:</td>\n          <td>\n            {runQueueConfig.tagConcurrencyLimitsYaml ? (\n              <StyledRawCodeMirror\n                value={runQueueConfig.tagConcurrencyLimitsYaml}\n                options={{readOnly: true, lineNumbers: true, mode: 'yaml'}}\n              />\n            ) : (\n              '-'\n            )}\n          </td>\n        </tr>\n      </tbody>\n    </MetadataTableWIP>\n  ) : null;\n\n  return (\n    <Box>\n      {infoContent}\n      {settingsContent}\n    </Box>\n  );\n};\n\nconst RunConcurrencyLimitHeader = ({\n  activeTab,\n  onChange,\n}: {\n  activeTab: ConcurrencyTab;\n  onChange: (tab: ConcurrencyTab) => void;\n}) => {\n  return (\n    <Box\n      flex={{justifyContent: 'space-between', alignItems: 'center'}}\n      padding={{horizontal: 24}}\n      border=\"bottom\"\n    >\n      <ConcurrencyTabs activeTab={activeTab} onChange={onChange} />\n    </Box>\n  );\n};\n\nexport const ConcurrencyLimits = ({\n  hasSupport,\n  concurrencyKeys,\n  refetch,\n  minValue,\n  maxValue,\n}: {\n  concurrencyKeys: string[];\n  refetch: () => void;\n  hasSupport?: boolean;\n  maxValue?: number;\n  minValue?: number;\n  selectedKey?: string | null;\n  onSelectKey?: (key: string | undefined) => void;\n}) => {\n  const [showAdd, setShowAdd] = React.useState<boolean>(false);\n  const [search, setSearch] = React.useState('');\n\n  const onAdd = () => setShowAdd(true);\n\n  const sortedKeys = React.useMemo(() => {\n    return [...concurrencyKeys]\n      .filter((key) => key.includes(search))\n      .sort((a, b) => COMMON_COLLATOR.compare(a, b));\n  }, [concurrencyKeys, search]);\n\n  if (!hasSupport) {\n    return (\n      <>\n        <ConcurrencyLimitHeader />\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency support\"\n            description={\n              'This instance does not currently support pool-based concurrency limits. You may ' +\n              'need to run `dagster instance migrate` to add the necessary tables to your ' +\n              'dagster storage to support this feature.'\n            }\n          />\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <Box flex={{direction: 'column'}} style={{overflow: 'auto', height: '100%'}}>\n      <ConcurrencyLimitHeader onAdd={onAdd} search={search} setSearch={setSearch} />\n      {concurrencyKeys.length === 0 ? (\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No pool limits\"\n            description={\n              <>\n                No pool limits have been configured for this instance.&nbsp;\n                <ButtonLink onClick={() => onAdd()}>Add a pool limit</ButtonLink>.\n              </>\n            }\n          />\n        </Box>\n      ) : !sortedKeys.length ? (\n        <Box padding={16}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"No pool limits\"\n            description=\"No pool limits matching the filter.\"\n          />\n        </Box>\n      ) : (\n        <ConcurrencyTable concurrencyKeys={sortedKeys} />\n      )}\n      <AddConcurrencyLimitDialog\n        open={!!showAdd}\n        onClose={() => setShowAdd(false)}\n        onComplete={refetch}\n        minValue={minValue ?? DEFAULT_MIN_VALUE}\n        maxValue={maxValue ?? DEFAULT_MAX_VALUE}\n      />\n    </Box>\n  );\n};\n\nconst ConcurrencyLimitHeader = ({\n  onAdd,\n  setSearch,\n  search,\n}: {\n  onAdd?: () => void;\n} & (\n  | {\n      setSearch: (searchString: string) => void;\n      search: string;\n    }\n  | {setSearch?: never; search?: never}\n)) => {\n  return (\n    <Box flex={{direction: 'column'}}>\n      {setSearch ? (\n        <Box\n          flex={{direction: 'row', justifyContent: 'space-between'}}\n          padding={{vertical: 16, horizontal: 24}}\n          border=\"bottom\"\n        >\n          <TextInput\n            value={search || ''}\n            style={{width: '30vw', minWidth: 150, maxWidth: 400}}\n            placeholder=\"Filter pools\"\n            onChange={(e: React.ChangeEvent<any>) => setSearch(e.target.value)}\n          />\n          {onAdd ? (\n            <Button icon={<Icon name=\"add_circle\" />} onClick={() => onAdd()}>\n              Add pool limit\n            </Button>\n          ) : null}\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\nconst AddConcurrencyLimitDialog = ({\n  open,\n  onClose,\n  onComplete,\n  maxValue,\n  minValue,\n}: {\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n  maxValue: number;\n  minValue: number;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n  const [keyInput, setKeyInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n    setKeyInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey: keyInput, limit: parseInt(limitInput.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  return (\n    <Dialog isOpen={open} title=\"Add pool limit\" onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Pool:</Box>\n        <Box margin={{bottom: 16}}>\n          <TextInput\n            value={keyInput || ''}\n            onChange={(e) => setKeyInput(e.target.value)}\n            placeholder=\"Pool\"\n          />\n        </Box>\n        <Box margin={{bottom: 4}}>\n          Pool limit ({minValue}-{maxValue}):\n        </Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder={`${minValue} - ${maxValue}`}\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          intent=\"primary\"\n          onClick={save}\n          disabled={\n            !isValidLimit(limitInput.trim(), minValue, maxValue) || !keyInput || isSubmitting\n          }\n        >\n          {isSubmitting ? 'Adding...' : 'Add limit'}\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst RUN_QUEUE_CONFIG_FRAGMENT = gql`\n  fragment RunQueueConfigFragment on RunQueueConfig {\n    maxConcurrentRuns\n    tagConcurrencyLimitsYaml\n  }\n`;\n\nexport const INSTANCE_CONCURRENCY_LIMITS_QUERY = gql`\n  query InstanceConcurrencyLimitsQuery {\n    instance {\n      id\n      supportsConcurrencyLimits\n      runQueuingSupported\n      runQueueConfig {\n        ...RunQueueConfigFragment\n      }\n      minConcurrencyLimitValue\n      maxConcurrencyLimitValue\n      concurrencyLimits {\n        concurrencyKey\n      }\n    }\n  }\n\n  ${RUN_QUEUE_CONFIG_FRAGMENT}\n`;\n\nconst SET_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation SetConcurrencyLimit($concurrencyKey: String!, $limit: Int!) {\n    setConcurrencyLimit(concurrencyKey: $concurrencyKey, limit: $limit)\n  }\n`;\n","import {Colors, Icon} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const InstanceWarningIcon = memo(() => {\n  const {daemons} = useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const WorkspaceStatus = memo(({placeholder}: {placeholder: boolean}) => {\n  const {codeLocations} = useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.accentGray()} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {Box, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\nimport {QueryResult} from '../apollo-client';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? <TabLink id=\"concurrency\" title=\"Concurrency\" to=\"/concurrency\" /> : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n"],"names":["Page","styled","div","withConfig","ConcurrencyTabs","activeTab","onChange","param","jsx_runtime","jsxs","Tabs","selectedTabId","jsx","Tab","title","id","selected","POOL_TEMPLATE_COLUMNS","ConcurrencyTable","concurrencyKeys","parentRef","useRef","rowVirtualizer","useVirtualizer","count","length","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","style","overflow","Container","ref","ConcurrencyHeader","Inner","$totalHeight","map","index","key","size","start","concurrencyKey","ConcurrencyRow","height","HeaderRow","templateColumns","sticky","HeaderCell","shouldQuery","useDelayedState","queryResult","useQuery","SINGLE_CONCURRENCY_KEY_QUERY","variables","skip","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","limit","instance","concurrencyLimit","path","concat","encodeURIComponent","Row","$height","$start","RowGrid","border","RowCell","Box","flex","gap","alignItems","Icon","name","Link","to","slotCount","LoadingOrNone","gql","InstanceConcurrencyPageContent","React","useParams","InstanceConcurrencyIndexContent","decodedKey","decodeURIComponent","InstanceConcurrencyKeyInfo","useTrackPageView","useDocumentTitle","INSTANCE_CONCURRENCY_LIMITS_QUERY","notifyOnNetworkStatusChange","setActiveTab","Fragment","RunConcurrencyLimitHeader","overflowY","RunConcurrencyContent","hasRunQueue","runQueuingSupported","runQueueConfig","ConcurrencyLimits","concurrencyLimits","hasSupport","supportsConcurrencyLimits","refetch","minValue","minConcurrencyLimitValue","maxValue","maxConcurrencyLimitValue","padding","vertical","direction","SpinnerWithText","label","InstanceConcurrencyPage","pageTitle","InstancePageContext","PageHeader","Heading","tabs","InstanceTabs","tab","InstanceConcurrency","horizontal","justifyContent","Subheading","Mono","a","target","rel","href","infoContent","settingsContent","MetadataTableWIP","marginLeft","tbody","tr","td","maxConcurrentRuns","tagConcurrencyLimitsYaml","StyledRawCodeMirror","value","options","readOnly","lineNumbers","mode","showAdd","setShowAdd","search","setSearch","onAdd","sortedKeys","filter","includes","sort","b","COMMON_COLLATOR","compare","ConcurrencyLimitHeader","margin","NonIdealState","icon","description","ButtonLink","onClick","AddConcurrencyLimitDialog","open","onClose","onComplete","TextInput","width","minWidth","maxWidth","placeholder","e","Button","isSubmitting","setIsSubmitting","limitInput","setLimitInput","keyInput","setKeyInput","setConcurrencyLimit","useMutation","SET_CONCURRENCY_LIMIT_MUTATION","save","parseInt","trim","Dialog","isOpen","DialogBody","bottom","DialogFooter","intent","disabled","isValidLimit","RUN_QUEUE_CONFIG_FRAGMENT","InstanceWarningIcon","memo","daemons","useContext","DeploymentStatusContext","WarningTooltip","content","position","modifiers","offset","enabled","color","Colors","WorkspaceStatus","codeLocations","type","Tooltip","placement","Spinner","purpose","fillColor","refreshState","props","healthTitle","canSeeConfig","useCanSeeConfig","TabLink","QueryRefreshCountdown"],"sourceRoot":""}