[project]
name = "failextract"
version = "1.0.0"
description = "Comprehensive test failure extraction and reporting library for pytest"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Ryan Taylor", email = "ryan@beta-reduce.net"}
]
license = {text = "Apache-2.0"}
keywords = ["testing", "pytest", "debugging", "test-failures", "analysis", "reporting"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
    "Framework :: Pytest",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
dependencies = [
    # Core dependencies for basic functionality only
    # Optional features require extras (e.g., pip install failextract[formatters])
]

[project.urls]
Homepage = "https://github.com/dingo-actual/failextract"
Repository = "https://github.com/dingo-actual/failextract"
Issues = "https://github.com/dingo-actual/failextract/issues"
Changelog = "https://github.com/dingo-actual/failextract/blob/main/CHANGELOG.md"

[project.optional-dependencies]
# Individual feature sets
formatters = [
    "pyyaml>=5.4",    # YAML formatter only
]
config = [
    "pydantic>=1.10",
]
cli = [
    "rich>=12.0",
    "typer>=0.7",
]

# Logical groupings
all = [
    "failextract[formatters]",
    "failextract[config]",
    "failextract[cli]",
]

# Development dependencies
development = [
    "pytest>=7.0",
    "pytest-cov>=4.0", 
    "hypothesis>=6.50",
    "ruff>=0.1.0",
    "mypy>=1.0",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "sphinx-autodoc-typehints>=1.20",
    "myst-parser>=1.0",
    "sphinx-autobuild>=2021.1",
]

[project.scripts]
failextract = "failextract.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/failextract"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
    "/README.md",
    "/pyproject.toml"
]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "B", "I"]
ignore = ["E501"]  # Line too long (handled by formatter)

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["src/failextract"]
branch = false
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

