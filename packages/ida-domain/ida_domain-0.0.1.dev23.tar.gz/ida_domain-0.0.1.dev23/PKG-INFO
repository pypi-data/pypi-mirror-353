Metadata-Version: 2.4
Name: ida-domain
Version: 0.0.1.dev23
Summary: IDA Domain API - Python interface for IDA Pro reverse engineering platform
Author-email: Hex-Rays SA <support@hex-rays.com>
License: MIT
Project-URL: Documentation, https://hexrayssa.github.io/ida-api-domain/
Project-URL: Hex-Rays, https://hex-rays.com/
Keywords: ida,ida-pro,reverse-engineering,disassembler,binary-analysis,malware-analysis,security
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Disassemblers
Classifier: Topic :: Security
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: System :: Software Distribution
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE.TXT
Requires-Dist: idapro>=0.0.4.dev1
Provides-Extra: dev
Requires-Dist: pytest>=8.3.0; extra == "dev"
Requires-Dist: sphinx>=8.2.3; extra == "dev"
Requires-Dist: sphinx-autodoc-typehints>=3.2.0; extra == "dev"
Requires-Dist: sphinx-rtd-theme>=3.0.2; extra == "dev"
Requires-Dist: setuptools>=78.0.0; extra == "dev"
Requires-Dist: setuptools-scm>=8; extra == "dev"
Dynamic: license-file

# IDA Domain

[![PyPI version](https://badge.fury.io/py/ida-domain.svg)](https://badge.fury.io/py/ida-domain)
[![Python Support](https://img.shields.io/pypi/pyversions/ida-domain.svg)](https://pypi.org/project/ida-domain/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

This project provides a **Domain Model** for IDA Pro, allowing seamless interaction with IDA SDK components via Python.

## 🚀 Features

- **Domain Model Interface**: Clean, Pythonic API on top of IDA Python
- **Easy Installation**: Simple pip install from PyPI
- **Documentation**: API reference and usage examples
- **Cross-Platform**: Works on Windows, macOS, and Linux

## 📖 Documentation

Documentation is available at: **https://hexrayssa.github.io/ida-api-domain/**

## 🎯 Quick Example

```python
import ida_domain

# Open a binary for analysis
db = ida_domain.Database()
if db.open("path/to/binary"):
    print(f"Entry point: {hex(db.entry_point)}")

    # Iterate through functions
    for func in db.functions.get_all():
        print(f"Function: {func.name} at {hex(func.start_ea)}")

    db.close()
```

## 📦 What's Included

After installation, you can access:
- **Documentation Helper**: Easy access to online documentation
- **Example Code**: Sample usage patterns shown in the docs helper
- **API Reference**: Available classes and methods documentation

```python
import ida_domain.docs_examples as docs
docs.open_documentation()  # Opens docs in browser
docs.show_example_usage()  # Shows example code
```

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE.TXT) file for details.

## ⚙️ Installation

### (Optional) Using UV

Install from https://docs.astral.sh/uv/getting-started/installation/
```bash
git clone git@github.com:HexRaysSA/ida-api-domain.git
cd ida-api-domain
uv sync
uv build
# Documentation building using uv
cd docs && make
# Publish packaged (not yet implemented)
uv publish
```

### Prerequisites

Set the `IDADIR` environment variable to point to your IDA installation directory:

```bash
export IDADIR="[IDA Installation Directory]"
```

**Example:**
```bash
export IDADIR="/Applications/IDA Professional 9.1.app/Contents/MacOS/"
```

> **Note:** If you have already installed and configured the `idapro` Python package, setting `IDADIR` is not required.

### Install from PyPI (Recommended)

```bash
pip install ida-domain
```

### Install from Source

```bash
git clone git@github.com:HexRaysSA/ida-api-domain.git
cd ida-api-domain
pip install .
```

### Development Installation

For development, install in editable mode:

```bash
git clone git@github.com:HexRaysSA/ida-api-domain.git
cd ida-api-domain
pip install -e .
```

## 🧪 Testing

Run the test suite using pytest:

```bash
pytest tests/
```

## 📚 Documentation

The IDA Domain API documentation is built with Sphinx and includes:

- **API Reference**: Documentation of available classes and methods
- **Installation Guide**: Setup instructions
- **Examples**: Usage examples for common tasks
- **Getting Started**: Basic guide for new users

### Building Documentation Locally

To build the documentation locally:

```bash
cd docs
pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
make html
```

The generated documentation will be available at `docs/_build/html/index.html`.

### Online Documentation

The latest documentation is available at: https://hexrayssa.github.io/ida-api-domain/

## 📝 Examples

Check the `examples/` directory for usage examples:

```bash
python examples/traverse.py
```

## 🛠️ Development

### Prerequisites for Development

- Python 3.7+
- pytest for testing

### Running Tests

```bash
pip install pytest
pytest tests/
```

### Project Structure

```
ida-api-domain/
├── ida_domain/          # Main Python package
├── examples/            # Usage examples
├── tests/              # Test suite
├── docs/               # Documentation
└── setup.py           # Package configuration

## 📝 Usage Example

Here's an example showing how to use IDA Domain to analyze a binary:

```python
import argparse
import ida_domain

parser = argparse.ArgumentParser(description=f"IDA Domain usage example, version {ida_domain.VersionInfo.api_version}")
parser.add_argument("-f", "--input-file", help="Binary input file to be loaded", type=str, required=True)
args = parser.parse_args()

print(parser.description)

ida_options = (ida_domain.IdaCommandBuilder()
                .auto_analysis(True)
                .new_database(True))

db = ida_domain.Database()

if db.open(args.input_file, ida_options):
    print(f"Entry point: {hex(db.entry_point)}")

    print(f"Metadata:")
    for key, value in db.metadata.items():
        print(f" {key}: {value}")

    for f in db.functions.get_all():
        print(f"Function - name {f.name}, start ea {hex(f.start_ea)}, end ea {f.end_ea}")

    for s in db.segments.get_all():
        print(f"Segment - name {ida_segment.get_segm_name(s)}")

    for t in db.types.get_all():
        if t.name is not None:
            print(f"Type - name {t.name}, id {t.get_tid()}")
        else:
            print(f"Type - id {t.get_tid()}")

    for c in db.comments.get_all(False):
        print(f"Comment - value {c}")

    for s1 in db.strings.get_all():
        print(f"String - value {s1}")

    for n in db.names.get_all():
        print(f"Name - value {n}")

    for b in db.basic_blocks.get_between(db.minimum_ea, db.maximum_ea):
        print(f"Basic block - start ea {hex(b.start_ea)}, end ea {hex(b.end_ea)}")

    for inst in db.instructions.get_between(db.minimum_ea, db.maximum_ea):
        ret, dec = db.instructions.get_disassembly(inst)
        if ret:
            print(f"Instruction - ea {hex(inst.ea)}, asm {dec}")

    db.close(False)```

For more examples and API documentation, visit: https://hexrayssa.github.io/ida-api-domain/
