# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1GetUserStorageResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acked_storage_violation': 'bool',
        'in_storage_violation': 'bool',
        'indexation_in_progress': 'bool',
        'storage_bytes': 'str'
    }

    attribute_map = {
        'acked_storage_violation': 'ackedStorageViolation',
        'in_storage_violation': 'inStorageViolation',
        'indexation_in_progress': 'indexationInProgress',
        'storage_bytes': 'storageBytes'
    }

    def __init__(self, acked_storage_violation: 'bool' =None, in_storage_violation: 'bool' =None, indexation_in_progress: 'bool' =None, storage_bytes: 'str' =None):  # noqa: E501
        """V1GetUserStorageResponse - a model defined in Swagger"""  # noqa: E501
        self._acked_storage_violation = None
        self._in_storage_violation = None
        self._indexation_in_progress = None
        self._storage_bytes = None
        self.discriminator = None
        if acked_storage_violation is not None:
            self.acked_storage_violation = acked_storage_violation
        if in_storage_violation is not None:
            self.in_storage_violation = in_storage_violation
        if indexation_in_progress is not None:
            self.indexation_in_progress = indexation_in_progress
        if storage_bytes is not None:
            self.storage_bytes = storage_bytes

    @property
    def acked_storage_violation(self) -> 'bool':
        """Gets the acked_storage_violation of this V1GetUserStorageResponse.  # noqa: E501


        :return: The acked_storage_violation of this V1GetUserStorageResponse.  # noqa: E501
        :rtype: bool
        """
        return self._acked_storage_violation

    @acked_storage_violation.setter
    def acked_storage_violation(self, acked_storage_violation: 'bool'):
        """Sets the acked_storage_violation of this V1GetUserStorageResponse.


        :param acked_storage_violation: The acked_storage_violation of this V1GetUserStorageResponse.  # noqa: E501
        :type: bool
        """

        self._acked_storage_violation = acked_storage_violation

    @property
    def in_storage_violation(self) -> 'bool':
        """Gets the in_storage_violation of this V1GetUserStorageResponse.  # noqa: E501


        :return: The in_storage_violation of this V1GetUserStorageResponse.  # noqa: E501
        :rtype: bool
        """
        return self._in_storage_violation

    @in_storage_violation.setter
    def in_storage_violation(self, in_storage_violation: 'bool'):
        """Sets the in_storage_violation of this V1GetUserStorageResponse.


        :param in_storage_violation: The in_storage_violation of this V1GetUserStorageResponse.  # noqa: E501
        :type: bool
        """

        self._in_storage_violation = in_storage_violation

    @property
    def indexation_in_progress(self) -> 'bool':
        """Gets the indexation_in_progress of this V1GetUserStorageResponse.  # noqa: E501


        :return: The indexation_in_progress of this V1GetUserStorageResponse.  # noqa: E501
        :rtype: bool
        """
        return self._indexation_in_progress

    @indexation_in_progress.setter
    def indexation_in_progress(self, indexation_in_progress: 'bool'):
        """Sets the indexation_in_progress of this V1GetUserStorageResponse.


        :param indexation_in_progress: The indexation_in_progress of this V1GetUserStorageResponse.  # noqa: E501
        :type: bool
        """

        self._indexation_in_progress = indexation_in_progress

    @property
    def storage_bytes(self) -> 'str':
        """Gets the storage_bytes of this V1GetUserStorageResponse.  # noqa: E501


        :return: The storage_bytes of this V1GetUserStorageResponse.  # noqa: E501
        :rtype: str
        """
        return self._storage_bytes

    @storage_bytes.setter
    def storage_bytes(self, storage_bytes: 'str'):
        """Sets the storage_bytes of this V1GetUserStorageResponse.


        :param storage_bytes: The storage_bytes of this V1GetUserStorageResponse.  # noqa: E501
        :type: str
        """

        self._storage_bytes = storage_bytes

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetUserStorageResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GetUserStorageResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetUserStorageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1GetUserStorageResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
