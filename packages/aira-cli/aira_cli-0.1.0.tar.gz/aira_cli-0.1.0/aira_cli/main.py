import argparse
from aira_cli.system import system_info, system_status, system_update_check, system_update_apply, system_update_history, system_reboot, system_shutdown, system_healthcheck, system_disk
from aira_cli.docker import docker_ps, docker_images, docker_logs, docker_start, docker_stop, docker_restart, docker_compose_up, docker_compose_down, docker_compose_build, docker_compose_ps, docker_cleanup
from aira_cli.network import network_status, network_firewall_list, network_firewall_allow, network_firewall_deny, network_firewall_block, network_firewall_unblock, network_firewall_reset, network_dns_add_host, network_dns_remove_host, network_dns_show_hosts, network_dns_configure_resolver
from aira_cli.storage import storage_usage, storage_logs_show_sizes, storage_logs_clean, storage_backup_create, storage_backup_list, storage_backup_restore
from aira_cli.config import config_set, config_get, config_defaults
from aira_cli.setup import setup_pre_check, setup_apply_deps, setup_install_aira

def main():
    parser = argparse.ArgumentParser(description="AIRA CLI")
    parser.add_argument("--json", action="store_true", help="Output results in JSON format")
    parser.add_argument("--no-color", action="store_true", help="Disable colored output")
    parser.add_argument("--force", "-y", action="store_true", help="Bypass confirmation prompts")

    subparsers = parser.add_subparsers(dest="command")

    # System commands
    system_parser = subparsers.add_parser("system", help="System commands")
    system_subparsers = system_parser.add_subparsers(dest="subcommand")
    system_subparsers.add_parser("info", help="Display system information").set_defaults(func=system_info)
    system_subparsers.add_parser("status", help="Check system status").set_defaults(func=system_status)
    update_parser = system_subparsers.add_parser("update", help="Manage system updates")
    update_subparsers = update_parser.add_subparsers(dest="update_subcommand")
    update_subparsers.add_parser("check", help="Check for updates").set_defaults(func=system_update_check)
    update_subparsers.add_parser("apply", help="Apply updates").set_defaults(func=system_update_apply)
    update_subparsers.add_parser("history", help="View update history").set_defaults(func=system_update_history)
    system_subparsers.add_parser("reboot", help="Reboot the system").set_defaults(func=system_reboot)
    system_subparsers.add_parser("shutdown", help="Shutdown the system").set_defaults(func=system_shutdown)
    system_subparsers.add_parser("healthcheck", help="Perform system health check").set_defaults(func=system_healthcheck)
    system_subparsers.add_parser("disk", help="Check disk usage").set_defaults(func=system_disk)

    # Docker commands
    docker_parser = subparsers.add_parser("docker", help="Docker commands")
    docker_subparsers = docker_parser.add_subparsers(dest="subcommand")
    docker_subparsers.add_parser("ps", help="List running containers").set_defaults(func=docker_ps)
    docker_subparsers.add_parser("images", help="List Docker images").set_defaults(func=docker_images)
    logs_parser = docker_subparsers.add_parser("logs", help="View container logs")
    logs_parser.add_argument("container", help="Container name or ID")
    logs_parser.add_argument("--follow", action="store_true", help="Follow log output")
    logs_parser.add_argument("--tail", type=int, help="Number of lines to show from the end of the logs")
    logs_parser.set_defaults(func=docker_logs)
    start_parser = docker_subparsers.add_parser("start", help="Start a container")
    start_parser.add_argument("container", help="Container name or ID")
    start_parser.set_defaults(func=docker_start)
    stop_parser = docker_subparsers.add_parser("stop", help="Stop a container")
    stop_parser.add_argument("container", help="Container name or ID")
    stop_parser.set_defaults(func=docker_stop)
    restart_parser = docker_subparsers.add_parser("restart", help="Restart a container")
    restart_parser.add_argument("container", help="Container name or ID")
    restart_parser.set_defaults(func=docker_restart)
    compose_parser = docker_subparsers.add_parser("compose", help="Docker Compose commands")
    compose_subparsers = compose_parser.add_subparsers(dest="compose_subcommand")
    compose_subparsers.add_parser("up", help="Start or rebuild and start services").set_defaults(func=docker_compose_up)
    compose_subparsers.add_parser("down", help="Stop and remove services").set_defaults(func=docker_compose_down)
    compose_subparsers.add_parser("build", help="Build or rebuild services").set_defaults(func=docker_compose_build)
    compose_subparsers.add_parser("ps", help="List services").set_defaults(func=docker_compose_ps)
    docker_subparsers.add_parser("cleanup", help="Remove unused Docker resources").set_defaults(func=docker_cleanup)

    # Network commands
    network_parser = subparsers.add_parser("network", help="Network commands")
    network_subparsers = network_parser.add_subparsers(dest="subcommand")
    network_subparsers.add_parser("status", help="Display network status").set_defaults(func=network_status)
    firewall_parser = network_subparsers.add_parser("firewall", help="Manage firewall rules")
    firewall_subparsers = firewall_parser.add_subparsers(dest="firewall_subcommand")
    firewall_subparsers.add_parser("list", help="List firewall rules").set_defaults(func=network_firewall_list)
    allow_parser = firewall_subparsers.add_parser("allow", help="Allow incoming traffic")
    allow_parser.add_argument("port", type=int, help="Port number")
    allow_parser.add_argument("--protocol", choices=["tcp", "udp"], help="Protocol (tcp/udp)")
    allow_parser.add_argument("--from", dest="from_ip", help="Source IP address")
    allow_parser.set_defaults(func=network_firewall_allow)
    deny_parser = firewall_subparsers.add_parser("deny", help="Deny incoming traffic")
    deny_parser.add_argument("port", type=int, help="Port number")
    deny_parser.add_argument("--protocol", choices=["tcp", "udp"], help="Protocol (tcp/udp)")
    deny_parser.add_argument("--from", dest="from_ip", help="Source IP address")
    deny_parser.set_defaults(func=network_firewall_deny)
    block_parser = firewall_subparsers.add_parser("block", help="Block traffic from an IP address")
    block_parser.add_argument("ip_address", help="IP address to block")
    block_parser.set_defaults(func=network_firewall_block)
    unblock_parser = firewall_subparsers.add_parser("unblock", help="Unblock traffic from an IP address")
    unblock_parser.add_argument("ip_address", help="IP address to unblock")
    unblock_parser.set_defaults(func=network_firewall_unblock)
    firewall_subparsers.add_parser("reset", help="Reset firewall rules").set_defaults(func=network_firewall_reset)
    dns_parser = network_subparsers.add_parser("dns", help="Manage DNS settings")
    dns_subparsers = dns_parser.add_subparsers(dest="dns_subcommand")
    add_host_parser = dns_subparsers.add_parser("add-host", help="Add a host entry")
    add_host_parser.add_argument("hostname", help="Hostname")
    add_host_parser.add_argument("ip_address", help="IP address")
    add_host_parser.set_defaults(func=network_dns_add_host)
    remove_host_parser = dns_subparsers.add_parser("remove-host", help="Remove a host entry")
    remove_host_parser.add_argument("hostname", help="Hostname")
    remove_host_parser.set_defaults(func=network_dns_remove_host)
    dns_subparsers.add_parser("show-hosts", help="Show host entries").set_defaults(func=network_dns_show_hosts)
    configure_resolver_parser = dns_subparsers.add_parser("configure-resolver", help="Configure DNS resolver")
    configure_resolver_parser.add_argument("nameservers", nargs="+", help="List of nameserver IPs")
    configure_resolver_parser.set_defaults(func=network_dns_configure_resolver)

    # Storage commands
    storage_parser = subparsers.add_parser("storage", help="Storage commands")
    storage_subparsers = storage_parser.add_subparsers(dest="subcommand")
    storage_subparsers.add_parser("usage", help="Show disk space usage").set_defaults(func=storage_usage)
    logs_parser = storage_subparsers.add_parser("logs", help="Manage logs")
    logs_subparsers = logs_parser.add_subparsers(dest="logs_subcommand")
    logs_subparsers.add_parser("show-sizes", help="Show log sizes").set_defaults(func=storage_logs_show_sizes)
    clean_parser = logs_subparsers.add_parser("clean", help="Clean old logs")
    clean_parser.add_argument("--older-than", type=int, default=30, help="Delete logs older than N days")
    clean_parser.set_defaults(func=storage_logs_clean)
    backup_parser = storage_subparsers.add_parser("backup", help="Manage backups")
    backup_subparsers = backup_parser.add_subparsers(dest="backup_subcommand")
    create_parser = backup_subparsers.add_parser("create", help="Create a backup")
    create_parser.add_argument("--name", help="Backup name")
    create_parser.add_argument("--destination", help="Backup destination")
    create_parser.set_defaults(func=storage_backup_create)
    backup_subparsers.add_parser("list", help="List backups").set_defaults(func=storage_backup_list)
    restore_parser = backup_subparsers.add_parser("restore", help="Restore from a backup")
    restore_parser.add_argument("backup_name", help="Backup name")
    restore_parser.set_defaults(func=storage_backup_restore)

    # Config commands
    config_parser = subparsers.add_parser("config", help="Configuration commands")
    config_subparsers = config_parser.add_subparsers(dest="subcommand")
    set_parser = config_subparsers.add_parser("set", help="Set a configuration value")
    set_parser.add_argument("key", help="Configuration key")
    set_parser.add_argument("value", help="Configuration value")
    set_parser.set_defaults(func=config_set)
    get_parser = config_subparsers.add_parser("get", help="Get a configuration value")
    get_parser.add_argument("key", help="Configuration key")
    get_parser.set_defaults(func=config_get)
    config_subparsers.add_parser("defaults", help="Apply default configurations").set_defaults(func=config_defaults)

    # Setup commands
    setup_parser = subparsers.add_parser("setup", help="Setup commands")
    setup_subparsers = setup_parser.add_subparsers(dest="subcommand")
    setup_subparsers.add_parser("pre-check", help="Run pre-checks").set_defaults(func=setup_pre_check)
    setup_subparsers.add_parser("apply-deps", help="Install dependencies").set_defaults(func=setup_apply_deps)
    install_parser = setup_subparsers.add_parser("install-aira", help="Install AIRA")
    install_parser.add_argument("--version", help="AIRA version to install")
    install_parser.set_defaults(func=setup_install_aira)

    args = parser.parse_args()
    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()