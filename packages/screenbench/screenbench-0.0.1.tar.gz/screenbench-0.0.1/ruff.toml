line-length = 120
target-version = "py311"
exclude = ["*.ipynb"]

[lint]
# See https://docs.astral.sh/ruff/rules/ for the list of all rules.
select = [
  "D", # pydocstyle.
  "E", # pycodestyle.
  "F", # Pyflakes.
  "FAST", # FastAPI.
  "I", # isort.
  "NPY", # NumPy-specific rules.
  "PL", # Pylint.
  "RUF100", # Checks for `noqa` directives that are no longer applicable.
  "UP006", # Checks for the use of generics that can be replaced with standard library variants based on PEP 585.
  "UP007", # Check for type annotations that can be rewritten based on PEP 604 syntax.
  "UP045", # Check for `typing.Optional` annotations that can be rewritten based on PEP 604 syntax.
  "W", # pycodestyle.
]
ignore = [
  "D100", # Checks for undocumented public module definitions.
  "D101", # Checks for undocumented public class definitions.
  "D102", # Checks for undocumented public method definitions.
  "D103", # Checks for undocumented public function definitions.
  "D104", # Checks for undocumented public package definitions.
  "D105", # Checks for undocumented magic method definitions.
  "D106", # Checks for undocumented public class definitions, for nested classes.
  "D107", # Checks for public `__init__` method definitions that are missing docstrings.
  "D200", # Checks for single-line docstrings that are broken across multiple lines.
  "D202", # Checks for docstrings on functions that are separated by one or more blank lines from the function body.
  "D205", # Checks for docstring summary lines that are not separated from the docstring description by one blank line.
  "D208", # Checks for over-indented docstrings.
  "D209", # Checks for multi-line docstrings whose closing quotes are not on their own line.
  "D210", # Checks for surrounding whitespace in docstrings.
  "D212", # Checks for docstring summary lines that are not positioned on the first physical line of the docstring.
  "D300", # Checks for docstrings that use `'''triple single quotes'''` instead of `"""triple double quotes"""`.
  "D301", # Checks for docstrings that include backslashes, but are not defined as raw string literals.
  "D403", # Checks for docstrings that do not start with a capital letter.
  "D405", # Checks for section headers in docstrings that do not begin with capital letters.
  "D410", # Checks for docstring sections that are not separated by a single blank line.
  "D411", # Checks for docstring sections that are not separated by a blank line.
  "D412", # Checks for docstring sections that contain blank lines between a section header and a section body.
  "D414", # Checks for docstrings with empty sections.
  "D415", # Checks for docstrings in which the first line does not end in a punctuation mark, such as a period, question mark, or exclamation point.
  "D416", # Checks for docstring section headers that do not end with a colon.
  "D417", # Checks for function docstrings that do not include documentation for all parameters in the function.
  "E501", # Checks for lines that exceed the specified maximum character length.
  "E721", # Checks for object type comparisons using `==` and other comparison operators.
  "E741", # Checks for the use of the characters 'l', 'O', or 'I' as variable names.
  "F821", # Checks for uses of undefined names.
  "F841", # Checks for the presence of unused variables in function scopes.
  "NPY002", # Checks for the use of legacy `np.random` function calls.
  "PLC0206", # Checks for dictionary iterations that extract the dictionary value via explicit indexing, instead of using `.items()`.
  "PLC0415", # Checks for `import` statements outside of a module's top-level scope, such as within a function or class definition.
  "PLC1802", # Checks for usage of call of 'len' on sequences in boolean test context.
  "PLC1901", # Checks for comparisons to empty strings.
  "PLC2701", # Checks for import statements that import a private name (a name starting with an underscore `_`) from another module.
  "PLC2801", # Checks for explicit use of dunder methods, like `__str__` and `__add__`.
  "PLE1205", # Checks for too many positional arguments for a `logging` format string.
  "PLR0904", # Checks for classes with too many public methods.
  "PLR0911", # Checks for functions or methods with too many return statements.
  "PLR0912", # Checks for functions or methods with too many branches, including (nested) `if`, `elif`, and `else` branches, `for` loops, `try`-`except` clauses, and `match` and `case` statements.
  "PLR0913", # Checks for function definitions that include too many arguments.
  "PLR0914", # Checks for functions that include too many local variables.
  "PLR0915", # Checks for functions or methods with too many statements.
  "PLR0916", # Checks for too many Boolean expressions in an `if` statement.
  "PLR0917", # Checks for function definitions that include too many positional arguments.
  "PLR1702", # Checks for functions or methods with too many nested blocks.
  "PLR1704", # Checks for variables defined in `for`, `try`, `with` statements that redefine function parameters.
  "PLR1714", # Checks for repeated equality comparisons that can rewritten as a membership test.
  "PLR1722", # Checks for uses of the `exit()` and `quit()`.
  "PLR1730", # Checks for `if` statements that can be replaced with `min()` or `max()` calls.
  "PLR1733", # Checks for key-based dict accesses during `.items()` iterations.
  "PLR2004", # Checks for the use of unnamed numerical constants ("magic") values in comparisons.
  "PLR5501", # Checks for `else` blocks that consist of a single `if` statement.
  "PLR6104", # Checks for assignments that can be replaced with augmented assignment statements.
  "PLR6201", # Checks for membership tests on `list` and `tuple` literals.
  "PLR6301", # Checks for the presence of unused `self` parameter in methods definitions.
  "PLW0108", # Checks for `lambda` definitions that consist of a single function call with the same arguments as the `lambda` itself.
  "PLW0602", # Checks for `global` variables that are not assigned a value in the current scope.
  "PLW0603", # Checks for the use of `global` statements to update identifiers.
  "PLW1510", # Checks for uses of `subprocess.run` without an explicit `check` argument.
  "PLW1514", # Checks for uses of `open` and related calls without an explicit `encoding` argument.
  "PLW2901", # Checks for variables defined in `for` loops and `with` statements that get overwritten within the body, for example by another `for` loop or `with` statement or by direct assignment.
  "PLW3201", # Checks for dunder methods that have no special meaning in Python 3.
]
preview = true # Allow for beta-tested rules

[lint.pydocstyle]
convention = "google"

[lint.per-file-ignores]
"**/tests/**/*.py" = [
  "ARG", # flake8-unused-arguments.
  "D", # pydocstyle.
  "FBT", # flake8-boolean-trap.
  "S101", # Checks for uses of the `assert` keyword.
  "S311", # Checks for uses of cryptographically weak pseudo-random number generators
]
