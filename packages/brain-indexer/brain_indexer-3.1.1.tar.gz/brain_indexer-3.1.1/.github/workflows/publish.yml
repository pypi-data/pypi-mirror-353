name: Publish wheels and sdist tarball to PyPi

on:
  workflow_call:

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
        fetch-depth: 0

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Build a source tarball
      run: |
        python -m pip install build
        python -m build -s

    - name: Store sdist as artifact
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/*.tar.gz

  test_sdist:
    name: Test source distribution

    runs-on: ubuntu-latest
    needs: [build_sdist]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Download artifacts produced during the build_wheels and build_sdist jobs
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - uses: ./.github/actions/boost-cache
      id: cache-boost
      with:
        os: ubuntu-latest
        boost_minor: 85

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenmpi-dev

    - uses: ./.github/actions/mpi-setup

    - name: Install package, clean local directory
      run: |
        export CMAKE_PREFIX_PATH=${{ steps.cache-boost.outputs.location }}
        export SKBUILD_CMAKE_DEFINE="CMAKE_INSTALL_RPATH_USE_LINK_PATH=ON"
        python -m pip install dist/*
        python -m pip install mock mpi4py pytest pytest-mpi pytest-xdist

    - name: Run tests
      run: |
        pytest -n 3 tests

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    # Used to host cibuildwheel
    - uses: actions/setup-python@v5

    - name: Install cibuildwheel
      run: python -m pip install -U cibuildwheel twine packaging

    - name: Build wheels
      run: python -m cibuildwheel --output-dir dist
      env:
        CIBW_TEST_COMMAND: "pytest {project}/tests"

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./dist/*.whl

    - name: Verify wheels
      run: python -m twine check dist/*

  publish:
    name: Publish package to PyPI
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist, test_sdist]

    environment:
      name: publish_pypi
      url: https://pypi.org/p/brain-indexer

    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download artifacts produced by the build jobs
      uses: actions/download-artifact@v4
      with:
        path: dist/
        merge-multiple: true

    - name: Display structure of downloaded files
      run: ls -R
      working-directory: dist

    - name: Publish source distribution package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages_dir: dist/
        # "Temp" workaround since attestations are on by default as of gh-action-pypi-publish v1.11.0
        attestations: false
