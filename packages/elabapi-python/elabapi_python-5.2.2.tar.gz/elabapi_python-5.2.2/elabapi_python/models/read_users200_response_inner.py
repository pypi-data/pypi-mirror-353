# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2. 

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReadUsers200ResponseInner(BaseModel):
    """
    ReadUsers200ResponseInner
    """ # noqa: E501
    userid: Optional[StrictInt] = None
    firstname: Optional[StrictStr] = None
    lastname: Optional[StrictStr] = None
    orgid: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    validated: Optional[StrictInt] = None
    archived: Optional[StrictInt] = None
    last_login: Optional[StrictStr] = None
    valid_until: Optional[StrictStr] = None
    is_sysadmin: Optional[StrictInt] = None
    fullname: Optional[StrictStr] = None
    orcid: Optional[StrictStr] = None
    auth_service: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["userid", "firstname", "lastname", "orgid", "email", "validated", "archived", "last_login", "valid_until", "is_sysadmin", "fullname", "orcid", "auth_service"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReadUsers200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if orgid (nullable) is None
        # and model_fields_set contains the field
        if self.orgid is None and "orgid" in self.model_fields_set:
            _dict['orgid'] = None

        # set to None if last_login (nullable) is None
        # and model_fields_set contains the field
        if self.last_login is None and "last_login" in self.model_fields_set:
            _dict['last_login'] = None

        # set to None if valid_until (nullable) is None
        # and model_fields_set contains the field
        if self.valid_until is None and "valid_until" in self.model_fields_set:
            _dict['valid_until'] = None

        # set to None if orcid (nullable) is None
        # and model_fields_set contains the field
        if self.orcid is None and "orcid" in self.model_fields_set:
            _dict['orcid'] = None

        # set to None if auth_service (nullable) is None
        # and model_fields_set contains the field
        if self.auth_service is None and "auth_service" in self.model_fields_set:
            _dict['auth_service'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReadUsers200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userid": obj.get("userid"),
            "firstname": obj.get("firstname"),
            "lastname": obj.get("lastname"),
            "orgid": obj.get("orgid"),
            "email": obj.get("email"),
            "validated": obj.get("validated"),
            "archived": obj.get("archived"),
            "last_login": obj.get("last_login"),
            "valid_until": obj.get("valid_until"),
            "is_sysadmin": obj.get("is_sysadmin"),
            "fullname": obj.get("fullname"),
            "orcid": obj.get("orcid"),
            "auth_service": obj.get("auth_service")
        })
        return _obj


