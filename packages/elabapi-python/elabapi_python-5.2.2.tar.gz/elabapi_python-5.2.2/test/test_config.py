# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2. 

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from elabapi_python.models.config import Config

class TestConfig(unittest.TestCase):
    """Config unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Config:
        """Test Config
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Config`
        """
        model = Config()
        if include_optional:
            return Config(
                admins_create_users = '',
                admins_create_users_remote_dir = '',
                admin_validate = '',
                announcement = '',
                anon_users = '',
                autologout_time = '',
                blox_anon = '',
                blox_enabled = '',
                cookie_validity_time = 56,
                debug = '',
                email_domain = '',
                extauth_email = '',
                extauth_firstname = '',
                extauth_lastname = '',
                extauth_remote_user = '',
                extauth_teams = '',
                lang = '',
                ldap_base_dn = '',
                ldap_search_attr = '',
                ldap_email = '',
                ldap_firstname = '',
                ldap_host = '',
                ldap_lastname = '',
                ldap_password = '',
                ldap_port = '',
                ldap_team = '',
                ldap_toggle = '',
                ldap_use_tls = '',
                ldap_username = '',
                local_login = '',
                local_register = '',
                login_announcement = '',
                login_tries = '',
                logout_url = '',
                mail_from = '',
                max_revisions = '',
                min_days_revisions = '',
                min_delta_revisions = '',
                onboarding_email_active = '0',
                onboarding_email_admins_body = '',
                onboarding_email_admins_subject = '',
                onboarding_email_body = '',
                onboarding_email_different_for_admins = '0',
                onboarding_email_subject = '',
                open_science = '',
                open_team = '',
                privacy_policy = '',
                proxy = '',
                remote_dir_config = '',
                remote_dir_service = '',
                s3_bucket_name = '',
                s3_endpoint = '',
                s3_path_prefix = '',
                s3_region = '',
                s3_verify_cert = '',
                saml_acs_binding = '',
                saml_allowrepeatattributename = '',
                saml_authnrequestssigned = '',
                saml_baseurl = '',
                saml_debug = '',
                saml_entityid = '',
                saml_logoutrequestsigned = '',
                saml_logoutresponsesigned = '',
                saml_lowercaseurlencoding = '',
                saml_nameidencrypted = '',
                saml_nameidformat = '',
                saml_privatekey = '',
                saml_relaxdestinationvalidation = '',
                saml_signmetadata = '',
                saml_slo_binding = '',
                saml_strict = '',
                saml_sync_teams = '',
                saml_team_create = '',
                saml_team_default = '',
                saml_toggle = '',
                saml_user_default = '',
                saml_wantassertionsencrypted = '',
                saml_wantassertionssigned = '',
                saml_wantmessagessigned = '',
                saml_wantnameid = '',
                saml_wantnameidencrypted = '',
                saml_wantxmlvalidation = '',
                saml_x509 = '',
                saml_x509_new = '',
                var_schema = '',
                smtp_address = '',
                smtp_encryption = '',
                smtp_password = '',
                smtp_port = '',
                smtp_username = '',
                support_url = '',
                ts_authority = '',
                ts_cert = '',
                ts_hash = '',
                ts_limit = '',
                ts_login = '',
                ts_password = '',
                ts_url = '',
                uploads_storage = ''
            )
        else:
            return Config(
        )
        """

    def testConfig(self):
        """Test Config"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
