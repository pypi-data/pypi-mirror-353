# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2. 

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from elabapi_python.models.entity_editable import EntityEditable

class TestEntityEditable(unittest.TestCase):
    """EntityEditable unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EntityEditable:
        """Test EntityEditable
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EntityEditable`
        """
        model = EntityEditable()
        if include_optional:
            return EntityEditable(
                body = '<h1>Section title</h1><p>Main text of resource</p>',
                canread = '{"base": 20, "teams": [], "users": [1], "teamgroups": [1]}',
                canwrite = '{"base": 20, "teams": [], "users": [1], "teamgroups": [1]}',
                category = 3,
                var_date = '',
                content_type = 1,
                custom_id = 56,
                metadata = elabapi_python.models.metadata.metadata(
                    elabftw = elabapi_python.models.metadata_elabftw.metadata_elabftw(
                        display_main_text = True, 
                        extra_fields_groups = [
                            elabapi_python.models.metadata_elabftw_extra_fields_groups_inner.metadata_elabftw_extra_fields_groups_inner(
                                id = 56, 
                                name = '', )
                            ], ), 
                    extra_fields = {
                        'key' : elabapi_python.models.metadata_extra_fields_value.metadata_extra_fields_value(
                            type = 'allow_multi_values', 
                            value = '', 
                            group_id = 56, 
                            description = '', )
                        }, ),
                rating = 56,
                state = 56,
                status = 1,
                tags = ["test","confidential","replication"],
                title = 'Untitled',
                template = 56,
                userid = 56
            )
        else:
            return EntityEditable(
        )
        """

    def testEntityEditable(self):
        """Test EntityEditable"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
