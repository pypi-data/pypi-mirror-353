# Copyright International Business Machines Corp, 2025
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

class LsidCollector:
    """
    Collection module for bqueues commands
    """
    def __init__(self, metrics_generator) -> None:

        # Command used to collect data
        self.command = "lsid"

        # Class used to create and manage metrics
        self.metrics_generator = metrics_generator

        # Tuple's List of: metric name, metric description, metric type (Gauge, Info, Counter), metric labels list to create metric, metric label to fetch data
        self.metrics_list = [("ibm_lsf_cluster", "Info about LSF Clusters", "Info", ['cluster_name', 'cluster_version'], "")]

        # Metrics list generated by metrics_generator class
        self.metrics = self.metrics_generator.create_metrics(self.metrics_list)

    def fetch(self, cluster_info):
        """
        Collects info from lsid
        """
        cluster_name = cluster_info["cluster_name"]
        cluster_version = cluster_info["cluster_version"]

        for (metric, name, _) in self.metrics:
            # First of all clean up the metric
            metric.clear()
            tmp = {'cluster_version': cluster_version, 'cluster_name': cluster_name}
            metric.info(tmp)

    async def fetch_async(self, cluster_info):
        """
        Async version of fetch
        """
        #lsid call is performed synchronously in Utils.get_lsid_output(), and value is cached.
        #This function is just a stub to get other code working
        self.fetch(cluster_info)
