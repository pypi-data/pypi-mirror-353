# Copyright International Business Machines Corp, 2025
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import psutil

class PsutilCollector:
    """
    Collection module that retrieves OS info on LSF daemons
    """
    def __init__(self, metrics_generator) -> None:

        # Class used to create and manage metrics
        self.metrics_generator = metrics_generator

        # Tuple's List of: metric name, metric description, metric type (Gauge, Info, Counter), metric labels list to create metric, metric label to fetch data
        self.metrics_list = [("ibm_lsf_manager", "LSF Management Daemons Performance", "Gauge", ['daemon', 'resource', 'cluster_name'], "")]

        # Metrics list generated by metrics_generator class
        self.metrics = self.metrics_generator.create_metrics(self.metrics_list)

    def fetch(self, cluster_info):
        """
        Collect daemon info
        """
        cluster_name = cluster_info["cluster_name"]
        ebrokerd_cpu, ebrokerd_mem, mbd_cpu, mbd_mem, mlim_cpu, mlim_mem, mbschd_cpu, mbschd_mem = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
        couple_list = [(ebrokerd_cpu, ebrokerd_mem, "ebrokerd"),(mbd_cpu, mbd_mem, "mbatchd"), (mlim_cpu, mlim_mem, "lim"), (mbschd_cpu, mbschd_mem, "mbschd")]
        for (metric, _, _) in self.metrics:
            # First of all clean up the metric
            metric.clear()
            for (cpu, mem, label) in couple_list:
                for proc in psutil.process_iter():
                    try:
                        if proc.name() == label:
                            cpu += proc.cpu_percent()
                            mem += proc.memory_percent(memtype='vms')
                            if self.metrics_generator.debug:
                                print(f"ibm_lsf_manager cluster_name={cluster_name} {proc.name()} cpu={cpu} mem={mem}")
                    except (psutil.NoSuchProcess, psutil.ZombieProcess) as e:
                        # Dont care about these cases. Keep running
                        if self.metrics_generator.debug:
                            print(e)
                metric.labels(label, "cpu", cluster_name).set(cpu/100)
                metric.labels(label, "mem", cluster_name).set(mem/100)

    async def fetch_async(self, cluster_info):
        """
        Async version of fetch()
        """
        #psutil library does not have async APIs, so leave this stub here in case it gets one in the future
        self.fetch(cluster_info)
