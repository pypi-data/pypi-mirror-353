from collections.abc import Mapping, Sequence
import enum
from typing import Annotated, overload

from numpy.typing import ArrayLike


CARTESIAN: CoordinateSystem = CoordinateSystem.CARTESIAN

CENTER: ReferencePoint = ReferencePoint.CENTER

CURVILINEAR: CoordinateSystem = CoordinateSystem.CURVILINEAR

class Configuration:
    def __init__(self) -> None: ...

    @property
    def general(self) -> GeneralConfiguration: ...

    @general.setter
    def general(self, arg: GeneralConfiguration, /) -> None: ...

    @property
    def vehicle(self) -> VehicleConfiguration: ...

    @vehicle.setter
    def vehicle(self, arg: VehicleConfiguration, /) -> None: ...

    @property
    def planning(self) -> PlanningConfiguration: ...

    @planning.setter
    def planning(self, arg: PlanningConfiguration, /) -> None: ...

    @property
    def reachable_set(self) -> ReachableSetConfiguration: ...

    @reachable_set.setter
    def reachable_set(self, arg: ReachableSetConfiguration, /) -> None: ...

    @property
    def debug(self) -> DebugConfiguration: ...

    @debug.setter
    def debug(self, arg: DebugConfiguration, /) -> None: ...

class CoordinateSystem(enum.Enum):
    CARTESIAN = 0

    CURVILINEAR = 1

class DebugConfiguration:
    def __init__(self) -> None: ...

    @property
    def verbose_mode(self) -> bool: ...

    @verbose_mode.setter
    def verbose_mode(self, arg: bool, /) -> None: ...

    @property
    def measure_time(self) -> bool: ...

    @measure_time.setter
    def measure_time(self, arg: bool, /) -> None: ...

class Ego:
    def __init__(self) -> None: ...

    @property
    def id_type_vehicle(self) -> int: ...

    @id_type_vehicle.setter
    def id_type_vehicle(self, arg: int, /) -> None: ...

    @property
    def id_vehicle(self) -> int: ...

    @id_vehicle.setter
    def id_vehicle(self, arg: int, /) -> None: ...

    @property
    def length(self) -> float: ...

    @length.setter
    def length(self, arg: float, /) -> None: ...

    @property
    def width(self) -> float: ...

    @width.setter
    def width(self, arg: float, /) -> None: ...

    @property
    def radius_disc(self) -> float: ...

    @radius_disc.setter
    def radius_disc(self, arg: float, /) -> None: ...

    @property
    def circle_distance(self) -> float: ...

    @circle_distance.setter
    def circle_distance(self, arg: float, /) -> None: ...

    @property
    def wheelbase(self) -> float: ...

    @wheelbase.setter
    def wheelbase(self, arg: float, /) -> None: ...

    @property
    def v_lon_min(self) -> float: ...

    @v_lon_min.setter
    def v_lon_min(self, arg: float, /) -> None: ...

    @property
    def v_lon_max(self) -> float: ...

    @v_lon_max.setter
    def v_lon_max(self, arg: float, /) -> None: ...

    @property
    def v_lat_min(self) -> float: ...

    @v_lat_min.setter
    def v_lat_min(self, arg: float, /) -> None: ...

    @property
    def v_lat_max(self) -> float: ...

    @v_lat_max.setter
    def v_lat_max(self, arg: float, /) -> None: ...

    @property
    def a_lon_min(self) -> float: ...

    @a_lon_min.setter
    def a_lon_min(self, arg: float, /) -> None: ...

    @property
    def a_lon_max(self) -> float: ...

    @a_lon_max.setter
    def a_lon_max(self, arg: float, /) -> None: ...

    @property
    def a_lat_min(self) -> float: ...

    @a_lat_min.setter
    def a_lat_min(self, arg: float, /) -> None: ...

    @property
    def a_lat_max(self) -> float: ...

    @a_lat_max.setter
    def a_lat_max(self, arg: float, /) -> None: ...

    @property
    def a_max(self) -> float: ...

    @a_max.setter
    def a_max(self, arg: float, /) -> None: ...

    @property
    def t_react(self) -> float: ...

    @t_react.setter
    def t_react(self, arg: float, /) -> None: ...

    @property
    def fov(self) -> float: ...

    @fov.setter
    def fov(self, arg: float, /) -> None: ...

class GeneralConfiguration:
    def __init__(self) -> None: ...

    @property
    def name_scenario(self) -> str: ...

    @name_scenario.setter
    def name_scenario(self, arg: str, /) -> None: ...

    @property
    def path_scenarios(self) -> str: ...

    @path_scenarios.setter
    def path_scenarios(self, arg: str, /) -> None: ...

class LUTLongitudinalEnlargement:
    def __init__(self, arg: Mapping[float, Mapping[tuple[float, float], float]], /) -> None: ...

class Other:
    def __init__(self) -> None: ...

    @property
    def id_type_vehicle(self) -> int: ...

    @id_type_vehicle.setter
    def id_type_vehicle(self, arg: int, /) -> None: ...

    @property
    def id_vehicle(self) -> int: ...

    @id_vehicle.setter
    def id_vehicle(self, arg: int, /) -> None: ...

    @property
    def length(self) -> float: ...

    @length.setter
    def length(self, arg: float, /) -> None: ...

    @property
    def width(self) -> float: ...

    @width.setter
    def width(self, arg: float, /) -> None: ...

    @property
    def radius_disc(self) -> float: ...

    @radius_disc.setter
    def radius_disc(self, arg: float, /) -> None: ...

    @property
    def circle_distance(self) -> float: ...

    @circle_distance.setter
    def circle_distance(self, arg: float, /) -> None: ...

    @property
    def wheelbase(self) -> float: ...

    @wheelbase.setter
    def wheelbase(self, arg: float, /) -> None: ...

    @property
    def v_lon_min(self) -> float: ...

    @v_lon_min.setter
    def v_lon_min(self, arg: float, /) -> None: ...

    @property
    def v_lon_max(self) -> float: ...

    @v_lon_max.setter
    def v_lon_max(self, arg: float, /) -> None: ...

    @property
    def v_lat_min(self) -> float: ...

    @v_lat_min.setter
    def v_lat_min(self, arg: float, /) -> None: ...

    @property
    def v_lat_max(self) -> float: ...

    @v_lat_max.setter
    def v_lat_max(self, arg: float, /) -> None: ...

    @property
    def a_lon_min(self) -> float: ...

    @a_lon_min.setter
    def a_lon_min(self, arg: float, /) -> None: ...

    @property
    def a_lon_max(self) -> float: ...

    @a_lon_max.setter
    def a_lon_max(self, arg: float, /) -> None: ...

    @property
    def a_lat_min(self) -> float: ...

    @a_lat_min.setter
    def a_lat_min(self, arg: float, /) -> None: ...

    @property
    def a_lat_max(self) -> float: ...

    @a_lat_max.setter
    def a_lat_max(self, arg: float, /) -> None: ...

    @property
    def a_max(self) -> float: ...

    @a_max.setter
    def a_max(self, arg: float, /) -> None: ...

    @property
    def t_react(self) -> float: ...

    @t_react.setter
    def t_react(self, arg: float, /) -> None: ...

class PlanningConfiguration:
    def __init__(self) -> None: ...

    @property
    def dt(self) -> float: ...

    @dt.setter
    def dt(self, arg: float, /) -> None: ...

    @property
    def step_start(self) -> int: ...

    @step_start.setter
    def step_start(self, arg: int, /) -> None: ...

    @property
    def steps_computation(self) -> int: ...

    @steps_computation.setter
    def steps_computation(self, arg: int, /) -> None: ...

    @property
    def p_lon_initial(self) -> float: ...

    @p_lon_initial.setter
    def p_lon_initial(self, arg: float, /) -> None: ...

    @property
    def p_lat_initial(self) -> float: ...

    @p_lat_initial.setter
    def p_lat_initial(self, arg: float, /) -> None: ...

    @property
    def uncertainty_p_lon(self) -> float: ...

    @uncertainty_p_lon.setter
    def uncertainty_p_lon(self, arg: float, /) -> None: ...

    @property
    def uncertainty_p_lat(self) -> float: ...

    @uncertainty_p_lat.setter
    def uncertainty_p_lat(self, arg: float, /) -> None: ...

    @property
    def v_lon_initial(self) -> float: ...

    @v_lon_initial.setter
    def v_lon_initial(self, arg: float, /) -> None: ...

    @property
    def v_lat_initial(self) -> float: ...

    @v_lat_initial.setter
    def v_lat_initial(self, arg: float, /) -> None: ...

    @property
    def uncertainty_v_lon(self) -> float: ...

    @uncertainty_v_lon.setter
    def uncertainty_v_lon(self, arg: float, /) -> None: ...

    @property
    def uncertainty_v_lat(self) -> float: ...

    @uncertainty_v_lat.setter
    def uncertainty_v_lat(self, arg: float, /) -> None: ...

    @property
    def id_lanelet_initial(self) -> int: ...

    @id_lanelet_initial.setter
    def id_lanelet_initial(self, arg: int, /) -> None: ...

    @property
    def coordinate_system(self) -> CoordinateSystem: ...

    @coordinate_system.setter
    def coordinate_system(self, arg: CoordinateSystem, /) -> None: ...

    @property
    def reference_point(self) -> ReferencePoint: ...

    @reference_point.setter
    def reference_point(self, arg: ReferencePoint, /) -> None: ...

    @property
    def CLCS(self) -> "geometry::CurvilinearCoordinateSystem": ...

    @CLCS.setter
    def CLCS(self, arg: "geometry::CurvilinearCoordinateSystem", /) -> None: ...

REAR: ReferencePoint = ReferencePoint.REAR

class ReachNode:
    def __init__(self, step: int, polygon_lon: ReachPolygon, polygon_lat: ReachPolygon) -> None: ...

    @property
    def p_lon_min(self) -> float: ...

    @property
    def p_lon_max(self) -> float: ...

    @property
    def p_lat_min(self) -> float: ...

    @property
    def p_lat_max(self) -> float: ...

    @property
    def is_empty(self) -> bool: ...

    @property
    def position_rectangle(self) -> ReachPolygon: ...

    @property
    def list_nodes_parent(self) -> list[ReachNode]: ...

    @property
    def list_nodes_child(self) -> list[ReachNode]: ...

    @property
    def id(self) -> int: ...

    @property
    def step(self) -> int: ...

    @property
    def polygon_lon(self) -> ReachPolygon: ...

    @property
    def polygon_lat(self) -> ReachPolygon: ...

    def intersect_in_position_domain(self, p_lon_min: float = float('-inf'), p_lat_min: float = float('-inf'), p_lon_max: float = float('inf'), p_lat_max: float = float('inf')) -> None: ...

    def intersect_in_velocity_domain(self, v_lon_min: float = float('-inf'), v_lat_min: float = float('-inf'), v_lon_max: float = float('inf'), v_lat_max: float = float('inf')) -> None: ...

    def clone(self) -> ReachNode: ...

    def __repr__(self) -> str: ...

class ReachPolygon:
    def __init__(self, vec_vertices: Sequence[tuple[float, float]]) -> None: ...

    @property
    def p_min(self) -> float: ...

    @property
    def p_max(self) -> float: ...

    @property
    def v_min(self) -> float: ...

    @property
    def v_max(self) -> float: ...

    @property
    def p_lon_min(self) -> float: ...

    @property
    def p_lon_max(self) -> float: ...

    @property
    def p_lat_min(self) -> float: ...

    @property
    def p_lat_max(self) -> float: ...

    @property
    def p_lon_center(self) -> float: ...

    @property
    def p_lat_center(self) -> float: ...

    @property
    def bounds(self) -> tuple[float, float, float, float]: ...

    @property
    def vertices(self) -> list: ...

    def convexify(self) -> None: ...

    def minkowski_sum(self, arg: ReachPolygon, /) -> None: ...

    def intersects(self, arg: ReachPolygon, /) -> bool: ...

    def intersect_halfspace(self, a: float, b: float, c: float) -> None: ...

    def __repr__(self) -> str: ...

class ReachableSet:
    @overload
    def __init__(self, configuration: Configuration) -> None: ...

    @overload
    def __init__(self, configuration: Configuration, collision_checker: "collision::CollisionChecker") -> None: ...

    @property
    def config(self) -> Configuration: ...

    @property
    def collision_checker(self) -> "collision::CollisionChecker": ...

    @property
    def step_start(self) -> int: ...

    @property
    def step_end(self) -> int: ...

    def compute(self, arg0: int, arg1: int, /) -> None: ...

    def drivable_area_at_step(self, arg: int, /) -> list[ReachPolygon]: ...

    def reachable_set_at_step(self, arg: int, /) -> list[ReachNode]: ...

    def drivable_area(self) -> dict[int, list[ReachPolygon]]: ...

    def reachable_set(self) -> dict[int, list[ReachNode]]: ...

    def prune_nodes_not_reaching_final_step(self) -> None: ...

    @property
    def map_step_to_drivable_area(self) -> dict[int, list[ReachPolygon]]: ...

    @property
    def map_step_to_reachable_set(self) -> dict[int, list[ReachNode]]: ...

class ReachableSetConfiguration:
    def __init__(self) -> None: ...

    @property
    def mode_repartition(self) -> int: ...

    @mode_repartition.setter
    def mode_repartition(self, arg: int, /) -> None: ...

    @property
    def mode_inflation(self) -> int: ...

    @mode_inflation.setter
    def mode_inflation(self, arg: int, /) -> None: ...

    @property
    def size_grid(self) -> float: ...

    @size_grid.setter
    def size_grid(self, arg: float, /) -> None: ...

    @property
    def size_grid_2nd(self) -> float: ...

    @size_grid_2nd.setter
    def size_grid_2nd(self, arg: float, /) -> None: ...

    @property
    def radius_terminal_split(self) -> float: ...

    @radius_terminal_split.setter
    def radius_terminal_split(self, arg: float, /) -> None: ...

    @property
    def num_threads(self) -> int: ...

    @num_threads.setter
    def num_threads(self, arg: int, /) -> None: ...

    @property
    def prune_nodes(self) -> bool: ...

    @prune_nodes.setter
    def prune_nodes(self, arg: bool, /) -> None: ...

    @property
    def lut_lon_enlargement(self) -> LUTLongitudinalEnlargement: ...

    @lut_lon_enlargement.setter
    def lut_lon_enlargement(self, arg: LUTLongitudinalEnlargement, /) -> None: ...

    @property
    def rasterize_obstacles(self) -> bool: ...

    @rasterize_obstacles.setter
    def rasterize_obstacles(self, arg: bool, /) -> None: ...

class ReferencePoint(enum.Enum):
    CENTER = 0

    REAR = 1

class VehicleConfiguration:
    def __init__(self) -> None: ...

    @property
    def ego(self) -> Ego: ...

    @ego.setter
    def ego(self, arg: Ego, /) -> None: ...

    @property
    def other(self) -> Other: ...

    @other.setter
    def other(self, arg: Other, /) -> None: ...

def connected_reachset_boost(arg0: list, arg1: int, /) -> dict:
    """
    Function determines connected sets within given list of reachable set nodes
    """

def create_adjacency_dictionary_boost(arg0: list, arg1: list, /) -> dict:
    """
    Function returns adjacency dictionary with overlapping polygons of two given lists of polygonsE.g.: {0 : [1, 2]} means that ReachPolygon 0 from first list overlaps with ReachPolygons 1,2 from second list
    """

def create_cartesian_collision_checker(arg0: Sequence[Sequence[Annotated[ArrayLike, dict(dtype='float64', shape=(2), order='C')]]], arg1: Mapping[int, Sequence[Sequence[Annotated[ArrayLike, dict(dtype='float64', shape=(2), order='C')]]]], arg2: float, arg3: int, /) -> "collision::CollisionChecker": ...

def create_curvilinear_collision_checker(arg0: Sequence[Sequence[Annotated[ArrayLike, dict(dtype='float64', shape=(2), order='C')]]], arg1: Mapping[int, Sequence[Sequence[Annotated[ArrayLike, dict(dtype='float64', shape=(2), order='C')]]]], arg2: "geometry::CurvilinearCoordinateSystem", arg3: float, arg4: int, arg5: bool, arg6: bool, /) -> "collision::CollisionChecker": ...

def print_collision_checker(arg: "collision::CollisionChecker", /) -> None: ...

def print_vertices_polygon(arg: Sequence[Sequence[Annotated[ArrayLike, dict(dtype='float64', shape=(2), order='C')]]], /) -> None: ...
