[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ecoguard-ai"
version = "0.1.3"
description = "AI-augmented software development pipeline solution for quality, security, and environmental sustainability"
readme = "ReadMe.md"
license = "MIT"
authors = [
    {name = "EcoGuard AI Team", email = "team@ecoguard-ai.org"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "PyYAML>=6.0",
    "toml>=0.10.2",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    # Code formatting and linting
    "black>=23.0.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-type-checking>=2.7.0",
    "flake8-bugbear>=23.12.0",
    "mypy>=1.5.0",
    "isort>=5.13.0",
    "ruff>=0.1.14",

    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.5.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "coverage[toml]>=7.2.0",

    # Development tools
    "pre-commit>=3.5.0",
    "tox>=4.11.0",
    "twine>=4.0.0",
    "wheel>=0.42.0",
    "check-manifest>=0.49",

    # Documentation
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    "pydocstyle>=6.3.0",

    # Debugging and profiling
    "ipdb>=0.13.0",
    "line-profiler>=4.1.0",
]
runtime = [
    "codecarbon>=2.3.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
    "py-cpuinfo>=9.0.0",
]
security = [
    "bandit[toml]>=1.7.5",
    "safety>=3.0.0",
    "semgrep>=1.45.0",
    "pip-audit>=2.6.0",
    "detect-secrets>=1.4.0",
]
server = [
    "fastapi>=0.108.0",
    "uvicorn[standard]>=0.25.0",
    "sqlalchemy>=2.0.25",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.9",
    "redis>=5.0.0",
    "celery>=5.3.0",
]
ai = [
    "openai>=1.7.0",
    "anthropic>=0.8.0",
    "tiktoken>=0.5.0",
    "sentence-transformers>=2.2.0",
]

[project.scripts]
ecoguard = "ecoguard_ai.cli:main"

[project.urls]
Homepage = "https://github.com/ecoguard-ai/ecoguard-ai"
Documentation = "https://docs.ecoguard-ai.org"
Repository = "https://github.com/ecoguard-ai/ecoguard-ai"
"Bug Tracker" = "https://github.com/ecoguard-ai/ecoguard-ai/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["ecoguard_ai*"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ecoguard_ai"]
known_third_party = ["click", "pydantic", "rich", "yaml", "toml"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "codecarbon.*",
    "memory_profiler.*",
    "psutil.*",
    "py_cpuinfo.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/ecoguard_ai",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-fail-under=80",
    "-ra",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "requires_network: Tests that require network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src/ecoguard_ai"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process (for subprocess)

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py", "test_*.py"]

[tool.ruff]
# Same as Black.
line-length = 88

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F"]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 10
