name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.4)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For creating releases
      id-token: write  # For trusted publishing to PyPI

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,runtime]"
        pip install bump2version

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Validate version format
      run: |
        if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must be in format X.Y.Z (e.g., 0.1.4)"
          exit 1
        fi

    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = "[^"]*"/version = "${{ github.event.inputs.version }}"/' pyproject.toml

    - name: Update version in CLI
      run: |
        sed -i 's/@click.version_option(version="[^"]*"/@click.version_option(version="${{ github.event.inputs.version }}"/' src/ecoguard_ai/cli/__init__.py

    - name: Run tests
      run: |
        pytest tests/ --cov=src/ --cov-report=term-missing --cov-fail-under=80 -v

    - name: Run linting
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/
        ruff check src/ tests/

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Test installation
      run: |
        pip install dist/*.whl
        ecoguard --version
        ecoguard analyze test_sample.py --format json

    - name: Create and push tag
      run: |
        git add pyproject.toml src/ecoguard_ai/cli/__init__.py
        git commit -m "chore: bump version to ${{ github.event.inputs.version }}"
        git tag -a "v${{ github.event.inputs.version }}" -m "Release version ${{ github.event.inputs.version }}"
        git push origin main
        git push origin "v${{ github.event.inputs.version }}"

    - name: Generate release notes
      id: release_notes
      run: |
        echo "# EcoGuard AI v${{ github.event.inputs.version }}" > release_notes.md
        echo "" >> release_notes.md
        echo "## What's Changed" >> release_notes.md
        echo "" >> release_notes.md

        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges >> release_notes.md
        else
          echo "- Initial release" >> release_notes.md
        fi

        echo "" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "pip install ecoguard-ai==${{ github.event.inputs.version }}" >> release_notes.md
        echo "\`\`\`" >> release_notes.md

        # Output for GitHub Actions
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: EcoGuard AI v${{ github.event.inputs.version }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
        files: |
          dist/*

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
