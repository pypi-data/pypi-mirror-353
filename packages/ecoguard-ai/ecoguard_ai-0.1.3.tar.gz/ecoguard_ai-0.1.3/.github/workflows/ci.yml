name: CI/CD Pipeline

on:
  push:
    branches: [ '*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,runtime]"

    - name: Run tests
      run: |
        pytest tests/ --cov=src/ --cov-report=term-missing --cov-fail-under=80 -v

    - name: Run linting
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/
        ruff check src/ tests/

    - name: Test CLI
      run: |
        ecoguard --help
        echo "print('test')" > test.py
        ecoguard analyze test.py --output json
        rm test.py

    - name: Basic security check
      run: |
        pip install bandit
        bandit -r src/ -ll

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Security check with bandit (non-blocking)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium || true

    - name: Check dependencies with safety (non-blocking)
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

  self-analysis:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install EcoGuard AI
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run EcoGuard AI Analysis
      run: |
        echo "ðŸŒ± Running EcoGuard AI Analysis..."
        ecoguard analyze src/ --format json --output ecoguard-results.json || true
        ecoguard analyze src/ --format table || true
        echo "âœ… EcoGuard AI analysis completed"

    - name: Analyze test sample (demo)
      run: |
        echo "ðŸ§ª Analyzing test sample file..."
        ecoguard analyze test_sample.py --format table || true

    - name: Upload EcoGuard AI results
      uses: actions/upload-artifact@v4
      with:
        name: ecoguard-analysis
        path: ecoguard-results.json

    - name: Upload analysis reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: analysis-reports
        path: |
          flake8-report.txt
          mypy-report/
          bandit-report.json
          safety-report.json
          ecoguard-results.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    environment: release
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      if: github.ref == 'refs/heads/main'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      uses: pypa/gh-action-pypi-publish@release/v1

  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        # Documentation dependencies will be added when we set up docs
        # pip install sphinx sphinx-rtd-theme

    - name: Placeholder for documentation build
      run: |
        echo "Documentation build will be implemented in future stages"
        # sphinx-build -b html docs/ docs/_build/html
