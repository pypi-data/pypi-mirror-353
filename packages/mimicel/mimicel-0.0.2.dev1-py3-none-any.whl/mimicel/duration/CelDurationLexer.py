# Generated from CelDuration.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,104,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,41,8,4,1,5,
        1,5,1,5,1,6,1,6,1,7,1,7,1,8,4,8,51,8,8,11,8,12,8,52,1,8,1,8,4,8,
        57,8,8,11,8,12,8,58,1,8,3,8,62,8,8,1,8,1,8,4,8,66,8,8,11,8,12,8,
        67,1,8,3,8,71,8,8,1,8,4,8,74,8,8,11,8,12,8,75,1,8,1,8,3,8,80,8,8,
        1,9,4,9,83,8,9,11,9,12,9,84,1,10,1,10,1,11,1,11,3,11,91,8,11,1,11,
        4,11,94,8,11,11,11,12,11,95,1,12,4,12,99,8,12,11,12,12,12,100,1,
        12,1,12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        0,23,0,25,11,1,0,4,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,3,
        0,9,10,13,13,32,32,114,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,3,29,1,0,0,0,5,31,1,
        0,0,0,7,33,1,0,0,0,9,40,1,0,0,0,11,42,1,0,0,0,13,45,1,0,0,0,15,47,
        1,0,0,0,17,79,1,0,0,0,19,82,1,0,0,0,21,86,1,0,0,0,23,88,1,0,0,0,
        25,98,1,0,0,0,27,28,5,104,0,0,28,2,1,0,0,0,29,30,5,109,0,0,30,4,
        1,0,0,0,31,32,5,115,0,0,32,6,1,0,0,0,33,34,5,109,0,0,34,35,5,115,
        0,0,35,8,1,0,0,0,36,37,5,117,0,0,37,41,5,115,0,0,38,39,5,181,0,0,
        39,41,5,115,0,0,40,36,1,0,0,0,40,38,1,0,0,0,41,10,1,0,0,0,42,43,
        5,110,0,0,43,44,5,115,0,0,44,12,1,0,0,0,45,46,5,43,0,0,46,14,1,0,
        0,0,47,48,5,45,0,0,48,16,1,0,0,0,49,51,3,21,10,0,50,49,1,0,0,0,51,
        52,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,54,1,0,0,0,54,56,5,46,
        0,0,55,57,3,21,10,0,56,55,1,0,0,0,57,58,1,0,0,0,58,56,1,0,0,0,58,
        59,1,0,0,0,59,61,1,0,0,0,60,62,3,23,11,0,61,60,1,0,0,0,61,62,1,0,
        0,0,62,80,1,0,0,0,63,65,5,46,0,0,64,66,3,21,10,0,65,64,1,0,0,0,66,
        67,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,70,1,0,0,0,69,71,3,23,
        11,0,70,69,1,0,0,0,70,71,1,0,0,0,71,80,1,0,0,0,72,74,3,21,10,0,73,
        72,1,0,0,0,74,75,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,77,1,0,0,
        0,77,78,3,23,11,0,78,80,1,0,0,0,79,50,1,0,0,0,79,63,1,0,0,0,79,73,
        1,0,0,0,80,18,1,0,0,0,81,83,3,21,10,0,82,81,1,0,0,0,83,84,1,0,0,
        0,84,82,1,0,0,0,84,85,1,0,0,0,85,20,1,0,0,0,86,87,7,0,0,0,87,22,
        1,0,0,0,88,90,7,1,0,0,89,91,7,2,0,0,90,89,1,0,0,0,90,91,1,0,0,0,
        91,93,1,0,0,0,92,94,3,21,10,0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,
        1,0,0,0,95,96,1,0,0,0,96,24,1,0,0,0,97,99,7,3,0,0,98,97,1,0,0,0,
        99,100,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,102,1,0,0,0,102,
        103,6,12,0,0,103,26,1,0,0,0,13,0,40,52,58,61,67,70,75,79,84,90,95,
        100,1,6,0,0
    ]

class CelDurationLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    HOURS = 1
    MINUTES = 2
    SECONDS = 3
    MILLIS = 4
    MICROS = 5
    NANOS = 6
    PLUS = 7
    MINUS = 8
    DECIMAL = 9
    INT = 10
    WS = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'h'", "'m'", "'s'", "'ms'", "'ns'", "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "HOURS", "MINUTES", "SECONDS", "MILLIS", "MICROS", "NANOS", 
            "PLUS", "MINUS", "DECIMAL", "INT", "WS" ]

    ruleNames = [ "HOURS", "MINUTES", "SECONDS", "MILLIS", "MICROS", "NANOS", 
                  "PLUS", "MINUS", "DECIMAL", "INT", "DIGIT", "EXPONENT", 
                  "WS" ]

    grammarFileName = "CelDuration.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


