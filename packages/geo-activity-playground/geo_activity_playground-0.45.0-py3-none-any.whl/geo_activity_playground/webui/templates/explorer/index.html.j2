{% extends "page.html.j2" %}

{% block container %}

<h1>Explorer Tiles</h1>

{% if zoom_level_not_generated %}
<p>You try to access explorer tiles for a level that hasn't been generated before. That is not a problem, we just don't
    generate all levels to save a bit of time. If you want to have it, just enable it!</p>

<a href="{{ url_for('.enable_zoom_level', zoom=zoom_level_not_generated) }}" class="btn btn-primary">Enable Zoom {{
    zoom_level_not_generated }}</a>
{% else %}

<div class="row mb-3">
    <div class="col">
        <p>You have {{ explored.num_tiles }} explored tiles. There are {{ explored.num_cluster_tiles }} cluster tiles in
            total. Your largest cluster consists of {{ explored.max_cluster_size }} tiles. Your largest square has size
            {{
            explored.square_size }}Â².
        </p>
        <p>Open the <a
                href="{{ url_for('square_planner.index', zoom=zoom, x=explored.square_x, y=explored.square_y, size=explored.square_size) }}">Square
                Planner</a> to plan the next extension.</p>
    </div>
</div>

<div class="row mb-3">
    <div class="col">
        <h2>Map with explored tiles</h2>
    </div>
</div>

<div class="row mb-3">
    <div class="col">
        <div class="btn-group mb-3" role="group">
            <button type="button" class="btn btn-primary" onclick="changeColor('cluster')">Cluster</button>
            <button type="button" class="btn btn-primary" onclick="changeColor('first')">First Visit</button>
            <button type="button" class="btn btn-primary" onclick="changeColor('last')">Last Visit</button>
        </div>
        <div id="explorer-map" class="mb-1" style="height: 800px;"></div>
        <p>Download tiles in visible area: <a href="#" onclick="downloadAs('explored.geojson')">Explored as GeoJSON</a>,
            <a href="#" onclick="downloadAs('explored.gpx')"">Explored as GPX</a>, <a href=" #"
                onclick="downloadAs('missing.geojson')">Missing as GeoJSON</a> or <a href="#"
                onclick="downloadAs('missing.gpx')"">Missing as GPX</a>.</p>
        <script>
            function onEachFeature(feature, layer) {
                if (feature.properties && feature.properties.first_visit) {
                    let lines = [
                        `<dt>Tile</dt>`,
                        `<dd>${feature.properties.tile}</dd>`,
                        `<dt>First visit</dt>`,
                        `<dd>${feature.properties.first_visit}</br><a href=/activity/${feature.properties.first_activity_id}>${feature.properties.first_activity_name}</a></dd>`,
                        `<dt>Last visit</dt>`,
                        `<dd>${feature.properties.last_visit}</br><a href=/activity/${feature.properties.last_activity_id}>${feature.properties.last_activity_name}</a></dd>`,
                        `<dt>Number of visits</dt>`,
                        `<dd>${feature.properties.num_visits}</dd>`,
                    ]
                    if (feature.properties.this_cluster_size) {
                        lines.push(`<dt>This cluster size</dt><dd>${feature.properties.this_cluster_size}</dd>`)
                    }
                    layer.bindPopup('<dl>' + lines.join('') + '</dl>')
                }
            }

            let explorer_geojson = {{ explored.explored_geojson| safe}}
            let square_geojson = {{ explored.square_geojson | safe }}
            let map = L.map('explorer-map', {
                fullscreenControl: true,
                center: [{{ center.latitude }}, {{ center.longitude }}],
            zoom: 10
            })
            let tile_layer = L.tileLayer('/tile/grayscale/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '{{ map_tile_attribution|safe }}'
            });
            tile_layer.addTo(map)
            let explorer_layer_cluster_color = L.geoJSON(explorer_geojson, {
                style: function (feature) {
                    return {
                        color: feature.properties.color, fillColor: feature.properties.color,
                        weight: 0.5
                    }
                },
                onEachFeature: onEachFeature
            }).addTo(map)
            let explorer_layer_first_age_color = L.geoJSON(explorer_geojson, {
                style: function (feature) {
                    return {
                        color: " #440154", fillColor: feature.properties.first_age_color, weight: 0.5
                    }
                },
                onEachFeature: onEachFeature
            }); let explorer_layer_last_age_color = L.geoJSON(explorer_geojson, {
                style:
                    function (feature) {
                        return {
                            color: "#440154", fillColor: feature.properties.last_age_color, weight:
                                0.5
                        }
                    }, onEachFeature: onEachFeature
            }); let bbox = {{ center.bbox| safe }}; if (bbox) {
                map.fitBounds(L.geoJSON(bbox).getBounds())
            }; let explorer_square_layer = L.geoJSON(square_geojson, {
                style: function (feature) { return { color: "blue", fill: false, weight: 2 } }
            }).addTo(map)
            active_layer = explorer_layer_cluster_color; function changeColor(method) {
                map.removeLayer(active_layer)
                if (method == "cluster") { active_layer = explorer_layer_cluster_color } else if (method == "first") {
                    active_layer = explorer_layer_first_age_color
                } else if (method == "last") {
                    active_layer = explorer_layer_last_age_color
                } map.addLayer(active_layer)
            } function downloadAs(suffix) {
                bounds = map.getBounds(); zoom = "{{ zoom }}"
                window.location.href = `/explorer/${zoom}/${bounds.getNorth()}/${bounds.getEast()}/${bounds.getSouth()}/${bounds.getWest()}/${suffix}`
            } </script>
                <p></p><button type="button" class="btn btn-secondary btn-sm"
                    onclick="map.removeLayer(tile_layer)">Remove map background</button>
    </div>
</div>

<div class="row mb-3">
    <div class="col">
        <h2>Tile history</h2>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-4">
        {% if plot_tile_evolution|length > 0 %}
        {{ vega_direct("plot_tile_evolution", plot_tile_evolution) }}
        {% endif %}
    </div>
    <div class="col-md-4">
        {% if plot_cluster_evolution|length > 0 %}
        {{ vega_direct("plot_cluster_evolution", plot_cluster_evolution) }}
        {% endif %}
    </div>
    <div class="col-md-4">
        {% if plot_square_evolution|length > 0 %}
        {{ vega_direct("plot_square_evolution", plot_square_evolution) }}
        {% endif %}
    </div>
</div>

{% endif %}
{% endblock %}