Metadata-Version: 2.4
Name: datason
Version: 0.8.0
Summary: A comprehensive Python package for intelligent serialization that handles complex data types with ease.
Project-URL: Homepage, https://github.com/danielendler/datason
Project-URL: Documentation, https://datason.readthedocs.io
Project-URL: Repository, https://github.com/danielendler/datason
Project-URL: Bug Tracker, https://github.com/danielendler/datason/issues
Project-URL: Changelog, https://github.com/danielendler/datason/blob/main/CHANGELOG.md
Project-URL: Discussions, https://github.com/danielendler/datason/discussions
Project-URL: Funding, https://github.com/sponsors/danielendler
Author: datason Contributors
Maintainer-email: datason Maintainers <maintainers@datason.dev>
License-Expression: MIT
License-File: LICENSE
Keywords: ai,data-science,datetime,json,ml,numpy,pandas,serialization
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Utilities
Classifier: Typing :: Typed
Requires-Python: >=3.8
Provides-Extra: all
Requires-Dist: jax[cpu]>=0.4.0; extra == 'all'
Requires-Dist: numpy>=1.21.0; extra == 'all'
Requires-Dist: pandas>=1.3.0; extra == 'all'
Requires-Dist: pillow>=9.0.0; extra == 'all'
Requires-Dist: scikit-learn>=1.1.0; extra == 'all'
Requires-Dist: scipy>=1.9.0; extra == 'all'
Requires-Dist: tensorflow>=2.10.0; extra == 'all'
Requires-Dist: torch>=1.12.0; extra == 'all'
Requires-Dist: transformers>=4.20.0; extra == 'all'
Provides-Extra: dev
Requires-Dist: bandit[toml]>=1.7.5; extra == 'dev'
Requires-Dist: build>=1.0.3; extra == 'dev'
Requires-Dist: hatch>=1.7.0; extra == 'dev'
Requires-Dist: mkdocs-gen-files>=0.5.0; extra == 'dev'
Requires-Dist: mkdocs-literate-nav>=0.6.1; extra == 'dev'
Requires-Dist: mkdocs-material>=9.4.0; extra == 'dev'
Requires-Dist: mkdocs>=1.5.3; extra == 'dev'
Requires-Dist: mkdocstrings[python]>=0.23.0; extra == 'dev'
Requires-Dist: mypy>=1.6.0; extra == 'dev'
Requires-Dist: pip-audit>=2.6.1; extra == 'dev'
Requires-Dist: pip-tools>=7.3.0; extra == 'dev'
Requires-Dist: pre-commit>=3.5.0; extra == 'dev'
Requires-Dist: pytest-benchmark>=4.0.0; extra == 'dev'
Requires-Dist: pytest-cov>=4.1.0; extra == 'dev'
Requires-Dist: pytest-xdist>=3.3.0; extra == 'dev'
Requires-Dist: pytest>=7.4.0; extra == 'dev'
Requires-Dist: ruff>=0.1.6; extra == 'dev'
Requires-Dist: safety>=2.3.5; extra == 'dev'
Requires-Dist: semgrep>=1.45.0; extra == 'dev'
Requires-Dist: twine>=4.0.2; extra == 'dev'
Requires-Dist: types-requests>=2.31.0; extra == 'dev'
Provides-Extra: docs
Requires-Dist: mkdocs-gen-files>=0.5.0; extra == 'docs'
Requires-Dist: mkdocs-literate-nav>=0.6.1; extra == 'docs'
Requires-Dist: mkdocs-material>=9.4.0; extra == 'docs'
Requires-Dist: mkdocs>=1.5.3; extra == 'docs'
Requires-Dist: mkdocstrings[python]>=0.23.0; extra == 'docs'
Provides-Extra: ml
Requires-Dist: jax[cpu]>=0.4.0; extra == 'ml'
Requires-Dist: pillow>=9.0.0; extra == 'ml'
Requires-Dist: scikit-learn>=1.1.0; extra == 'ml'
Requires-Dist: scipy>=1.9.0; extra == 'ml'
Requires-Dist: tensorflow>=2.10.0; extra == 'ml'
Requires-Dist: torch>=1.12.0; extra == 'ml'
Requires-Dist: transformers>=4.20.0; extra == 'ml'
Provides-Extra: numpy
Requires-Dist: numpy>=1.21.0; extra == 'numpy'
Provides-Extra: pandas
Requires-Dist: pandas>=1.3.0; extra == 'pandas'
Description-Content-Type: text/markdown

# üöÄ datason

**A comprehensive Python package for intelligent serialization that handles complex data types with ease**

[![PyPI version](https://img.shields.io/pypi/v/datason.svg)](https://pypi.org/project/datason/)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/datason)](https://pypi.org/project/datason/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/datason)](https://pypi.org/project/datason/)
[![GitHub release (latest by date)](https://img.shields.io/github/v/release/danielendler/datason)](https://github.com/danielendler/datason/releases)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![GitHub stars](https://img.shields.io/github/stars/danielendler/datason?style=social)](https://github.com/danielendler/datason)
[![Code style: ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)
[![codecov](https://codecov.io/github/danielendler/datason/graph/badge.svg?token=UYL9LvVb8O)](https://codecov.io/github/danielendler/datason)
[![CI Status](https://img.shields.io/github/actions/workflow/status/danielendler/datason/ci.yml?branch=main)](https://github.com/danielendler/datason/actions)

datason transforms complex Python objects into JSON-serializable formats and back with intelligence. Perfect for ML/AI workflows, data science, and any application dealing with complex nested data structures.

## ‚ú® Features

- üß† **Intelligent Type Detection**: Automatically handles pandas DataFrames, NumPy arrays, datetime objects, and more
- üîÑ **Bidirectional**: Serialize to JSON and deserialize back to original objects
- üöÄ **ML/AI Optimized**: Special support for PyTorch tensors, TensorFlow objects, and scikit-learn models  
- üõ°Ô∏è **Type Safety**: Preserves data types and structure integrity
- ‚ö° **High Performance**: Optimized for speed with minimal overhead
- üîå **Extensible**: Easy to add custom serializers for your own types
- üì¶ **Zero Dependencies**: Core functionality works without additional packages
- üéØ **Modern API**: Intention-revealing function names with progressive complexity

## üêç Python Version Support

datason officially supports **Python 3.8+** and is actively tested on:

- ‚úÖ **Python 3.8** - Minimum supported version (core functionality)
- ‚úÖ **Python 3.9** - Full compatibility  
- ‚úÖ **Python 3.10** - Full compatibility
- ‚úÖ **Python 3.11** - Full compatibility (primary development version)
- ‚úÖ **Python 3.12** - Full compatibility
- ‚úÖ **Python 3.13** - Latest stable version (core features only; many ML libraries still releasing wheels)

### Compatibility Testing

We maintain compatibility through:
- **Automated CI testing** on all supported Python versions with strategic coverage:
  - **Python 3.8**: Core functionality validation (minimal dependencies)
  - **Python 3.9**: Data science focus (pandas integration)
  - **Python 3.10**: ML focus (scikit-learn, scipy)
  - **Python 3.11**: Full test suite (primary development version)
  - **Python 3.12**: Full test suite
  - **Python 3.13**: Core serialization tests only (latest stable)
- **Core functionality tests** ensuring basic serialization works on Python 3.8+
- **Dependency compatibility checks** for optional ML/data science libraries
- **Runtime version validation** with helpful error messages

> **Note**: While core functionality works on Python 3.8, some optional dependencies (like latest ML frameworks) may require newer Python versions. The package will still work - you'll just have fewer optional features available.
>
> **Python 3.13 Caution**: Many machine learning libraries have not yet released official 3.13 builds. Datason runs on Python 3.13, but only with core serialization features until those libraries catch up.

### Python 3.8 Limitations

Python 3.8 users should be aware:
- ‚úÖ **Core serialization** - Full support
- ‚úÖ **Basic types** - datetime, UUID, decimal, etc.
- ‚úÖ **Pandas/NumPy** - Basic DataFrame and array serialization
- ‚ö†Ô∏è **Advanced ML libraries** - Some may require Python 3.9+
- ‚ö†Ô∏è **Latest features** - Some newer configuration options may have limited support

We recommend Python 3.9+ for the best experience with all features.

## üèÉ‚Äç‚ôÇÔ∏è Quick Start

### Installation

```bash
pip install datason
```

### Traditional API - Comprehensive & Configurable

```python
import datason as ds
from datetime import datetime
import pandas as pd
import numpy as np

# Complex nested data structure
data = {
    "timestamp": datetime.now(),
    "dataframe": pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]}),
    "array": np.array([1, 2, 3, 4, 5]),
    "nested": {
        "values": [1, 2, {"inner": datetime.now()}]
    }
}

# Serialize to JSON-compatible format
serialized = ds.serialize(data)
print(serialized)

# Deserialize back to original objects
restored = ds.deserialize(serialized)
print(restored)
```

### Modern API - Intention-Revealing & Progressive

```python
import datason as ds

# üéØ Clear intentions with domain-specific functions
user_data = {"name": "Alice", "email": "alice@example.com", "ssn": "123-45-6789"}

# Security-focused with automatic PII redaction
secure_data = ds.dump_secure(user_data, redact_pii=True)

# ML-optimized for models and tensors
import torch
model_data = {"model": torch.nn.Linear(10, 1), "weights": torch.randn(10, 1)}
ml_serialized = ds.dump_ml(model_data)

# API-safe clean JSON for web endpoints
api_response = ds.dump_api({"status": "success", "data": [1, 2, 3]})

# üìà Progressive complexity for deserialization
json_data = '{"values": [1, 2, 3], "metadata": {"created": "2024-01-01T12:00:00"}}'

# Basic: Fast exploration (60-70% success rate)
basic_result = ds.load_basic(json_data)

# Smart: Production-ready (80-90% success rate)  
smart_result = ds.load_smart(json_data)

# Perfect: Template-based (100% success rate)
template = {"values": [int], "metadata": {"created": datetime}}
perfect_result = ds.load_perfect(json_data, template)

# üîç API Discovery
ds.help_api()  # Interactive guidance for choosing the right function
```

### Composable Options

```python
# Combine features for specific needs
large_sensitive_ml_data = {
    "model": trained_model,
    "user_data": {"email": "user@example.com", "preferences": {...}},
    "large_dataset": huge_numpy_array
}

# Secure + ML-optimized + Memory-efficient
result = ds.dump(
    large_sensitive_ml_data,
    secure=True,           # Enable PII redaction
    ml_mode=True,         # Optimize for ML objects
    chunked=True          # Memory-efficient processing
)
```

## üìö Documentation

For full documentation, examples, and API reference, visit: https://datason.readthedocs.io

## ü§ù Contributing

We welcome contributions! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
