# Generated from sdoc/antlr/sdoc2Lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,198,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,
        2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,
        2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,
        7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,1,0,4,0,52,8,0,11,0,
        12,0,53,1,0,1,0,3,0,58,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,4,1,4,1,4,5,4,91,8,4,10,4,12,4,94,9,4,1,4,1,4,1,5,1,
        5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,4,7,107,8,7,11,7,12,7,108,1,7,1,7,
        1,8,1,8,5,8,115,8,8,10,8,12,8,118,9,8,1,8,1,8,1,8,1,9,1,9,1,9,4,
        9,126,8,9,11,9,12,9,127,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,5,15,148,8,15,
        10,15,12,15,151,9,15,1,16,1,16,3,16,155,8,16,1,17,1,17,5,17,159,
        8,17,10,17,12,17,162,9,17,1,17,1,17,1,17,5,17,167,8,17,10,17,12,
        17,170,9,17,1,17,3,17,173,8,17,1,18,4,18,176,8,18,11,18,12,18,177,
        1,19,4,19,181,8,19,11,19,12,19,182,1,19,1,19,1,20,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,4,21,195,8,21,11,21,12,21,196,0,0,22,6,1,8,2,
        10,3,12,4,14,5,16,6,18,7,20,8,22,9,24,10,26,11,28,12,30,13,32,14,
        34,15,36,16,38,17,40,0,42,0,44,18,46,19,48,20,6,0,1,2,3,4,5,10,1,
        0,92,92,2,0,95,95,97,122,3,0,48,57,95,95,97,122,3,0,9,10,13,13,32,
        32,2,0,123,123,125,125,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,34,34,1,0,39,39,1,0,48,57,206,0,6,1,0,0,0,0,8,1,0,0,0,0,
        10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,1,16,1,0,0,0,1,18,1,0,0,0,1,
        20,1,0,0,0,2,22,1,0,0,0,2,24,1,0,0,0,3,26,1,0,0,0,3,28,1,0,0,0,4,
        30,1,0,0,0,4,32,1,0,0,0,4,34,1,0,0,0,4,36,1,0,0,0,4,38,1,0,0,0,4,
        44,1,0,0,0,5,46,1,0,0,0,5,48,1,0,0,0,6,57,1,0,0,0,8,59,1,0,0,0,10,
        68,1,0,0,0,12,75,1,0,0,0,14,87,1,0,0,0,16,97,1,0,0,0,18,101,1,0,
        0,0,20,106,1,0,0,0,22,112,1,0,0,0,24,125,1,0,0,0,26,129,1,0,0,0,
        28,133,1,0,0,0,30,137,1,0,0,0,32,141,1,0,0,0,34,143,1,0,0,0,36,145,
        1,0,0,0,38,154,1,0,0,0,40,172,1,0,0,0,42,175,1,0,0,0,44,180,1,0,
        0,0,46,186,1,0,0,0,48,194,1,0,0,0,50,52,8,0,0,0,51,50,1,0,0,0,52,
        53,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,58,1,0,0,0,55,56,5,92,
        0,0,56,58,5,92,0,0,57,51,1,0,0,0,57,55,1,0,0,0,58,7,1,0,0,0,59,60,
        5,92,0,0,60,61,5,98,0,0,61,62,5,101,0,0,62,63,5,103,0,0,63,64,5,
        105,0,0,64,65,5,110,0,0,65,66,1,0,0,0,66,67,6,1,0,0,67,9,1,0,0,0,
        68,69,5,92,0,0,69,70,5,101,0,0,70,71,5,110,0,0,71,72,5,100,0,0,72,
        73,1,0,0,0,73,74,6,2,0,0,74,11,1,0,0,0,75,76,5,92,0,0,76,77,5,112,
        0,0,77,78,5,111,0,0,78,79,5,115,0,0,79,80,5,105,0,0,80,81,5,116,
        0,0,81,82,5,105,0,0,82,83,5,111,0,0,83,84,5,110,0,0,84,85,1,0,0,
        0,85,86,6,3,1,0,86,13,1,0,0,0,87,88,5,92,0,0,88,92,7,1,0,0,89,91,
        7,2,0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,
        93,95,1,0,0,0,94,92,1,0,0,0,95,96,6,4,1,0,96,15,1,0,0,0,97,98,5,
        91,0,0,98,99,1,0,0,0,99,100,6,5,2,0,100,17,1,0,0,0,101,102,5,123,
        0,0,102,103,1,0,0,0,103,104,6,6,3,0,104,19,1,0,0,0,105,107,7,3,0,
        0,106,105,1,0,0,0,107,108,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,
        0,109,110,1,0,0,0,110,111,6,7,4,0,111,21,1,0,0,0,112,116,5,125,0,
        0,113,115,7,3,0,0,114,113,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,
        0,116,117,1,0,0,0,117,119,1,0,0,0,118,116,1,0,0,0,119,120,6,8,5,
        0,120,121,6,8,5,0,121,23,1,0,0,0,122,126,8,4,0,0,123,124,5,92,0,
        0,124,126,9,0,0,0,125,122,1,0,0,0,125,123,1,0,0,0,126,127,1,0,0,
        0,127,125,1,0,0,0,127,128,1,0,0,0,128,25,1,0,0,0,129,130,5,91,0,
        0,130,131,1,0,0,0,131,132,6,10,2,0,132,27,1,0,0,0,133,134,5,123,
        0,0,134,135,1,0,0,0,135,136,6,11,6,0,136,29,1,0,0,0,137,138,5,93,
        0,0,138,139,1,0,0,0,139,140,6,12,5,0,140,31,1,0,0,0,141,142,5,61,
        0,0,142,33,1,0,0,0,143,144,5,32,0,0,144,35,1,0,0,0,145,149,7,5,0,
        0,146,148,7,6,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,
        0,149,150,1,0,0,0,150,37,1,0,0,0,151,149,1,0,0,0,152,155,3,40,17,
        0,153,155,3,42,18,0,154,152,1,0,0,0,154,153,1,0,0,0,155,39,1,0,0,
        0,156,160,5,34,0,0,157,159,8,7,0,0,158,157,1,0,0,0,159,162,1,0,0,
        0,160,158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,160,1,0,0,
        0,163,173,5,34,0,0,164,168,5,39,0,0,165,167,8,8,0,0,166,165,1,0,
        0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,
        0,0,170,168,1,0,0,0,171,173,5,39,0,0,172,156,1,0,0,0,172,164,1,0,
        0,0,173,41,1,0,0,0,174,176,7,9,0,0,175,174,1,0,0,0,176,177,1,0,0,
        0,177,175,1,0,0,0,177,178,1,0,0,0,178,43,1,0,0,0,179,181,7,3,0,0,
        180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,
        183,184,1,0,0,0,184,185,6,19,4,0,185,45,1,0,0,0,186,187,5,125,0,
        0,187,188,1,0,0,0,188,189,6,20,5,0,189,190,6,20,5,0,190,47,1,0,0,
        0,191,195,8,4,0,0,192,193,5,92,0,0,193,195,9,0,0,0,194,191,1,0,0,
        0,194,192,1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,
        0,197,49,1,0,0,0,22,0,1,2,3,4,5,53,57,92,108,116,125,127,149,154,
        160,168,172,177,182,194,196,7,5,1,0,5,3,0,5,4,0,5,2,0,6,0,0,4,0,
        0,5,5,0
    ]

class sdoc2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MODE_BLOCK_ARG = 1
    BLOCK_MODE_ARG = 2
    MODE_INLINE_ARG = 3
    MODE_OPT_ARG = 4
    INLINE_MODE_ARG = 5

    TEXT = 1
    BEGIN = 2
    END = 3
    POSITION = 4
    SDOC2_COMMAND = 5
    BLOCK_ARG_LEFT_BRACKET = 6
    BLOCK_ARG_LEFT_BRACE = 7
    BLOCK_ARG_WS = 8
    BLOCK_ARG_RIGHT_BRACE = 9
    BLOCK_ARG_ARG = 10
    INLINE_ARG_LEFT_BRACKET = 11
    INLINE_ARG_LEFT_BRACE = 12
    OPT_ARG_RIGHT_BRACKET = 13
    OPT_ARG_EQUALS = 14
    OPT_ARG_SEPARATOR = 15
    OPT_ARG_NAME = 16
    OPT_ARG_VALUE = 17
    OPT_ARG_WS = 18
    INLINE_ARG_RIGHT_BRACE = 19
    INLINE_ARG_ARG = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "MODE_BLOCK_ARG", "BLOCK_MODE_ARG", "MODE_INLINE_ARG", 
                  "MODE_OPT_ARG", "INLINE_MODE_ARG" ]

    literalNames = [ "<INVALID>",
            "'\\begin'", "'\\end'", "'\\position'", "']'", "'='", "' '", 
            "'}'" ]

    symbolicNames = [ "<INVALID>",
            "TEXT", "BEGIN", "END", "POSITION", "SDOC2_COMMAND", "BLOCK_ARG_LEFT_BRACKET", 
            "BLOCK_ARG_LEFT_BRACE", "BLOCK_ARG_WS", "BLOCK_ARG_RIGHT_BRACE", 
            "BLOCK_ARG_ARG", "INLINE_ARG_LEFT_BRACKET", "INLINE_ARG_LEFT_BRACE", 
            "OPT_ARG_RIGHT_BRACKET", "OPT_ARG_EQUALS", "OPT_ARG_SEPARATOR", 
            "OPT_ARG_NAME", "OPT_ARG_VALUE", "OPT_ARG_WS", "INLINE_ARG_RIGHT_BRACE", 
            "INLINE_ARG_ARG" ]

    ruleNames = [ "TEXT", "BEGIN", "END", "POSITION", "SDOC2_COMMAND", "BLOCK_ARG_LEFT_BRACKET", 
                  "BLOCK_ARG_LEFT_BRACE", "BLOCK_ARG_WS", "BLOCK_ARG_RIGHT_BRACE", 
                  "BLOCK_ARG_ARG", "INLINE_ARG_LEFT_BRACKET", "INLINE_ARG_LEFT_BRACE", 
                  "OPT_ARG_RIGHT_BRACKET", "OPT_ARG_EQUALS", "OPT_ARG_SEPARATOR", 
                  "OPT_ARG_NAME", "OPT_ARG_VALUE", "OPT_ARG_STRING", "OPT_ARG_INT", 
                  "OPT_ARG_WS", "INLINE_ARG_RIGHT_BRACE", "INLINE_ARG_ARG" ]

    grammarFileName = "sdoc2Lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


