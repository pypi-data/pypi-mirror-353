# Generated from sdoc/antlr/sdoc1Lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,315,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
        4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,
        12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,
        18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,
        25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,
        31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,
        38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,4,0,91,8,0,11,
        0,12,0,92,1,0,1,0,3,0,97,8,0,1,1,1,1,5,1,101,8,1,10,1,12,1,104,9,
        1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,4,13,213,8,13,11,13,12,13,214,1,14,1,14,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,4,16,226,8,16,11,16,12,16,227,1,17,1,17,
        1,18,1,18,1,18,1,18,1,19,4,19,237,8,19,11,19,12,19,238,1,19,1,19,
        1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
        1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,
        1,36,1,37,1,37,1,37,5,37,286,8,37,10,37,12,37,289,9,37,1,38,4,38,
        292,8,38,11,38,12,38,293,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,
        3,41,304,8,41,1,42,1,42,1,42,5,42,309,8,42,10,42,12,42,312,9,42,
        1,42,1,42,1,310,0,43,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,
        10,23,11,25,12,27,13,29,14,31,15,33,16,35,17,37,18,39,19,41,20,43,
        21,45,22,47,23,49,24,51,25,53,26,55,27,57,28,59,29,61,30,63,31,65,
        32,67,33,69,34,71,35,73,36,75,37,77,38,79,39,81,0,83,0,85,0,87,40,
        3,0,1,2,8,1,0,92,92,2,0,10,10,13,13,2,0,95,95,97,122,2,0,123,123,
        125,125,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,1,0,48,57,1,
        0,39,39,322,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,
        1,0,0,0,1,33,1,0,0,0,1,35,1,0,0,0,2,37,1,0,0,0,2,39,1,0,0,0,2,41,
        1,0,0,0,2,43,1,0,0,0,2,45,1,0,0,0,2,47,1,0,0,0,2,49,1,0,0,0,2,51,
        1,0,0,0,2,53,1,0,0,0,2,55,1,0,0,0,2,57,1,0,0,0,2,59,1,0,0,0,2,61,
        1,0,0,0,2,63,1,0,0,0,2,65,1,0,0,0,2,67,1,0,0,0,2,69,1,0,0,0,2,71,
        1,0,0,0,2,73,1,0,0,0,2,75,1,0,0,0,2,77,1,0,0,0,2,79,1,0,0,0,2,87,
        1,0,0,0,3,96,1,0,0,0,5,98,1,0,0,0,7,107,1,0,0,0,9,116,1,0,0,0,11,
        125,1,0,0,0,13,133,1,0,0,0,15,139,1,0,0,0,17,146,1,0,0,0,19,155,
        1,0,0,0,21,169,1,0,0,0,23,175,1,0,0,0,25,186,1,0,0,0,27,196,1,0,
        0,0,29,210,1,0,0,0,31,216,1,0,0,0,33,218,1,0,0,0,35,225,1,0,0,0,
        37,229,1,0,0,0,39,231,1,0,0,0,41,236,1,0,0,0,43,242,1,0,0,0,45,244,
        1,0,0,0,47,246,1,0,0,0,49,248,1,0,0,0,51,250,1,0,0,0,53,252,1,0,
        0,0,55,254,1,0,0,0,57,256,1,0,0,0,59,258,1,0,0,0,61,261,1,0,0,0,
        63,263,1,0,0,0,65,266,1,0,0,0,67,269,1,0,0,0,69,272,1,0,0,0,71,274,
        1,0,0,0,73,277,1,0,0,0,75,280,1,0,0,0,77,282,1,0,0,0,79,291,1,0,
        0,0,81,295,1,0,0,0,83,297,1,0,0,0,85,303,1,0,0,0,87,305,1,0,0,0,
        89,91,8,0,0,0,90,89,1,0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,92,93,1,
        0,0,0,93,97,1,0,0,0,94,95,5,92,0,0,95,97,5,92,0,0,96,90,1,0,0,0,
        96,94,1,0,0,0,97,4,1,0,0,0,98,102,3,7,2,0,99,101,8,1,0,0,100,99,
        1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,105,
        1,0,0,0,104,102,1,0,0,0,105,106,7,1,0,0,106,6,1,0,0,0,107,108,5,
        92,0,0,108,109,5,99,0,0,109,110,5,111,0,0,110,111,5,109,0,0,111,
        112,5,109,0,0,112,113,5,101,0,0,113,114,5,110,0,0,114,115,5,116,
        0,0,115,8,1,0,0,0,116,117,5,92,0,0,117,118,5,100,0,0,118,119,5,101,
        0,0,119,120,5,98,0,0,120,121,5,117,0,0,121,122,5,103,0,0,122,123,
        1,0,0,0,123,124,6,3,0,0,124,10,1,0,0,0,125,126,5,92,0,0,126,127,
        5,101,0,0,127,128,5,108,0,0,128,129,5,105,0,0,129,130,5,102,0,0,
        130,131,1,0,0,0,131,132,6,4,0,0,132,12,1,0,0,0,133,134,5,92,0,0,
        134,135,5,101,0,0,135,136,5,108,0,0,136,137,5,115,0,0,137,138,5,
        101,0,0,138,14,1,0,0,0,139,140,5,92,0,0,140,141,5,101,0,0,141,142,
        5,110,0,0,142,143,5,100,0,0,143,144,5,105,0,0,144,145,5,102,0,0,
        145,16,1,0,0,0,146,147,5,92,0,0,147,148,5,101,0,0,148,149,5,114,
        0,0,149,150,5,114,0,0,150,151,5,111,0,0,151,152,5,114,0,0,152,153,
        1,0,0,0,153,154,6,7,1,0,154,18,1,0,0,0,155,156,5,92,0,0,156,157,
        5,101,0,0,157,158,5,120,0,0,158,159,5,112,0,0,159,160,5,114,0,0,
        160,161,5,101,0,0,161,162,5,115,0,0,162,163,5,115,0,0,163,164,5,
        105,0,0,164,165,5,111,0,0,165,166,5,110,0,0,166,167,1,0,0,0,167,
        168,6,8,0,0,168,20,1,0,0,0,169,170,5,92,0,0,170,171,5,105,0,0,171,
        172,5,102,0,0,172,173,1,0,0,0,173,174,6,9,0,0,174,22,1,0,0,0,175,
        176,5,92,0,0,176,177,5,105,0,0,177,178,5,110,0,0,178,179,5,99,0,
        0,179,180,5,108,0,0,180,181,5,117,0,0,181,182,5,100,0,0,182,183,
        5,101,0,0,183,184,1,0,0,0,184,185,6,10,1,0,185,24,1,0,0,0,186,187,
        5,92,0,0,187,188,5,110,0,0,188,189,5,111,0,0,189,190,5,116,0,0,190,
        191,5,105,0,0,191,192,5,99,0,0,192,193,5,101,0,0,193,194,1,0,0,0,
        194,195,6,11,1,0,195,26,1,0,0,0,196,197,5,92,0,0,197,198,5,115,0,
        0,198,199,5,117,0,0,199,200,5,98,0,0,200,201,5,115,0,0,201,202,5,
        116,0,0,202,203,5,105,0,0,203,204,5,116,0,0,204,205,5,117,0,0,205,
        206,5,116,0,0,206,207,5,101,0,0,207,208,1,0,0,0,208,209,6,12,0,0,
        209,28,1,0,0,0,210,212,5,92,0,0,211,213,7,2,0,0,212,211,1,0,0,0,
        213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,30,1,0,0,0,216,
        217,5,123,0,0,217,32,1,0,0,0,218,219,5,125,0,0,219,220,1,0,0,0,220,
        221,6,15,2,0,221,34,1,0,0,0,222,226,8,3,0,0,223,224,5,92,0,0,224,
        226,9,0,0,0,225,222,1,0,0,0,225,223,1,0,0,0,226,227,1,0,0,0,227,
        225,1,0,0,0,227,228,1,0,0,0,228,36,1,0,0,0,229,230,5,123,0,0,230,
        38,1,0,0,0,231,232,5,125,0,0,232,233,1,0,0,0,233,234,6,18,2,0,234,
        40,1,0,0,0,235,237,7,4,0,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,
        1,0,0,0,238,239,1,0,0,0,239,240,1,0,0,0,240,241,6,19,3,0,241,42,
        1,0,0,0,242,243,5,40,0,0,243,44,1,0,0,0,244,245,5,41,0,0,245,46,
        1,0,0,0,246,247,5,91,0,0,247,48,1,0,0,0,248,249,5,93,0,0,249,50,
        1,0,0,0,250,251,5,42,0,0,251,52,1,0,0,0,252,253,5,47,0,0,253,54,
        1,0,0,0,254,255,5,43,0,0,255,56,1,0,0,0,256,257,5,45,0,0,257,58,
        1,0,0,0,258,259,5,61,0,0,259,260,5,61,0,0,260,60,1,0,0,0,261,262,
        5,62,0,0,262,62,1,0,0,0,263,264,5,62,0,0,264,265,5,61,0,0,265,64,
        1,0,0,0,266,267,5,38,0,0,267,268,5,38,0,0,268,66,1,0,0,0,269,270,
        5,124,0,0,270,271,5,124,0,0,271,68,1,0,0,0,272,273,5,60,0,0,273,
        70,1,0,0,0,274,275,5,60,0,0,275,276,5,61,0,0,276,72,1,0,0,0,277,
        278,5,33,0,0,278,279,5,61,0,0,279,74,1,0,0,0,280,281,5,61,0,0,281,
        76,1,0,0,0,282,287,3,81,39,0,283,286,3,81,39,0,284,286,3,83,40,0,
        285,283,1,0,0,0,285,284,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,
        287,288,1,0,0,0,288,78,1,0,0,0,289,287,1,0,0,0,290,292,3,83,40,0,
        291,290,1,0,0,0,292,293,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,
        294,80,1,0,0,0,295,296,7,5,0,0,296,82,1,0,0,0,297,298,7,6,0,0,298,
        84,1,0,0,0,299,300,5,92,0,0,300,304,5,92,0,0,301,302,5,92,0,0,302,
        304,5,39,0,0,303,299,1,0,0,0,303,301,1,0,0,0,304,86,1,0,0,0,305,
        310,5,39,0,0,306,309,3,85,41,0,307,309,8,7,0,0,308,306,1,0,0,0,308,
        307,1,0,0,0,309,312,1,0,0,0,310,311,1,0,0,0,310,308,1,0,0,0,311,
        313,1,0,0,0,312,310,1,0,0,0,313,314,5,39,0,0,314,88,1,0,0,0,16,0,
        1,2,92,96,102,214,225,227,238,285,287,293,303,308,310,4,2,2,0,2,
        1,0,2,0,0,0,1,0
    ]

class sdoc1Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MODE_SIMPLE = 1
    MODE_EXPR = 2

    TEXT = 1
    LINE_COMMENT = 2
    COMMENT = 3
    DEBUG = 4
    ELIF = 5
    ELSE = 6
    ENDIF = 7
    ERROR = 8
    EXPRESSION = 9
    IF = 10
    INCLUDE = 11
    NOTICE = 12
    SUBSTITUTE = 13
    SDOC2_COMMAND = 14
    SIMPLE_OBRACE = 15
    SIMPLE_CBRACE = 16
    SIMPLE_ARG = 17
    EXPR_OBRACE = 18
    EXPR_CBRACE = 19
    EXPR_WS = 20
    EXPR_LEFT_PAREN = 21
    EXPR_RIGHT_PAREN = 22
    EXPR_LEFT_BRACKET = 23
    EXPR_RIGHT_BRACKET = 24
    EXPR_MULT = 25
    EXPR_DIV = 26
    EXPR_ADD = 27
    EXPR_MINUS = 28
    EXPR_EQUAL = 29
    EXPR_GT = 30
    EXPR_GTE = 31
    EXPR_LOGICAL_AND = 32
    EXPR_LOGICAL_OR = 33
    EXPR_LT = 34
    EXPR_LTE = 35
    EXPR_NOT_EQUAL = 36
    EXPR_ASSIGN = 37
    EXPR_IDENTIFIER = 38
    EXPR_INTEGER_CONSTANT = 39
    EXPR_STRING_CONSTANT = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "MODE_SIMPLE", "MODE_EXPR" ]

    literalNames = [ "<INVALID>",
            "'\\comment'", "'\\debug'", "'\\elif'", "'\\else'", "'\\endif'", 
            "'\\error'", "'\\expression'", "'\\if'", "'\\include'", "'\\notice'", 
            "'\\substitute'", "'('", "')'", "'['", "']'", "'*'", "'/'", 
            "'+'", "'-'", "'=='", "'>'", "'>='", "'&&'", "'||'", "'<'", 
            "'<='", "'!='", "'='" ]

    symbolicNames = [ "<INVALID>",
            "TEXT", "LINE_COMMENT", "COMMENT", "DEBUG", "ELIF", "ELSE", 
            "ENDIF", "ERROR", "EXPRESSION", "IF", "INCLUDE", "NOTICE", "SUBSTITUTE", 
            "SDOC2_COMMAND", "SIMPLE_OBRACE", "SIMPLE_CBRACE", "SIMPLE_ARG", 
            "EXPR_OBRACE", "EXPR_CBRACE", "EXPR_WS", "EXPR_LEFT_PAREN", 
            "EXPR_RIGHT_PAREN", "EXPR_LEFT_BRACKET", "EXPR_RIGHT_BRACKET", 
            "EXPR_MULT", "EXPR_DIV", "EXPR_ADD", "EXPR_MINUS", "EXPR_EQUAL", 
            "EXPR_GT", "EXPR_GTE", "EXPR_LOGICAL_AND", "EXPR_LOGICAL_OR", 
            "EXPR_LT", "EXPR_LTE", "EXPR_NOT_EQUAL", "EXPR_ASSIGN", "EXPR_IDENTIFIER", 
            "EXPR_INTEGER_CONSTANT", "EXPR_STRING_CONSTANT" ]

    ruleNames = [ "TEXT", "LINE_COMMENT", "COMMENT", "DEBUG", "ELIF", "ELSE", 
                  "ENDIF", "ERROR", "EXPRESSION", "IF", "INCLUDE", "NOTICE", 
                  "SUBSTITUTE", "SDOC2_COMMAND", "SIMPLE_OBRACE", "SIMPLE_CBRACE", 
                  "SIMPLE_ARG", "EXPR_OBRACE", "EXPR_CBRACE", "EXPR_WS", 
                  "EXPR_LEFT_PAREN", "EXPR_RIGHT_PAREN", "EXPR_LEFT_BRACKET", 
                  "EXPR_RIGHT_BRACKET", "EXPR_MULT", "EXPR_DIV", "EXPR_ADD", 
                  "EXPR_MINUS", "EXPR_EQUAL", "EXPR_GT", "EXPR_GTE", "EXPR_LOGICAL_AND", 
                  "EXPR_LOGICAL_OR", "EXPR_LT", "EXPR_LTE", "EXPR_NOT_EQUAL", 
                  "EXPR_ASSIGN", "EXPR_IDENTIFIER", "EXPR_INTEGER_CONSTANT", 
                  "EXPR_NON_DIGIT", "EXPR_DIGIT", "ESCAPED_CHAR", "EXPR_STRING_CONSTANT" ]

    grammarFileName = "sdoc1Lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


