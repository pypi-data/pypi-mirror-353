# This file is part of Monitizer, but was adapted from https://github.com/VeriXAI/Outside-the-Box/tree/master
#
# SPDX-FileCopyrightText: 2020 Anna Lukina
#
# SPDX-License-Identifier: LicenseRef-arxiv

import warnings

# Suppress the specific FutureWarning from KMeans
warnings.simplefilter(action='ignore', category=FutureWarning)

from sklearn.cluster import KMeans


# --- public --- ###

def cluster_refinement(class2values, threshold=None, n_clusters=None, seed=42):
    """
    Refine clustering for each class in the input based on the specified clustering algorithm.

    :param class2values: Dictionary mapping class indices to their respective data values.
    :param threshold: The threshold for relative improvement in inertia for KMeans clustering.
                      Used to determine when to stop adding more clusters.
    :param n_clusters: Number of clusters to use for KMeans. If None, the function determines
                       the optimal number based on the threshold.
    :param seed: Random seed for the clustering
    :return: Dictionary mapping class indices to their refined cluster assignments.
    """
    class2clusters = dict()
    for class_index, values in class2values.items():
        clusters = _cluster_class_refinement(values, threshold=threshold, n_clusters=n_clusters, seed=seed)
        #print(" class", class_index, "will use", cluster_count(clusters), "clusters")
        class2clusters[class_index] = clusters
    return class2clusters


def cluster_count(clusterer):
    """
    Get the number of clusters generated by the clustering algorithm.

    :param clusterer: The trained clustering model.
    :return: Number of clusters.
    """
    return clusterer.n_clusters


def cluster_center(clusterer, cluster):
    """
    Get the center of a specified cluster.

    :param clusterer: The trained clustering model.
    :param cluster: The index of the cluster.
    :return: Center of the specified cluster.
    """
    return clusterer.cluster_centers_[cluster]


# --- private --- ###

def _cluster_class_refinement(values, threshold, n_clusters, seed=42):
    """
    Optimize KMeans clustering based on a specified threshold.

    :param values: Data values for clustering.
    :param threshold: Threshold for optimization.
    :param n_clusters: Number of clusters. If None, function determines the optimal number.
    :return: Trained KMeans model.
    """
    if n_clusters is not None:
        return KMeans(n_clusters, random_state=seed).fit(values)

    n_clusters = 1
    n_values = len(values)
    assert n_values > 0, "Values cannot be empty"
    clustered = KMeans(n_clusters, random_state=seed).fit(values)
    inertias = [clustered.inertia_]

    while n_values > n_clusters:
        n_clusters_new = n_clusters + 1
        # Perform KMeans clustering with a updated number of clusters
        clustered_new = KMeans(n_clusters_new, random_state=seed).fit(values)
        # todo: remove break for learning clusters dynamically
        # break
        inertias.append(clustered_new.inertia_)

        if _terminate_clustering(inertias, threshold):
            break

        clustered = clustered_new
        n_clusters += 1

    return clustered


def _terminate_clustering(inertias, threshold):
    """
    Check if the relative improvement in inertia is below a specified threshold.

    :param inertias: List of inertias from clustering iterations.
    :param threshold: Threshold for relative improvement.
    :return: Boolean indicating whether to terminate clustering.
    """
    assert len(inertias) > 1, "Inertias list must have more than one value"
    if inertias[-2] == 0:
        return True
    improvement = 1 - (inertias[-1] / inertias[-2])
    return improvement < threshold
